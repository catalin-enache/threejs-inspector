{"version":3,"file":"index_injected-CoX2cBOT.js","sources":["../../demo/index_injected.tsx"],"sourcesContent":["import * as THREE from 'three';\nimport { ReactNode, StrictMode, useState, useEffect } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Canvas } from '@react-three/fiber';\n// import { CameraControls as _CameraControls, OrbitControls as _OrbitControls } from '@react-three/drei';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { ExperienceSwitcher } from 'src/components/ExperienceSwitcher/ExperienceSwitcher';\nimport { Experience as DefaultExperience } from './scenarios/Experience';\nimport { ProjectLongLatOnSphere } from './scenarios/ProjectLongLatOnSphere';\nimport { Inspector } from 'src/lib/inspector';\nimport { extend } from '@react-three/fiber';\nimport { default as api, type AppStore } from 'src/lib/api';\nimport './main.css';\n\nimport { projects } from './projects';\napi.setProjects(projects);\n\nextend({ OrbitControls });\n\nconst experiences = [\n  {\n    name: 'Default Experience',\n    Experience: DefaultExperience\n  },\n  {\n    name: 'Project Long/Lat on Sphere',\n    Experience: ProjectLongLatOnSphere\n  }\n];\n\n// const experiences = [\n//   {\n//     name: 'Default Experience',\n//     Experience: lazy(() => import('./scenarios/Experience'))\n//   },\n//   {\n//     name: 'Project Long/Lat on Sphere',\n//     Experience: lazy(() => import('./scenarios/ProjectLongLatOnSphere'))\n//   }\n// ];\n\nconst params = {\n  asset: 'two'\n};\nconst assets = ['one', 'two', 'three'];\n\n// TODO: Note, these custom params are merged with custom params from Experience scenario\nconst customParams = {\n  asset: {\n    object: params,\n    prop: 'asset',\n    control: {\n      label: 'Asset',\n      options: assets.reduce((acc, asset) => {\n        acc[asset] = asset;\n        return acc;\n      }, {} as any),\n      onChange: (value: string) => {\n        console.log('onChange', value);\n      }\n    }\n  }\n};\n\nconst glOptions = { antialias: true, precision: 'highp' };\n\nconst scene = new THREE.Scene();\nscene.fog = new THREE.Fog(0xa0a0a0, 2, 100);\n\nconst cameraPosition = new THREE.Vector3(0, 0, 12);\nconst camera1 = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera1.position.copy(cameraPosition);\n\nconst camera2 = new THREE.OrthographicCamera(\n  window.innerWidth / -2,\n  window.innerWidth / 2,\n  window.innerHeight / 2,\n  window.innerHeight / -2,\n  0.1,\n  1000\n);\ncamera2.position.copy(cameraPosition);\ncamera2.zoom = 45;\ncamera2.updateProjectionMatrix();\n\ninterface AppProps {\n  children?: ReactNode;\n}\n\nexport function App(props: AppProps) {\n  const { children } = props;\n\n  const customCameraControls = false;\n  const [camera, setCamera] = useState<THREE.PerspectiveCamera | THREE.OrthographicCamera>(camera1);\n  const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n  const [isDraggingTransformControls, setIsDraggingTransformControls] = useState(false);\n  const initialPlayingState = api.getPlayingState();\n  const [playingState, setPlayingState] = useState<AppStore['playingState']>(initialPlayingState);\n\n  useEffect(() => {\n    const keysListener = (event: KeyboardEvent) => {\n      if (event.code === 'KeyC') {\n        if (camera === camera1) {\n          setCamera(camera2);\n        } else {\n          setCamera(camera1);\n        }\n      }\n    };\n    window.addEventListener('keydown', keysListener);\n    return () => {\n      window.removeEventListener('keydown', keysListener);\n    };\n  }, [camera]);\n\n  return (\n    <Canvas\n      camera={camera}\n      scene={scene}\n      shadows={'soft'}\n      gl={(defaultProps) => {\n        const _renderer =\n          renderer ??\n          new THREE.WebGLRenderer({\n            ...defaultProps,\n            ...glOptions\n          });\n        !renderer && setRenderer(() => _renderer);\n        return _renderer;\n      }}\n      frameloop={'always'}\n    >\n      <Inspector\n        autoNavControls={customCameraControls ? 'never' : 'whenStopped'}\n        customParams={customParams}\n        showInspector={true}\n        showGizmos={true}\n        useTransformControls={true}\n        onTransformControlsDragging={setIsDraggingTransformControls}\n        onPlayingStateChange={setPlayingState}\n      />\n      {/*dampingFactor={0.05} is default*/}\n      {/*<_OrbitControls makeDefault={true} enableDamping={true} dampingFactor={0.1} />*/}\n      {/*CameraControls do not allow controlling camera from outside*/}\n      {/*<_CameraControls makeDefault={true} />*/}\n      {renderer && (\n        <orbitControls\n          args={[camera, renderer.domElement]}\n          enabled={!isDraggingTransformControls && (customCameraControls || playingState !== 'stopped')}\n          enableDamping={false}\n        />\n      )}\n      {children}\n    </Canvas>\n  );\n}\n\nconst useStrictMode = true;\n\ncreateRoot(document.getElementById('main') as HTMLElement).render(\n  useStrictMode ? (\n    <StrictMode>\n      <App>\n        {/*<ProjectLongLatOnSphere />*/}\n        <ExperienceSwitcher experiences={experiences} />\n      </App>\n    </StrictMode>\n  ) : (\n    <App>\n      {/*<ProjectLongLatOnSphere />*/}\n      <ExperienceSwitcher experiences={experiences} />\n    </App>\n  )\n);\n"],"names":["api","projects","extend","OrbitControls","experiences","DefaultExperience","ProjectLongLatOnSphere","params","assets","customParams","acc","asset","value","glOptions","scene","THREE.Scene","THREE.Fog","cameraPosition","THREE.Vector3","camera1","THREE.PerspectiveCamera","camera2","THREE.OrthographicCamera","App","props","children","camera","setCamera","useState","renderer","setRenderer","isDraggingTransformControls","setIsDraggingTransformControls","initialPlayingState","playingState","setPlayingState","useEffect","keysListener","event","jsxs","Canvas","defaultProps","_renderer","THREE.WebGLRenderer","jsx","Inspector","createRoot","StrictMode","ExperienceSwitcher"],"mappings":"ibAeAA,EAAI,YAAYC,CAAQ,EAExBC,EAAO,CAAE,cAAAC,EAAe,EAExB,MAAMC,EAAc,CAClB,CACE,KAAM,qBACN,WAAYC,CACd,EACA,CACE,KAAM,6BACN,WAAYC,CAAA,CAEhB,EAaMC,EAAS,CACb,MAAO,KACT,EACMC,EAAS,CAAC,MAAO,MAAO,OAAO,EAG/BC,EAAe,CACnB,MAAO,CACL,OAAQF,EACR,KAAM,QACN,QAAS,CACP,MAAO,QACP,QAASC,EAAO,OAAO,CAACE,EAAKC,KAC3BD,EAAIC,CAAK,EAAIA,EACND,GACN,EAAS,EACZ,SAAWE,GAAkB,CACnB,QAAA,IAAI,WAAYA,CAAK,CAAA,CAC/B,CACF,CAEJ,EAEMC,EAAY,CAAE,UAAW,GAAM,UAAW,OAAQ,EAElDC,EAAQ,IAAIC,EAClBD,EAAM,IAAM,IAAIE,EAAU,SAAU,EAAG,GAAG,EAE1C,MAAMC,EAAiB,IAAIC,EAAc,EAAG,EAAG,EAAE,EAC3CC,EAAU,IAAIC,EAAwB,GAAI,OAAO,WAAa,OAAO,YAAa,GAAK,GAAI,EACjGD,EAAQ,SAAS,KAAKF,CAAc,EAEpC,MAAMI,EAAU,IAAIC,EAClB,OAAO,WAAa,GACpB,OAAO,WAAa,EACpB,OAAO,YAAc,EACrB,OAAO,YAAc,GACrB,GACA,GACF,EACAD,EAAQ,SAAS,KAAKJ,CAAc,EACpCI,EAAQ,KAAO,GACfA,EAAQ,uBAAuB,EAMxB,SAASE,EAAIC,EAAiB,CAC7B,KAAA,CAAE,SAAAC,GAAaD,EAGf,CAACE,EAAQC,CAAS,EAAIC,EAAAA,SAA6DT,CAAO,EAC1F,CAACU,EAAUC,CAAW,EAAIF,EAAAA,SAAqC,IAAI,EACnE,CAACG,EAA6BC,CAA8B,EAAIJ,EAAAA,SAAS,EAAK,EAC9EK,EAAsBjC,EAAI,gBAAgB,EAC1C,CAACkC,EAAcC,CAAe,EAAIP,EAAAA,SAAmCK,CAAmB,EAE9FG,OAAAA,EAAAA,UAAU,IAAM,CACR,MAAAC,EAAgBC,GAAyB,CACzCA,EAAM,OAAS,QAEfX,EADED,IAAWP,EACHE,EAEAF,CAFO,CAKvB,EACO,cAAA,iBAAiB,UAAWkB,CAAY,EACxC,IAAM,CACJ,OAAA,oBAAoB,UAAWA,CAAY,CACpD,CAAA,EACC,CAACX,CAAM,CAAC,EAGTa,EAAA,KAACC,EAAA,CACC,OAAAd,EACA,MAAAZ,EACA,QAAS,OACT,GAAK2B,GAAiB,CACpB,MAAMC,EACJb,GACA,IAAIc,EAAoB,CACtB,GAAGF,EACH,GAAG5B,CAAA,CACJ,EACF,OAAAgB,GAAYC,EAAY,IAAMY,CAAS,EACjCA,CACT,EACA,UAAW,SAEX,SAAA,CAAAE,EAAA,IAACC,EAAA,CACC,gBAAkD,cAClD,aAAApC,EACA,cAAe,GACf,WAAY,GACZ,qBAAsB,GACtB,4BAA6BuB,EAC7B,qBAAsBG,CAAA,CACxB,EAKCN,GACCe,EAAA,IAAC,gBAAA,CACC,KAAM,CAAClB,EAAQG,EAAS,UAAU,EAClC,QAAS,CAACE,GAAwDG,IAAiB,UACnF,cAAe,EAAA,CACjB,EAEDT,CAAA,CAAA,CACH,CAEJ,CAIAqB,EAAA,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,OAEtDF,EAAA,IAAAG,EAAA,WAAA,CACC,SAACH,EAAAA,IAAArB,EAAA,CAEC,eAACyB,EAAmB,CAAA,YAAA5C,CAAA,CAA0B,CAChD,CAAA,CAAA,CACF,CAOJ"}