{"version":3,"file":"MaterialTest-CYhTve-U.js","sources":["../../demo/scenarios/MaterialTest.tsx"],"sourcesContent":["import * as THREE from 'three';\nimport { useEffect, useRef, memo, useState, ReactNode } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { useStats } from 'lib/hooks';\nimport { api } from 'src';\nimport { CustomControl } from 'src/components/CustomControl/CustomControl';\n\nconst cubeRenderTarget = new THREE.WebGLCubeRenderTarget(1024);\nconst cubeCamera = new THREE.CubeCamera(0.1, 1000, cubeRenderTarget);\nconst mirrorMaterial = new THREE.MeshStandardMaterial({\n  envMap: cubeRenderTarget.texture,\n  metalness: 1,\n  roughness: 0\n});\ncubeCamera.position.set(0, -20, 0);\n\nconst platformDefaultMaterial = new THREE.MeshStandardMaterial({\n  color: new THREE.Color().setHSL(0.32, 0.6, 0.08),\n  side: THREE.DoubleSide\n});\n\nconst materialTypes = [\n  'MeshBasicMaterial',\n  'MeshStandardMaterial',\n  'MeshLambertMaterial',\n  'MeshPhongMaterial',\n  'MeshPhysicalMaterial',\n  'MeshToonMaterial',\n  'MeshMatcapMaterial',\n  'MeshNormalMaterial'\n];\n\ntype MeshType = 'cube' | 'sphere' | 'plane';\nconst meshTypes: MeshType[] = ['cube', 'sphere', 'plane'];\n\nconst materialOptions = materialTypes.reduce(\n  (acc, mat) => {\n    acc[mat] = mat;\n    return acc;\n  },\n  {} as Record<string, string>\n);\n\nconst meshOptions = meshTypes.reduce(\n  (acc, mat) => {\n    acc[mat] = mat;\n    return acc;\n  },\n  {} as Record<string, string>\n);\n\ntype SceneBackgroundName = 'None' | 'SpruitSunrise' | 'MilkyWay' | 'Park3Med' | 'SkyboxSun' | 'Pisa';\nconst sceneBackgroundNames: SceneBackgroundName[] = [\n  'None',\n  'SpruitSunrise',\n  'MilkyWay',\n  'MilkyWay',\n  'Park3Med',\n  'SkyboxSun',\n  'Pisa'\n];\n\nconst sceneBackgroundOptions = sceneBackgroundNames.reduce(\n  (acc, name) => {\n    acc[name] = name;\n    return acc;\n  },\n  {} as Record<string, string>\n);\n\nconst minTessellation = 1;\nconst maxTessellation = 300;\n\nexport const MaterialTest = memo(function MaterialTest() {\n  const { scene, camera } = useThree();\n  useStats();\n  useFrame(() => {\n    api.updateCubeCamera(cubeCamera);\n  });\n\n  const materialsRef = useRef<Record<string, THREE.Material>>({});\n  const sceneBackgroundsRef = useRef<Record<string, THREE.Texture>>({});\n  const [sceneBackgroundName, setSceneBackgroundName] = useState<SceneBackgroundName>('None');\n\n  const [showPlatform, setShowPlatform] = useState<boolean>(true);\n  const [platformMaterial, setPlatformMaterial] = useState<'default' | 'mirror'>('default');\n  const [currentMaterial, setCurrentMaterial] = useState<THREE.Material | null>(null);\n  const [currentMeshType, setCurrentMeshType] = useState<MeshType>(meshTypes[1]);\n  const [tessellation, setTessellation] = useState<number>(80);\n  const showGizmosRef = useRef(true);\n\n  const customPropsRef = useRef({\n    currentMaterialType: materialTypes[1],\n    currentMeshType,\n    tessellation,\n    showPlatform,\n    platformMaterial,\n    sceneBackgroundName: sceneBackgroundNames[0]\n  });\n\n  const initialized = !!currentMaterial;\n\n  // initialize cameras\n  useEffect(() => {\n    camera.position.set(0, 0, 22);\n    camera.rotation.set(0, 0, 0);\n    if (camera instanceof THREE.OrthographicCamera) {\n      camera.zoom = 30;\n    }\n  }, [camera]);\n\n  // initialize scene and load scene background textures\n  useEffect(() => {\n    scene.add(cubeCamera);\n\n    scene.background = new THREE.Color().setHex(0x000000);\n    scene.environment = null;\n\n    (async () => {\n      const texturesSpruitSunrise = await api.createTexturesFromImages(\n        'textures/background/equirectangular/spruit_sunrise_4k.hdr.jpg',\n        {}\n      );\n      const texturesMilkyWay = await api.createTexturesFromImages(\n        ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/MilkyWay/dark-s_${t}.jpg`),\n        {}\n      );\n      const texturesPark3Med = await api.createTexturesFromImages(\n        ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/Park3Med/${t}.jpg`),\n        {}\n      );\n      const texturesSkyboxSun = await api.createTexturesFromImages(\n        ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/skyboxsun25deg/${t}.jpg`),\n        {}\n      );\n      const texturesPisa = await api.createTexturesFromImages(\n        ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/pisa/${t}.png`),\n        {}\n      );\n\n      const [SpruitSunrise, MilkyWay, Park3Med, SkyboxSun, Pisa] = [\n        texturesSpruitSunrise,\n        texturesMilkyWay,\n        texturesPark3Med,\n        texturesSkyboxSun,\n        texturesPisa\n      ].map((textures) => {\n        const texture = textures[0];\n        texture.mapping =\n          texture instanceof THREE.CubeTexture\n            ? THREE.CubeReflectionMapping // THREE.CubeReflectionMapping, THREE.CubeRefractionMapping\n            : texture.image.width / texture.image.height === 2\n              ? THREE.EquirectangularReflectionMapping\n              : THREE.UVMapping;\n        texture.needsUpdate = true;\n        return texture;\n      });\n\n      sceneBackgroundsRef.current = {\n        SpruitSunrise,\n        MilkyWay,\n        Park3Med,\n        SkyboxSun,\n        Pisa\n      };\n    })();\n\n    api.setShowAxesHelper(false);\n    api.setShowGridHelper(false);\n    api.setShowGizmos(showGizmosRef.current);\n    return () => {\n      scene.background = new THREE.Color().setHex(0x000000);\n      scene.environment = null;\n    };\n  }, [scene]);\n\n  // update scene background based on selected option\n  useEffect(() => {\n    if (!sceneBackgroundName) return;\n    if (sceneBackgroundsRef.current[sceneBackgroundName]) {\n      scene.background = sceneBackgroundsRef.current[sceneBackgroundName];\n      scene.environment = sceneBackgroundsRef.current[sceneBackgroundName];\n      if (sceneBackgroundName === 'SpruitSunrise') {\n        platformDefaultMaterial.color = new THREE.Color().setHSL(0.13, 0.61, 0.08);\n      } else if (sceneBackgroundName === 'MilkyWay') {\n        platformDefaultMaterial.color = new THREE.Color().setHSL(0.64, 0.61, 0.08);\n      } else {\n        platformDefaultMaterial.color = new THREE.Color().setHSL(0.0, 0.0, 0.07);\n      }\n    } else {\n      scene.background = new THREE.Color().setHex(0x000000);\n      scene.environment = null;\n      platformDefaultMaterial.color = new THREE.Color().setHSL(0.0, 0.0, 0.07);\n    }\n  }, [scene, sceneBackgroundName]);\n\n  // set current material on test object\n  useEffect(() => {\n    (async () => {\n      const [map, displacementMap, normalMap, roughnessMap, aoMap] = await api.createTexturesFromImages(\n        [\n          'Rocks005_1K-JPG_Color',\n          'Rocks005_1K-JPG_Displacement',\n          'Rocks005_1K-JPG_NormalGL',\n          'Rocks005_1K-JPG_Roughness',\n          'Rocks005_1K-JPG_AmbientOcclusion'\n        ].map((t) => `textures/ambientcg/Rocks005/${t}.jpg`),\n        {}\n      );\n      const maps = {\n        map,\n        displacementMap,\n        normalMap,\n        roughnessMap,\n        aoMap\n      };\n      materialTypes.forEach((type) => {\n        if (!materialsRef.current[type]) {\n          materialsRef.current[type] = api.getMaterialFromType(type, {});\n          Object.keys(maps).forEach((prop) => {\n            if (Object.hasOwn(materialsRef.current[type], prop)) {\n              // @ts-ignore\n              materialsRef.current[type][prop] = maps[prop];\n              if (prop === 'displacementMap') {\n                (materialsRef.current[type] as THREE.MeshStandardMaterial).displacementScale = 1;\n              } else if (prop === 'aoMap') {\n                (materialsRef.current[type] as THREE.MeshStandardMaterial).aoMapIntensity = 1;\n              } else if (prop === 'roughnessMap') {\n                (materialsRef.current[type] as THREE.MeshStandardMaterial).roughness = 1;\n              }\n            }\n          });\n          materialsRef.current[type].needsUpdate = true;\n        }\n      });\n      setCurrentMaterial(materialsRef.current[customPropsRef.current.currentMaterialType]);\n    })();\n  }, []);\n\n  useEffect(() => {\n    // because R3F adds geometry asynchronously, after internal setup\n    api.updateSceneBBox();\n  }, [initialized]);\n\n  if (!initialized) return null;\n\n  const cube = (\n    <mesh material={currentMaterial} castShadow receiveShadow __inspectorData={{ isInspectable: true }} name=\"cube\">\n      <boxGeometry args={[10, 10, 10, tessellation, tessellation, tessellation]} />\n    </mesh>\n  );\n\n  const sphere = (\n    <mesh material={currentMaterial} castShadow receiveShadow __inspectorData={{ isInspectable: true }} name=\"sphere\">\n      <sphereGeometry args={[10, tessellation, tessellation]} />\n    </mesh>\n  );\n\n  const plane = (\n    <mesh material={currentMaterial} castShadow receiveShadow __inspectorData={{ isInspectable: true }} name=\"plane\">\n      <planeGeometry args={[10, 10, tessellation, tessellation]} />\n    </mesh>\n  );\n\n  const meshes: Record<MeshType, ReactNode> = {\n    cube,\n    sphere,\n    plane\n  };\n\n  return (\n    <>\n      <directionalLight\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-radius={4}\n        shadow-camera-right={15}\n        shadow-camera-left={-15}\n        shadow-camera-top={15}\n        shadow-camera-bottom={-15}\n        shadow-blurSamples={8}\n        shadow-bias={-0.0014}\n        castShadow\n        position={[-20, 20, 20]}\n        scale={1}\n        intensity={4.5}\n        color={'white'}\n      />\n\n      <spotLight\n        castShadow\n        position={[20, 20, 20]}\n        scale={1}\n        intensity={6}\n        power={20}\n        distance={70}\n        color={'white'}\n        angle={Math.PI / 8}\n        penumbra={0.5}\n        decay={0.4}\n      />\n\n      <ambientLight color={'#ffffff'} intensity={0.1} position={[0, 20, 0]} />\n\n      {meshes[currentMeshType]}\n\n      <mesh\n        name=\"platform\"\n        rotation={[-1.571, 0, 0]}\n        position={[0, -20, 0]}\n        receiveShadow\n        material={platformMaterial === 'default' ? platformDefaultMaterial : mirrorMaterial}\n        visible={showPlatform}\n        __inspectorData={{ isInspectable: true }}\n      >\n        <boxGeometry args={[100, 100, 5]} />\n      </mesh>\n\n      <CustomControl\n        name={'material'}\n        object={customPropsRef.current}\n        prop={'currentMaterialType'}\n        control={{\n          label: 'Current Material',\n          options: materialOptions,\n          onChange: (materialType) => {\n            setCurrentMaterial(materialsRef.current[materialType]);\n            api.refreshCPanel();\n          }\n        }}\n      />\n      <CustomControl\n        name={'mesh'}\n        object={customPropsRef.current}\n        prop={'currentMeshType'}\n        control={{\n          label: 'Current Mesh',\n          options: meshOptions,\n          onChange: (meshType) => {\n            setCurrentMeshType(meshType);\n          }\n        }}\n      />\n      <CustomControl\n        name={'tessellation'}\n        object={customPropsRef.current}\n        prop={'tessellation'}\n        control={{\n          label: 'Tessellation',\n          min: minTessellation,\n          max: maxTessellation,\n          step: 1,\n          onChange: (tessellation) => {\n            setTessellation(tessellation);\n          }\n        }}\n      />\n      {Object.hasOwn(currentMaterial, 'wireframe') && (\n        <CustomControl\n          key={currentMaterial.uuid}\n          name={'wireframe'}\n          object={currentMaterial}\n          prop={'wireframe'}\n          control={{\n            label: 'Wireframe'\n          }}\n        />\n      )}\n      <CustomControl\n        name={'showPlatform'}\n        object={customPropsRef.current}\n        prop={'showPlatform'}\n        control={{\n          label: 'Show Platform',\n          onChange: setShowPlatform\n        }}\n      />\n      <CustomControl\n        name={'platformMaterial'}\n        object={customPropsRef.current}\n        prop={'platformMaterial'}\n        control={{\n          label: 'Platform Material',\n          options: {\n            default: 'default',\n            mirror: 'mirror'\n          },\n          onChange: setPlatformMaterial\n        }}\n      />\n      <CustomControl\n        name={'sceneBackgroundName'}\n        object={customPropsRef.current}\n        prop={'sceneBackgroundName'}\n        control={{\n          label: 'Scene Background',\n          options: sceneBackgroundOptions,\n          onChange: setSceneBackgroundName\n        }}\n      />\n      <CustomControl\n        name={'showGizmos'}\n        control={{\n          label: 'Toggle Gizmos',\n          title: 'Toggle Gizmos',\n          onClick: () => {\n            api.setShowGizmos(!showGizmosRef.current);\n            showGizmosRef.current = !showGizmosRef.current;\n          }\n        }}\n      />\n    </>\n  );\n});\n\nexport default MaterialTest;\n"],"names":["cubeRenderTarget","THREE.WebGLCubeRenderTarget","cubeCamera","THREE.CubeCamera","mirrorMaterial","THREE.MeshStandardMaterial","platformDefaultMaterial","THREE.Color","THREE.DoubleSide","materialTypes","meshTypes","materialOptions","acc","mat","meshOptions","sceneBackgroundNames","sceneBackgroundOptions","name","minTessellation","maxTessellation","MaterialTest","memo","scene","camera","useThree","useStats","useFrame","api","materialsRef","useRef","sceneBackgroundsRef","sceneBackgroundName","setSceneBackgroundName","useState","showPlatform","setShowPlatform","platformMaterial","setPlatformMaterial","currentMaterial","setCurrentMaterial","currentMeshType","setCurrentMeshType","tessellation","setTessellation","showGizmosRef","customPropsRef","initialized","useEffect","THREE.OrthographicCamera","texturesSpruitSunrise","texturesMilkyWay","t","texturesPark3Med","texturesSkyboxSun","texturesPisa","SpruitSunrise","MilkyWay","Park3Med","SkyboxSun","Pisa","textures","texture","THREE.CubeTexture","THREE.CubeReflectionMapping","THREE.EquirectangularReflectionMapping","THREE.UVMapping","map","displacementMap","normalMap","roughnessMap","aoMap","maps","type","prop","meshes","jsx","jsxs","Fragment","CustomControl","materialType","meshType"],"mappings":"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"}