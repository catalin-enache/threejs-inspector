{"version":3,"file":"inspector-CG13i2tW.js","sources":["../../src/lib/inspector.tsx"],"sourcesContent":["import * as THREE from 'three';\nimport { ReactNode, memo, useMemo, createElement, useEffect, useRef } from 'react';\n// import { useState, useEffect } from 'react';\nimport {\n  extend,\n  createRoot,\n  events,\n  ReconcilerRoot,\n  useFrame,\n  RenderCallback,\n  useThree,\n  RootState\n} from '@react-three/fiber';\nimport { SetUp, SetUpProps, SETUP_EFFECT } from 'components/SetUp/SetUp'; // patching Object3D\nimport { CPanel, type CPanelProps } from 'components/CPanel/CPanel';\nimport { CustomControl } from 'components/CustomControl/CustomControl';\nimport { CustomParams, isCustomParamStruct } from 'lib/customParam.types';\n// KeyListener depends on CPanel (sideEffect) to add in DOM CPanel elements to listen to\nimport { KeyListener } from 'components/KeyListener';\nimport { type AppStore, useAppStore } from 'src/store';\nimport { usePlay } from 'lib/hooks';\n// import { getCPanel } from 'lib/utils/lazyLoaders';\nextend(THREE as any);\n\n// singleton\nlet root: ReconcilerRoot<HTMLCanvasElement> | null;\nlet version = 0;\n\ntype buildCustomParamsElementsParams = {\n  customParams: CustomParams;\n  pathArray?: string[];\n};\n\nexport interface BaseInspectorProps {\n  autoNavControls?: AppStore['autoNavControls'];\n  customParams?: CustomParams;\n  showInspector?: boolean;\n  showGizmos?: boolean;\n  useTransformControls?: boolean;\n  onRender?: RenderCallback;\n  onPlay?: Parameters<typeof usePlay>[0];\n  onTransformControlsDragging?: (isDragging: boolean) => void;\n  onPlayingStateChange?: (playingState: AppStore['playingState']) => void;\n  r3fThreeGetSet?: ({\n    r3fThreeGet,\n    r3fThreeSet\n  }: {\n    r3fThreeGet: RootState['get'];\n    r3fThreeSet: RootState['set'];\n  }) => void;\n  // for testing\n  onSetupEffect?: SetUpProps['onSetupEffect'];\n  onThreeChange?: SetUpProps['onThreeChange'];\n  onCPanelReady?: CPanelProps['onCPanelReady'];\n  onCPanelUnmounted?: CPanelProps['onCPanelUnmounted'];\n}\n\nexport const buildCustomParamsElements = ({\n  customParams,\n  pathArray = []\n}: buildCustomParamsElementsParams): ReactNode => {\n  return Object.keys(customParams)\n    .map((controlName) => {\n      if (isCustomParamStruct(customParams[controlName])) {\n        const { object, prop, control } = customParams[controlName];\n        return (\n          <CustomControl\n            key={controlName}\n            name={controlName}\n            object={object}\n            prop={prop}\n            path={pathArray.join('/')}\n            control={control}\n          />\n        );\n      } else {\n        return buildCustomParamsElements({\n          customParams: customParams[controlName],\n          pathArray: [...pathArray, controlName]\n        });\n      }\n    })\n    .flat(Infinity)\n    .filter(Boolean);\n};\n\nexport interface InspectorProps extends BaseInspectorProps {\n  version?: number;\n}\n\nexport const Inspector = memo(\n  ({\n    autoNavControls = 'never',\n    customParams,\n    showInspector = true,\n    showGizmos = true,\n    useTransformControls = true,\n    onRender = () => {},\n    onPlay = () => {},\n    onTransformControlsDragging = () => {},\n    onPlayingStateChange = () => {},\n    r3fThreeGetSet,\n    onSetupEffect,\n    onThreeChange,\n    onCPanelReady,\n    onCPanelUnmounted,\n    version = 0\n  }: InspectorProps) => {\n    useFrame(onRender);\n    usePlay(onPlay);\n    const r3fThreeGet = useThree((state) => state.get);\n    const r3fThreeSet = useThree((state) => state.set);\n\n    const playingState = useAppStore((state) => state.playingState);\n    const onPlayingStateChangeRef = useRef(onPlayingStateChange);\n    onPlayingStateChangeRef.current = onPlayingStateChange;\n\n    const isDraggingTransformControls = useAppStore((state) => state.isDraggingTransformControls);\n    const onTransformControlsDraggingRef = useRef(onTransformControlsDragging);\n    onTransformControlsDraggingRef.current = onTransformControlsDragging;\n\n    const customParamsElements = useMemo(() => {\n      !customParams && onSetupEffect?.(SETUP_EFFECT.VERSION_CHANGED, { version, customParamsElements: null });\n      if (!customParams) return null;\n      const customParamsElements = buildCustomParamsElements({ customParams });\n      onSetupEffect?.(SETUP_EFFECT.VERSION_CHANGED, { version, customParamsElements });\n      return customParamsElements;\n      // updateInspector is called with the same customParams object reference\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- version is needed because customParams are mutated\n    }, [customParams, version]);\n\n    // const [CPanelComponent, setCPanelComponent] = useState<typeof import('components/CPanel/CPanel').CPanel | null>(\n    //   null\n    // );\n    //\n    // const isMountedRef = useRef(false);\n    // useEffect(() => {\n    //   isMountedRef.current = true;\n    //   return () => {\n    //     isMountedRef.current = false;\n    //     // onCPanelUnmounted?.();\n    //   };\n    // }, [onCPanelUnmounted]);\n    //\n    // useEffect(() => {\n    //   if (CPanelComponent || !isMountedRef.current) {\n    //     return;\n    //   }\n    //   getCPanel().then((CPanel) => {\n    //     setCPanelComponent(() => CPanel);\n    //   });\n    // }, [CPanelComponent]);\n\n    // return (\n    //   <>\n    //     <SetUp\n    //       isInjected={true}\n    //       autoNavControls={autoNavControls}\n    //       onSetupEffect={onSetupEffect}\n    //       onThreeChange={onThreeChange}\n    //     />\n    //     {CPanelComponent && <CPanelComponent onCPanelReady={onCPanelReady} onCPanelUnmounted={onCPanelUnmounted} />}\n    //     {CPanelComponent && <KeyListener />}\n    //     {customParamsElements}\n    //   </>\n    // );\n\n    useEffect(() => {\n      r3fThreeGetSet?.({ r3fThreeGet, r3fThreeSet });\n    }, [r3fThreeGetSet, r3fThreeGet, r3fThreeSet]);\n\n    useEffect(() => {\n      useAppStore.getState().setShowGizmos(showGizmos);\n    }, [showGizmos]);\n\n    useEffect(() => {\n      useAppStore.getState().setUseTransformControls(useTransformControls);\n    }, [useTransformControls]);\n\n    useEffect(() => {\n      onTransformControlsDraggingRef.current(isDraggingTransformControls);\n    }, [isDraggingTransformControls]);\n\n    useEffect(() => {\n      onPlayingStateChangeRef.current(playingState);\n    }, [playingState, onPlayingStateChangeRef]);\n\n    return (\n      <>\n        <SetUp\n          isInjected={true}\n          autoNavControls={autoNavControls}\n          onSetupEffect={onSetupEffect}\n          onThreeChange={onThreeChange}\n        />\n        {showInspector && <CPanel onCPanelReady={onCPanelReady} onCPanelUnmounted={onCPanelUnmounted} />}\n        <KeyListener />\n        {customParamsElements}\n      </>\n    );\n  }\n);\n\nexport interface InjectInspectorParams extends BaseInspectorProps {\n  renderer: THREE.WebGLRenderer;\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera | THREE.OrthographicCamera;\n  frameloop?: RootState['frameloop'];\n}\n\nconst configureAndRender = (params: InjectInspectorParams) => {\n  const {\n    renderer,\n    scene,\n    camera,\n    frameloop,\n    autoNavControls,\n    customParams,\n    showInspector,\n    showGizmos,\n    useTransformControls,\n    onRender,\n    onPlay,\n    onTransformControlsDragging,\n    onPlayingStateChange,\n    r3fThreeGetSet,\n    onSetupEffect,\n    onThreeChange,\n    onCPanelReady,\n    onCPanelUnmounted\n  } = params;\n  /*\n  similar to:\n  <canvas camera scene gl frameloop ...>\n    <Inspector />\n  </canvas>\n  */\n  root?.configure({\n    events,\n    camera,\n    scene,\n    gl: renderer,\n    frameloop\n  });\n\n  root?.render(\n    createElement(Inspector, {\n      autoNavControls,\n      customParams,\n      version: ++version,\n      showInspector,\n      showGizmos,\n      useTransformControls,\n      onTransformControlsDragging,\n      onPlayingStateChange,\n      // for testing\n      onSetupEffect,\n      onThreeChange,\n      onCPanelReady,\n      onCPanelUnmounted,\n      onRender,\n      onPlay,\n      r3fThreeGetSet\n    })\n  );\n};\n\nexport const injectInspector = (params: InjectInspectorParams) => {\n  const canvasElement = params.renderer.domElement;\n\n  root = root || createRoot(canvasElement);\n  configureAndRender(params);\n\n  return {\n    unmountInspector() {\n      version = 0;\n      root?.unmount();\n      root = null;\n    },\n    // updateInspector can be called multiple times with different options except scene which can only be set once\n    updateInspector(updateParams: Partial<InjectInspectorParams> = {}) {\n      configureAndRender({ ...params, ...updateParams });\n    }\n  };\n};\n"],"names":["extend","THREE","root","version","buildCustomParamsElements","customParams","pathArray","controlName","isCustomParamStruct","object","prop","control","jsx","CustomControl","Inspector","memo","autoNavControls","showInspector","showGizmos","useTransformControls","onRender","onPlay","onTransformControlsDragging","onPlayingStateChange","r3fThreeGetSet","onSetupEffect","onThreeChange","onCPanelReady","onCPanelUnmounted","useFrame","usePlay","r3fThreeGet","useThree","state","r3fThreeSet","playingState","useAppStore","onPlayingStateChangeRef","useRef","isDraggingTransformControls","onTransformControlsDraggingRef","customParamsElements","useMemo","SETUP_EFFECT","useEffect","jsxs","Fragment","SetUp","CPanel","KeyListener","configureAndRender","params","renderer","scene","camera","frameloop","events","createElement","injectInspector","canvasElement","createRoot","updateParams"],"mappings":"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"}