{"version":3,"file":"CustomControl-mprxE-mL.js","sources":["../../src/lib/hooks/usePlay.tsx","../../src/components/CustomControl/CustomControl.ts"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport { RootState, useFrame } from '@react-three/fiber';\nimport { type AppStore, useAppStore } from 'src/store';\n// import { getCPanel } from 'lib/utils/lazyLoaders';\n\nlet lastState: RootState;\nlet lastXFrame: XRFrame | undefined;\nconst noop = (_playingState: AppStore['playingState'], _state: RootState, _delta: number, _xrFrame?: XRFrame) => {\n  lastState = _state;\n  lastXFrame = _xrFrame;\n};\n\n/**\n * usePlay hook allows to run a callback on every frame when the app is in 'playing' state.\n * It also provides the current playing state, which can be 'playing', 'paused', or 'stopped'.\n * The state can be set using the api.setPlayingState and read from api.getPlayingState.\n * api.registerDefaultPlayTriggers (space & backspace) is also provided for convenience.\n */\nexport const usePlay = (\n  callback: (playingState: AppStore['playingState'], state: RootState, delta: number, xrFrame?: XRFrame) => void,\n  renderPriority = 0,\n  deps: any[] = []\n) => {\n  const playingState = useAppStore((state) => state.playingState);\n\n  const depsRef = useRef(deps);\n  const callbackRef = useRef(callback);\n  const playingStateRef = useRef(playingState);\n\n  // if deps changed update callback\n  for (let i = 0; i < deps.length; i++) {\n    if (deps[i] !== depsRef.current[i]) {\n      callbackRef.current = callback;\n      break;\n    }\n  }\n\n  const playingStateChanged = playingState !== playingStateRef.current;\n\n  depsRef.current = deps;\n  playingStateRef.current = playingState;\n\n  const boundCallback = useMemo(\n    () => callbackRef.current.bind(null, playingState),\n    [callbackRef.current, playingState]\n  );\n  const boundNoop = useMemo(() => noop.bind(null, playingState), [playingState]);\n\n  if (playingStateChanged && ['paused', 'stopped'].includes(playingState) && lastState) {\n    boundCallback(lastState, 0, lastXFrame);\n  }\n\n  useFrame(playingState === 'playing' ? boundCallback : boundNoop, renderPriority);\n\n  // const boundCallbackRef = useRef(boundCallback);\n  // const boundNoopRef = useRef(boundNoop);\n  // const _cbRef = useRef((_state: RootState, _delta: number, _xrFrame?: _XRFrame) => {\n  //   playingStateRef.current === 'playing'\n  //     ? boundCallbackRef.current(_state, _delta, _xrFrame)\n  //     : boundNoopRef.current(_state, _delta, _xrFrame);\n  // });\n\n  // useFrame(_cbRef.current, renderPriority);\n};\n","import type { BindingParams } from 'tweakpane';\nimport { useAppStore } from 'src/store';\nimport { useEffect } from 'react';\n\nconst noop = () => {};\n\nexport interface CustomControlProps {\n  name: string;\n  object?: Record<string, any>;\n  prop?: string;\n  control: BindingParams & { onChange?: (...value: any) => void; onClick?: (...value: any) => void };\n  path?: string;\n}\n\n// This component does not react on prop changes, it just sets up the custom control in the store\nexport const CustomControl = (props: CustomControlProps) => {\n  useEffect(() => {\n    const { name, prop, control, path = '', object } = props;\n    const pathArray = path\n      .split('/')\n      .map((p) => p.trim())\n      .filter((p) => p.length > 0);\n    const setOrUpdateCPanelCustomParams = useAppStore.getState().setOrUpdateCPanelCustomParams;\n    const removeCPanelCustomParams = useAppStore.getState().removeCPanelCustomParams;\n\n    if (control.onChange === undefined && control.onClick === undefined) {\n      control.onChange = noop; // makes it a change control by default\n    }\n\n    setOrUpdateCPanelCustomParams(name, object, prop, control, pathArray);\n\n    return () => {\n      removeCPanelCustomParams(name, pathArray);\n    };\n  }, []);\n\n  return null;\n};\n"],"names":["lastState","lastXFrame","noop","_playingState","_state","_delta","_xrFrame","usePlay","callback","renderPriority","deps","playingState","useAppStore","state","depsRef","useRef","callbackRef","playingStateRef","i","playingStateChanged","boundCallback","useMemo","boundNoop","useFrame","CustomControl","props","useEffect","name","prop","control","path","object","pathArray","p","setOrUpdateCPanelCustomParams","removeCPanelCustomParams"],"mappings":"yDAKA,IAAIA,EACAC,EACJ,MAAMC,EAAO,CAACC,EAAyCC,EAAmBC,EAAgBC,IAAuB,CACnGN,EAAAI,EACCH,EAAAK,CACf,EAQaC,EAAU,CACrBC,EACAC,EAAiB,EACjBC,EAAc,CAAA,IACX,CACH,MAAMC,EAAeC,EAAaC,GAAUA,EAAM,YAAY,EAExDC,EAAUC,SAAOL,CAAI,EACrBM,EAAcD,SAAOP,CAAQ,EAC7BS,EAAkBF,SAAOJ,CAAY,EAG3C,QAASO,EAAI,EAAGA,EAAIR,EAAK,OAAQQ,IAC/B,GAAIR,EAAKQ,CAAC,IAAMJ,EAAQ,QAAQI,CAAC,EAAG,CAClCF,EAAY,QAAUR,EACtB,KAAA,CAIE,MAAAW,EAAsBR,IAAiBM,EAAgB,QAE7DH,EAAQ,QAAUJ,EAClBO,EAAgB,QAAUN,EAE1B,MAAMS,EAAgBC,EAAA,QACpB,IAAML,EAAY,QAAQ,KAAK,KAAML,CAAY,EACjD,CAACK,EAAY,QAASL,CAAY,CACpC,EACMW,EAAYD,UAAQ,IAAMnB,EAAK,KAAK,KAAMS,CAAY,EAAG,CAACA,CAAY,CAAC,EAEzEQ,GAAuB,CAAC,SAAU,SAAS,EAAE,SAASR,CAAY,GAAKX,GAC3DoB,EAAApB,EAAW,EAAGC,CAAU,EAGxCsB,EAASZ,IAAiB,UAAYS,EAAgBE,EAAWb,CAAc,CAWjF,EC3DMP,EAAO,IAAM,CAAC,EAWPsB,EAAiBC,IAC5BC,EAAAA,UAAU,IAAM,CACd,KAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,QAAAC,EAAS,KAAAC,EAAO,GAAI,OAAAC,GAAWN,EAC7CO,EAAYF,EACf,MAAM,GAAG,EACT,IAAKG,GAAMA,EAAE,KAAA,CAAM,EACnB,OAAQA,GAAMA,EAAE,OAAS,CAAC,EACvBC,EAAgCtB,EAAY,SAAA,EAAW,8BACvDuB,EAA2BvB,EAAY,SAAA,EAAW,yBAExD,OAAIiB,EAAQ,WAAa,QAAaA,EAAQ,UAAY,SACxDA,EAAQ,SAAW3B,GAGrBgC,EAA8BP,EAAMI,EAAQH,EAAMC,EAASG,CAAS,EAE7D,IAAM,CACXG,EAAyBR,EAAMK,CAAS,CAC1C,CACF,EAAG,EAAE,EAEE"}