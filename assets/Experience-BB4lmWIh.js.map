{"version":3,"file":"Experience-BB4lmWIh.js","sources":["../../demo/scenarios/stuff/TestIndexedCube3Materials.ts","../../node_modules/three/examples/jsm/lights/LightProbeGenerator.js","../../demo/scenarios/Experience.tsx"],"sourcesContent":["import * as THREE from 'three';\n\nexport const TestIndexedCube3Materials = () => {\n  const geometry = new THREE.BufferGeometry();\n\n  // prettier-ignore\n  const vertices = new Float32Array([\n    -1.0, -1.0,  1.0,  // 0\n    1.0, -1.0,  1.0,  // 1\n    1.0,  1.0,  1.0,  // 2\n    -1.0,  1.0,  1.0,  // 3\n    -1.0, -1.0, -1.0,  // 4\n    1.0, -1.0, -1.0,  // 5\n    1.0,  1.0, -1.0,  // 6\n    -1.0,  1.0, -1.0   // 7\n  ]);\n\n  // Add the vertices to the geometry\n  geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  // prettier-ignore\n  const indices = new Uint16Array([\n    0, 1, 2, 2, 3, 0,  // Front face\n    1, 5, 6, 6, 2, 1,  // Right face\n    4, 0, 3, 3, 7, 4,  // Left face\n    4, 5, 1, 1, 0, 4,  // Bottom face\n    3, 2, 6, 6, 7, 3,  // Top face\n    5, 4, 7, 7, 6, 5   // Back face\n  ]);\n\n  // Set the index buffer for the geometry\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n\n  const materials = [\n    new THREE.MeshBasicMaterial({ color: 0xff0000 }), // Red\n    new THREE.MeshBasicMaterial({ color: 0x00ff00 }), // Green\n    new THREE.MeshBasicMaterial({ color: 0x0000ff }) // Blue\n  ];\n\n  // Assign groups to different materials\n  geometry.addGroup(0, 6, 0);\n  geometry.addGroup(6, 6, 1);\n  geometry.addGroup(12, 6, 2);\n  geometry.addGroup(18, 6, 0);\n  geometry.addGroup(24, 6, 1);\n  geometry.addGroup(30, 6, 2);\n\n  const cube = new THREE.Mesh(geometry, materials);\n  cube.name = 'IndexedCube3Materials';\n\n  const group = new THREE.Group();\n  group.__inspectorData.isInspectable = true;\n  group.name = 'IndexedCube3Materials group';\n  group.add(cube);\n  const pointLight = new THREE.PointLight(0xffffff, 1);\n  pointLight.name = 'IndexedCube3Materials pointLight';\n  cube.add(pointLight);\n  return group;\n};\n","import {\n\tColor,\n\tLightProbe,\n\tLinearSRGBColorSpace,\n\tSphericalHarmonics3,\n\tVector3,\n\tSRGBColorSpace,\n\tNoColorSpace,\n\tHalfFloatType,\n\tDataUtils,\n\tWebGLCoordinateSystem\n} from 'three';\n\n/**\n * Utility class for creating instances of {@link LightProbe}.\n *\n * @hideconstructor\n */\nclass LightProbeGenerator {\n\n\t/**\n\t * Creates a light probe from the given (radiance) environment map.\n\t * The method expects that the environment map is represented as a cube texture.\n\t *\n\t * @param {CubeTexture} cubeTexture - The environment map.\n\t * @return {LightProbe} The created light probe.\n\t */\n\tstatic fromCubeTexture( cubeTexture ) {\n\n\t\t// https://www.ppsloan.org/publications/StupidSH36.pdf\n\n\t\tlet totalWeight = 0;\n\n\t\tconst coord = new Vector3();\n\n\t\tconst dir = new Vector3();\n\n\t\tconst color = new Color();\n\n\t\tconst shBasis = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n\n\t\tconst sh = new SphericalHarmonics3();\n\t\tconst shCoefficients = sh.coefficients;\n\n\t\tfor ( let faceIndex = 0; faceIndex < 6; faceIndex ++ ) {\n\n\t\t\tconst image = cubeTexture.image[ faceIndex ];\n\n\t\t\tconst width = image.width;\n\t\t\tconst height = image.height;\n\n\t\t\tconst canvas = document.createElement( 'canvas' );\n\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\n\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, width, height );\n\n\t\t\tconst data = imageData.data;\n\n\t\t\tconst imageWidth = imageData.width; // assumed to be square\n\n\t\t\tconst pixelSize = 2 / imageWidth;\n\n\t\t\tfor ( let i = 0, il = data.length; i < il; i += 4 ) { // RGBA assumed\n\n\t\t\t\t// pixel color\n\t\t\t\tcolor.setRGB( data[ i ] / 255, data[ i + 1 ] / 255, data[ i + 2 ] / 255 );\n\n\t\t\t\t// convert to linear color space\n\t\t\t\tconvertColorToLinear( color, cubeTexture.colorSpace );\n\n\t\t\t\t// pixel coordinate on unit cube\n\n\t\t\t\tconst pixelIndex = i / 4;\n\n\t\t\t\tconst col = - 1 + ( pixelIndex % imageWidth + 0.5 ) * pixelSize;\n\n\t\t\t\tconst row = 1 - ( Math.floor( pixelIndex / imageWidth ) + 0.5 ) * pixelSize;\n\n\t\t\t\tswitch ( faceIndex ) {\n\n\t\t\t\t\tcase 0: coord.set( - 1, row, - col ); break;\n\n\t\t\t\t\tcase 1: coord.set( 1, row, col ); break;\n\n\t\t\t\t\tcase 2: coord.set( - col, 1, - row ); break;\n\n\t\t\t\t\tcase 3: coord.set( - col, - 1, row ); break;\n\n\t\t\t\t\tcase 4: coord.set( - col, row, 1 ); break;\n\n\t\t\t\t\tcase 5: coord.set( col, row, - 1 ); break;\n\n\t\t\t\t}\n\n\t\t\t\t// weight assigned to this pixel\n\n\t\t\t\tconst lengthSq = coord.lengthSq();\n\n\t\t\t\tconst weight = 4 / ( Math.sqrt( lengthSq ) * lengthSq );\n\n\t\t\t\ttotalWeight += weight;\n\n\t\t\t\t// direction vector to this pixel\n\t\t\t\tdir.copy( coord ).normalize();\n\n\t\t\t\t// evaluate SH basis functions in direction dir\n\t\t\t\tSphericalHarmonics3.getBasisAt( dir, shBasis );\n\n\t\t\t\t// accumulate\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tshCoefficients[ j ].x += shBasis[ j ] * color.r * weight;\n\t\t\t\t\tshCoefficients[ j ].y += shBasis[ j ] * color.g * weight;\n\t\t\t\t\tshCoefficients[ j ].z += shBasis[ j ] * color.b * weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// normalize\n\t\tconst norm = ( 4 * Math.PI ) / totalWeight;\n\n\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\tshCoefficients[ j ].x *= norm;\n\t\t\tshCoefficients[ j ].y *= norm;\n\t\t\tshCoefficients[ j ].z *= norm;\n\n\t\t}\n\n\t\treturn new LightProbe( sh );\n\n\t}\n\n\t/**\n\t * Creates a light probe from the given (radiance) environment map.\n\t * The method expects that the environment map is represented as a cube render target.\n\t *\n\t * The cube render target must be in RGBA so `cubeRenderTarget.texture.format` must be\n\t * set to {@link RGBAFormat}.\n\t *\n\t * @async\n\t * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n\t * @param {CubeRenderTarget|WebGLCubeRenderTarget} cubeRenderTarget - The environment map.\n\t * @return {Promise<LightProbe>} A Promise that resolves with the created light probe.\n\t */\n\tstatic async fromCubeRenderTarget( renderer, cubeRenderTarget ) {\n\n\t\tconst flip = renderer.coordinateSystem === WebGLCoordinateSystem ? - 1 : 1;\n\n\t\t// The renderTarget must be set to RGBA in order to make readRenderTargetPixels works\n\t\tlet totalWeight = 0;\n\n\t\tconst coord = new Vector3();\n\n\t\tconst dir = new Vector3();\n\n\t\tconst color = new Color();\n\n\t\tconst shBasis = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n\n\t\tconst sh = new SphericalHarmonics3();\n\t\tconst shCoefficients = sh.coefficients;\n\n\t\tconst dataType = cubeRenderTarget.texture.type;\n\t\tconst imageWidth = cubeRenderTarget.width; // assumed to be square\n\n\t\tlet data;\n\n\t\tif ( renderer.isWebGLRenderer ) {\n\n\t\t\tif ( dataType === HalfFloatType ) {\n\n\t\t\t\tdata = new Uint16Array( imageWidth * imageWidth * 4 );\n\n\t\t\t} else {\n\n\t\t\t\t// assuming UnsignedByteType\n\n\t\t\t\tdata = new Uint8Array( imageWidth * imageWidth * 4 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let faceIndex = 0; faceIndex < 6; faceIndex ++ ) {\n\n\t\t\tif ( renderer.isWebGLRenderer ) {\n\n\t\t\t\tawait renderer.readRenderTargetPixelsAsync( cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex );\n\n\t\t\t} else {\n\n\t\t\t\tdata = await renderer.readRenderTargetPixelsAsync( cubeRenderTarget, 0, 0, imageWidth, imageWidth, 0, faceIndex );\n\n\t\t\t}\n\n\t\t\tconst pixelSize = 2 / imageWidth;\n\n\t\t\tfor ( let i = 0, il = data.length; i < il; i += 4 ) { // RGBA assumed\n\n\t\t\t\tlet r, g, b;\n\n\t\t\t\tif ( dataType === HalfFloatType ) {\n\n\t\t\t\t\tr = DataUtils.fromHalfFloat( data[ i ] );\n\t\t\t\t\tg = DataUtils.fromHalfFloat( data[ i + 1 ] );\n\t\t\t\t\tb = DataUtils.fromHalfFloat( data[ i + 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tr = data[ i ] / 255;\n\t\t\t\t\tg = data[ i + 1 ] / 255;\n\t\t\t\t\tb = data[ i + 2 ] / 255;\n\n\t\t\t\t}\n\n\t\t\t\t// pixel color\n\t\t\t\tcolor.setRGB( r, g, b );\n\n\t\t\t\t// convert to linear color space\n\t\t\t\tconvertColorToLinear( color, cubeRenderTarget.texture.colorSpace );\n\n\t\t\t\t// pixel coordinate on unit cube\n\n\t\t\t\tconst pixelIndex = i / 4;\n\n\t\t\t\tconst col = ( 1 - ( pixelIndex % imageWidth + 0.5 ) * pixelSize ) * flip;\n\n\t\t\t\tconst row = 1 - ( Math.floor( pixelIndex / imageWidth ) + 0.5 ) * pixelSize;\n\n\t\t\t\tswitch ( faceIndex ) {\n\n\t\t\t\t\tcase 0: coord.set( - 1 * flip, row, col * flip ); break;\n\n\t\t\t\t\tcase 1: coord.set( 1 * flip, row, - col * flip ); break;\n\n\t\t\t\t\tcase 2: coord.set( col, 1, - row ); break;\n\n\t\t\t\t\tcase 3: coord.set( col, - 1, row ); break;\n\n\t\t\t\t\tcase 4: coord.set( col, row, 1 ); break;\n\n\t\t\t\t\tcase 5: coord.set( - col, row, - 1 ); break;\n\n\t\t\t\t}\n\n\t\t\t\t// weight assigned to this pixel\n\n\t\t\t\tconst lengthSq = coord.lengthSq();\n\n\t\t\t\tconst weight = 4 / ( Math.sqrt( lengthSq ) * lengthSq );\n\n\t\t\t\ttotalWeight += weight;\n\n\t\t\t\t// direction vector to this pixel\n\t\t\t\tdir.copy( coord ).normalize();\n\n\t\t\t\t// evaluate SH basis functions in direction dir\n\t\t\t\tSphericalHarmonics3.getBasisAt( dir, shBasis );\n\n\t\t\t\t// accumulate\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tshCoefficients[ j ].x += shBasis[ j ] * color.r * weight;\n\t\t\t\t\tshCoefficients[ j ].y += shBasis[ j ] * color.g * weight;\n\t\t\t\t\tshCoefficients[ j ].z += shBasis[ j ] * color.b * weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// normalize\n\t\tconst norm = ( 4 * Math.PI ) / totalWeight;\n\n\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\tshCoefficients[ j ].x *= norm;\n\t\t\tshCoefficients[ j ].y *= norm;\n\t\t\tshCoefficients[ j ].z *= norm;\n\n\t\t}\n\n\t\treturn new LightProbe( sh );\n\n\t}\n\n}\n\nfunction convertColorToLinear( color, colorSpace ) {\n\n\tswitch ( colorSpace ) {\n\n\t\tcase SRGBColorSpace:\n\n\t\t\tcolor.convertSRGBToLinear();\n\t\t\tbreak;\n\n\t\tcase LinearSRGBColorSpace:\n\t\tcase NoColorSpace:\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tconsole.warn( 'WARNING: LightProbeGenerator convertColorToLinear() encountered an unsupported color space.' );\n\t\t\tbreak;\n\n\t}\n\n\treturn color;\n\n}\n\nexport { LightProbeGenerator };\n","import * as THREE from 'three';\nimport { useEffect, useRef, useState, memo } from 'react';\nimport { ThreeElements, useThree } from '@react-three/fiber';\n// @ts-ignore\nimport { CustomControl } from 'src/components/CustomControl/CustomControl';\nimport { usePlay, useStats } from 'src/lib/hooks';\nimport { TestIndexedCube3Materials } from './stuff/TestIndexedCube3Materials';\n// import { TestMorphTargets } from './TestMorphTargets';\n// @ts-ignore\nimport { LightProbeGenerator } from 'three/examples/jsm/lights/LightProbeGenerator';\nimport { getShadowMapMaterial } from 'src/lib/utils/customShaders';\nimport api from 'lib/api';\n\nconst degToRad = THREE.MathUtils.degToRad;\n\nconst shadowMapMaterial = getShadowMapMaterial();\n// @ts-ignore\nfunction Box(\n  props: ThreeElements['mesh'] & {\n    mapURL: string;\n    alphaMapURL?: string;\n  }\n) {\n  const refMesh = useRef<THREE.Mesh>(null!);\n  const [hovered, _hover] = useState(false);\n  const [clicked, _click] = useState(false);\n  const [map, setMap] = useState<THREE.Texture | null>(null);\n  const [alphaMap, setAlphaMap] = useState<THREE.Texture | null>(null);\n  const meshMaterialRef = useRef<THREE.MeshStandardMaterial | null>(null);\n  const { position = [0, 0, 0], mapURL, alphaMapURL, ...rest } = props;\n  usePlay((playingState, _state, delta) => {\n    // console.log('Box usePlay', { playingState, _state, delta });\n    if (playingState === 'playing') {\n      refMesh.current && (refMesh.current.rotation.x += delta);\n      // refMesh.current.position.x = Math.sin(Date.now() / 1000);\n      // refMesh?.current && (refMesh.current.position.z = 2);\n    } else if (playingState === 'stopped') {\n      refMesh.current && (refMesh.current.rotation.x = 0);\n    }\n  });\n\n  useEffect(() => {\n    // 'https://threejsfundamentals.org/threejs/resources/images/wall.jpg',\n    // 'textures/file_example_TIFF_10MB.tiff',\n    // 'textures/sample_5184×3456.tga',\n    // 'textures/checkerboard-8x8.png',\n    // 'textures/castle_brick_02_red_nor_gl_4k.exr',\n    // 'textures/sikqyan_2K_Displacement.exr',\n    api.createTexturesFromImages(mapURL, { material: meshMaterialRef }).then((textures) => {\n      const map = textures[0];\n      // console.log('setting map');\n      setMap(map);\n    });\n    alphaMapURL &&\n      api.createTexturesFromImages(alphaMapURL, { material: meshMaterialRef }).then((textures) => {\n        const map = textures[0];\n        // console.log('setting alphaMap');\n        setAlphaMap(map);\n      });\n  }, [mapURL, alphaMapURL]);\n\n  return (\n    <mesh\n      {...rest}\n      // castShadow={true}\n      ref={refMesh}\n      scale={clicked ? 1.05 : 1}\n      // onClick={(_event) => _click(!clicked)}\n      // onPointerOver={(_event) => _hover(true)}\n      // onPointerOut={(_event) => _hover(false)}\n      position={position}\n    >\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial\n        ref={meshMaterialRef}\n        color={hovered ? 'hotpink' : 'white'}\n        map={map}\n        alphaMap={alphaMap}\n        roughness={0}\n        metalness={1}\n      />\n      {props.children}\n    </mesh>\n  );\n}\n\nexport const Experience = memo(function Experience() {\n  const initialisedRef = useRef(false);\n  // @ts-ignore\n  const { scene, gl, clock, camera } = useThree();\n  useStats();\n\n  useEffect(() => {\n    camera.position.set(0, 0, 22);\n    camera.rotation.set(0, 0, 0);\n    if (camera instanceof THREE.OrthographicCamera) {\n      camera.zoom = 25;\n    }\n  }, [camera]);\n\n  useEffect(() => {\n    // because R3F adds geometry asynchronously, after internal setup\n    api.updateSceneBBox();\n    return api.registerDefaultPlayTriggers();\n  }, []);\n\n  const refDirectionalLight = useRef<THREE.DirectionalLight>(null!);\n  const refPointLight = useRef<THREE.PointLight>(null!);\n  const refSpotLight = useRef<THREE.SpotLight>(null!);\n  const refLightProbe = useRef<THREE.LightProbe>(null!);\n  const doorMaterialRef = useRef<THREE.MeshStandardMaterial>(null!);\n  const cubeCameraRef = useRef<THREE.CubeCamera>(null!);\n  const webGLCubeRenderTargetRef = useRef(\n    new THREE.WebGLCubeRenderTarget(1024, {\n      // these are not required\n      // type: THREE.HalfFloatType // does not work well when reading back the texture in inspector/TexturePlugin\n      // format: THREE.RGBAFormat\n      // generateMipmaps: true\n      // depthTexture: new THREE.DepthTexture(512, 512)\n    })\n  );\n\n  const customPropsRef = useRef({\n    myImage: null,\n    myBool: false,\n    myNumber: 0.23,\n    myPoint: { x: 0.5, y: 0.5 }\n  });\n\n  // const [myImage, setMyImage] = useState<any>(null);\n  const [showOthers, setShowOthers] = useState(false);\n  // @ts-ignore\n  const [customControlXY, setCustomControlXY] = useState({ x: 0.5, y: 0.5 });\n  // @ts-ignore\n  const [number, setNumber] = useState(1.23);\n  const audioListenerRef = useRef<THREE.AudioListener>(new THREE.AudioListener());\n\n  usePlay(\n    (_playState, _rootState, _delta) => {\n      if (refPointLight.current) {\n        // refPointLight.current.intensity = Math.sin(Date.now() / 100) + 1;\n      }\n      if (cubeCameraRef.current) {\n        cubeCameraRef.current.rotateX(0.01);\n        // cubeCameraRef.current.__inspectorData.helper.update();\n        // cubeCameraRef.current.__inspectorData.picker.update();\n      }\n      if (refDirectionalLight.current) {\n        refDirectionalLight.current.translateX(0.01);\n      }\n      if (refPointLight.current) {\n        refPointLight.current.translateZ(0.01);\n      }\n      if (refSpotLight.current) {\n        refSpotLight.current.translateZ(0.01);\n      }\n      if (customPropsRef.current) {\n        customPropsRef.current.myNumber += 0.01;\n      }\n    },\n    0,\n    [showOthers]\n  );\n\n  usePlay((_state, _rootState, _delta) => {\n    // setNumber((prev) => {\n    //   // console.log('Experience setting new value on play', prev + 0.01);\n    //   return prev + 0.01;\n    // });\n    // setCustomControlXY((prev) => {\n    //   return { x: prev.x + 0.01, y: prev.y };\n    // });\n  });\n\n  useEffect(() => {\n    if (initialisedRef.current) return;\n    api\n      .createTexturesFromImages(\n        ['alpha.jpg', 'ao.jpg', 'color.jpg', 'height.jpg', 'metalness.jpg', 'normal.jpg', 'roughness.jpg'].map(\n          (img) => `textures/pbr/door/${img}`\n        )\n      )\n      .then((textures) => {\n        if (!doorMaterialRef.current) return;\n        // console.log(doorMaterialRef.current, textures);\n        doorMaterialRef.current.alphaMap = textures[0];\n        doorMaterialRef.current.aoMap = textures[1];\n        textures[2].colorSpace = THREE.SRGBColorSpace;\n        doorMaterialRef.current.map = textures[2];\n        doorMaterialRef.current.bumpMap = textures[3];\n        doorMaterialRef.current.metalnessMap = textures[4];\n        doorMaterialRef.current.normalMap = textures[5];\n        doorMaterialRef.current.roughnessMap = textures[6];\n        doorMaterialRef.current.metalness = 1;\n        doorMaterialRef.current.roughness = 0.7;\n        doorMaterialRef.current.transparent = true;\n        doorMaterialRef.current.needsUpdate = true;\n      });\n  }, []);\n\n  useEffect(() => {\n    if (initialisedRef.current) return;\n    // 'https://threejsfundamentals.org/threejs/resources/images/wall.jpg',\n    // 'textures/test/file_example_TIFF_1MB.tiff',\n    // 'textures/test/one_gray_channel.exr',\n    // 'textures/background/2d/cover-1920.jpg',\n    // 'textures/background/equirectangular/2294472375_24a3b8ef46_o.jpg',\n    // 'textures/background/equirectangular/TCom_NorwayForest_4K_hdri_sphere.exr'\n    // 'textures/background/equirectangular/kloofendal_48d_partly_cloudy_puresky_4k.hdr'\n    // 'textures/background/equirectangular/spruit_sunrise_4k.hdr.jpg'\n    // ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/MilkyWay/dark-s_${t}.jpg`)\n    // ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/Park3Med/${t}.jpg`)\n    // ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/skyboxsun25deg/${t}.jpg`)\n    // ['px', 'nx', 'py', 'ny', 'pz', 'nz'].map((t) => `textures/background/cube/pisa/${t}.png`)\n    api\n      .createTexturesFromImages('textures/background/equirectangular/spruit_sunrise_4k.hdr.jpg', {})\n      .then((textures) => {\n        // console.log('createTextureFromImages', textures);\n        const texture = textures[0];\n        texture.mapping =\n          texture instanceof THREE.CubeTexture\n            ? THREE.CubeRefractionMapping // THREE.CubeReflectionMapping, THREE.CubeRefractionMapping\n            : texture.image.width / texture.image.height === 2\n              ? THREE.EquirectangularRefractionMapping\n              : THREE.UVMapping;\n        // texture.mapping = THREE.EquirectangularReflectionMapping;\n        texture.needsUpdate = true;\n        // texture.colorSpace = THREE.SRGBColorSpace;\n        if (refLightProbe.current && texture instanceof THREE.CubeTexture) {\n          refLightProbe.current.copy(LightProbeGenerator.fromCubeTexture(texture));\n          refLightProbe.current.name = 'myLightProbe';\n          // refLightProbe.current.position.set(0, 0, 3);\n          refLightProbe.current.intensity = 1;\n        }\n\n        // const pmremGenerator = new THREE.PMREMGenerator(gl);\n\n        // pmremGenerator.compileEquirectangularShader();\n        // pmremGenerator.compileCubemapShader();\n\n        // const PMREMRenderTarget = pmremGenerator.fromCubemap(texture as THREE.CubeTexture);\n        // const PMREMRenderTarget = pmremGenerator.fromEquirectangular(texture);\n        // const PMREMRenderTarget = pmremGenerator.fromScene(scene);\n        // PMREMRenderTarget.texture.mapping = THREE.CubeUVReflectionMapping;\n        // texture.colorSpace = THREE.SRGBColorSpace;\n        // texture.copy(PMREMRenderTarget.texture);\n        // texture.source = PMREMRenderTarget.texture.source;\n        // texture.image = PMREMRenderTarget.texture.image;\n        // console.log('createTextureFromImages', {\n        //   texture,\n        //   PMREMRenderTarget,\n        //   'PMREMRenderTarget.texture': PMREMRenderTarget.texture\n        // });\n        // scene.background = PMREMRenderTarget.texture;\n        // scene.environment = PMREMRenderTarget.texture;\n        // texture.mapping = THREE.EquirectangularReflectionMapping;\n        scene.background = texture; // leaves behind 1 geometry\n        scene.environment = texture; // leaves behind 1 texture and 13 geometries\n        // texture.needsPMREMUpdate = true;\n        // texture.needsUpdate = true;\n        if (doorMaterialRef.current) {\n          // doorMaterialRef.current.envMap = texture; // leaves behind 1 texture and 13 geometries\n        }\n\n        api.refreshCPanel();\n        api.updateCubeCameras();\n\n        // api.loadObject('models/FromThreeRepo/ply/binary/Lucy100k.ply', {}).then((mesh) => {\n        //   if (!mesh) return;\n        //   mesh.name = 'LoadedMesh';\n        //\n        //   const phongMaterial = new THREE.MeshPhongMaterial({\n        //     color: 0xffffff,\n        //     envMap: scene.background as THREE.Texture,\n        //     refractionRatio: 0.98\n        //   });\n        //\n        //   const s = 0.001;\n        //   (mesh as THREE.Mesh).material = phongMaterial;\n        //   mesh.position.set(1, 0, 2);\n        //   mesh.__inspectorData.isInspectable = true;\n        //   mesh.scale.x = mesh.scale.y = mesh.scale.z = s;\n        //\n        //   scene.add(mesh);\n        // });\n\n        // models/Free/fbx/Asuna/2/FreeTestAnimations_reexport.fbx\n        // models/MyTests/having space in path/asset with space in path.fbx\n        // models/MyTests/with_non_default_textures/with_non_native_textures.fbx\n        // models/NonFree/Dark Elf Blader - Game Ready/Assets/Textures/DarkElfBlader_FBX_From3DsMax.fbx\n        // models/Free/gltf/Mixamo/Jennifer/Jennifer.glb\n        api\n          .loadObject(['Jennifer.glb', 'Animations_gltf/Idle.glb', 'Animations_gltf/Catwalk_Walk_Forward.glb'], {\n            // api.loadObject(['Samba Dancing.fbx'], {\n            // api.loadObject(['coffeemat.glb'], {\n            scene,\n            camera,\n            autoScaleRatio: 0.4,\n            path: 'models/Free/gltf/Mixamo/Jennifer/'\n            // path: 'models/FromThreeRepo/fbx/'\n            // path: 'models/FromThreeRepo/gltf_glb/'\n          })\n          .then((mesh) => {\n            if (!mesh) return;\n            mesh.__inspectorData.isInspectable = true;\n            scene.add(mesh);\n            // api.deepTraverse(\n            //   mesh,\n            //   ({ value, path, ancestors }) => {\n            //     console.log('deepTraverseUUID', { value, path, ancestors });\n            //   },\n            //   ({ value, key, parent }) => {\n            //     // return key === 'children' && value.length;\n            //     return value instanceof THREE.Group;\n            //   }\n            // );\n            setTimeout(() => {\n              // mesh.removeFromParent();\n              // api.deepTraverse(\n              //   scene,\n              //   ({ value, path, ancestors }) => {\n              //     console.log('found', { value, path, ancestors });\n              //   },\n              //   ({ value, key, parent }) => {\n              //     if (!value) {\n              //       return false;\n              //     }\n              //     return value instanceof THREE.Material;\n              //   }\n              // );\n            }, 4000);\n          });\n\n        const testIndexedCube3Materials = TestIndexedCube3Materials();\n        // const testMorphTargets = TestMorphTargets();\n        const recombinedCube = api.splitMeshesByMaterial(testIndexedCube3Materials, {});\n        recombinedCube.castShadow = true;\n        recombinedCube.receiveShadow = true;\n        // testIndexedCube3Materials.position.set(0, 0, 0);\n        // recombinedCube.position.set(0, 3, 0);\n        // recombinedCube.name = 'recombinedCube';\n\n        // these are not needed\n        // testIndexedCube3Materials.__inspectorData.isInspectable = true;\n        recombinedCube.__inspectorData.isInspectable = true;\n\n        // console.log('recombinedCube', { testIndexedCube3Materials, recombinedCube });\n\n        // scene.add(testIndexedCube3Materials);\n        scene.add(recombinedCube);\n        // scene.add(testMorphTargets);\n        shadowMapMaterial.uniforms.tDiffuse.value = refDirectionalLight.current.shadow.map?.texture;\n        // gl.setSize(400, 200);\n        // camera.aspect = 400 / 200;\n        // camera.updateProjectionMatrix();\n      });\n  }, []);\n\n  useEffect(() => {\n    initialisedRef.current = true;\n  }, []);\n\n  return (\n    <>\n      <group name=\"lights group\">\n        <directionalLight\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-radius={4}\n          shadow-camera-right={15}\n          shadow-camera-left={-15}\n          shadow-camera-top={15}\n          shadow-camera-bottom={-15}\n          // shadow-bias={-0.001}\n          shadow-blurSamples={8}\n          castShadow\n          position={[2, 2, 2]}\n          scale={1}\n          intensity={4.5}\n          ref={refDirectionalLight}\n          color={'white'}\n          __inspectorData={{ isInspectable: false }}\n        />\n        <hemisphereLight\n          // args={[0xffffff, 0xffffff, 2]}\n          intensity={2}\n          color={new THREE.Color().setHSL(0.6, 1, 0.6)}\n          groundColor={new THREE.Color().setHSL(0.095, 1, 0.75)}\n        />\n        <ambientLight color={'#ffffff'} intensity={3.5} position={[0, 1, 0]} />\n        {/* rectAreaLight (RectAreaLightUniformsLib) gives 2 textures that cannot be disposed */}\n        <rectAreaLight\n          color={'deepskyblue'}\n          position={[-3, 0, -8]}\n          rotation={[-2.51, 0, 0]}\n          intensity={6}\n          width={10}\n          height={10}\n        />\n        <pointLight\n          castShadow\n          // shadow-mapSize={[2048, 2048]}\n          position={[0, -2, 0]}\n          color={'orange'}\n          // decay={0}\n          scale={1}\n          intensity={Math.PI}\n          ref={refPointLight}\n          __inspectorData={{ isInspectable: false }}\n        />\n\n        <spotLight\n          castShadow\n          position={[5.5, -0.7, 0.3]} // position={[5.5, -0.7, 0.3]} | position={[-12.98, 3.963, 4.346]}\n          // | rotation={[degToRad(-42.342), degToRad(-65.604), degToRad(-39.706)]}\n          scale={1}\n          intensity={66}\n          distance={30}\n          color=\"deepskyblue\"\n          angle={Math.PI / 8}\n          penumbra={0.5}\n          decay={0.1}\n          ref={refSpotLight}\n        ></spotLight>\n\n        <lightProbe ref={refLightProbe} color={'blue'} position={[0, 0, 3]} name={'myLightProbe'} />\n      </group>\n\n      <Box\n        castShadow\n        receiveShadow\n        mapURL=\"textures/utils/checkerboard-8x8.png\"\n        position={[-1.2, customControlXY.x, customControlXY.y]}\n        __inspectorData={{ isInspectable: true }}\n        name=\"Box 1\"\n      />\n      <Box\n        mapURL=\"textures/utils/checkerboard-8x8.png\"\n        alphaMapURL=\"textures/utils/checkerboard-8x8.png\"\n        position={[1.2, 0, 0]}\n        __inspectorData={{ isInspectable: true }}\n        castShadow\n        receiveShadow\n        name=\"Box 2\"\n      >\n        <mesh\n          // receiveShadow\n          position={[1.5, 0.5, 0]}\n          __inspectorData={{ isInspectable: true }}\n          name=\"Box 2 child\"\n        >\n          <boxGeometry args={[1, 1, 1]} />\n          <meshStandardMaterial />\n        </mesh>\n      </Box>\n      <mesh\n        name=\"plane\"\n        rotation={[-1.5, 0, 0]}\n        position={[-5, -7.23, -3]}\n        receiveShadow={true}\n        __inspectorData={{ isInspectable: true }}\n      >\n        <planeGeometry args={[32, 32]} />\n        <meshStandardMaterial color=\"white\" side={THREE.DoubleSide} />\n        {/*<meshStandardMaterial*/}\n        {/*  roughness={0}*/}\n        {/*  metalness={1}*/}\n        {/*  envMap={webGLCubeRenderTargetRef.current.texture}*/}\n        {/*  color=\"white\"*/}\n        {/*  side={THREE.DoubleSide}*/}\n        {/*/>*/}\n      </mesh>\n\n      <mesh\n        name=\"shMapPlane\"\n        rotation={[-1.5, 0, 0]}\n        position={[-15, -17.23, -3]}\n        receiveShadow={false}\n        castShadow={false}\n        __inspectorData={{ isInspectable: true }}\n        material={shadowMapMaterial}\n      >\n        <planeGeometry args={[32, 32]} />\n        {/*<meshStandardMaterial side={THREE.DoubleSide} map={refDirectionalLight.current?.shadow?.map?.texture} />*/}\n        {/*<meshStandardMaterial*/}\n        {/*  roughness={0}*/}\n        {/*  metalness={1}*/}\n        {/*  envMap={webGLCubeRenderTargetRef.current.texture}*/}\n        {/*  color=\"white\"*/}\n        {/*  side={THREE.DoubleSide}*/}\n        {/*/>*/}\n      </mesh>\n\n      <mesh\n        name=\"door\"\n        rotation={[0, 0, 0]}\n        position={[0, 0, -2]}\n        receiveShadow\n        castShadow\n        __inspectorData={{ isInspectable: true }}\n      >\n        <planeGeometry args={[16, 16]} />\n        {/*@ts-ignore*/}\n        <meshPhysicalMaterial ref={doorMaterialRef} side={THREE.DoubleSide} />\n      </mesh>\n\n      {/*<mesh*/}\n      {/*  name=\"door\"*/}\n      {/*  rotation={[0, 0, 0]}*/}\n      {/*  position={[2000, 2000, -2000]}*/}\n      {/*  receiveShadow*/}\n      {/*  castShadow*/}\n      {/*  __inspectorData={{ isInspectable: true }}*/}\n      {/*>*/}\n      {/*  <planeGeometry args={[16, 16]} />*/}\n      {/*  /!*@ts-ignore*!/*/}\n      {/*  <meshPhysicalMaterial ref={doorMaterialRef} side={THREE.DoubleSide} />*/}\n      {/*</mesh>*/}\n\n      <positionalAudio args={[audioListenerRef.current]} position={[0, 0, 5]} />\n\n      <perspectiveCamera\n        args={[75, 1, 0.1, 100]} // window.innerWidth / window.innerHeight\n        position={[-12.98, 3.963, 4.346]} // position={[-12.98, 3.963, 4.346]} | position={[5.5, -0.7, 0.3]}\n        name=\"myPerspectiveCamera\"\n        rotation={[degToRad(-42.342), degToRad(-65.604), degToRad(-39.706)]} // rotation={[degToRad(-42.342), degToRad(-65.604), degToRad(-39.706)]} | rotation={[degToRad(0), degToRad(67), degToRad(0)]}\n        __inspectorData={{ useOnPlay: true }}\n      />\n\n      <orthographicCamera\n        args={[1, -1, 1, -1, 0.1, 10000]} // window.innerWidth / window.innerHeight\n        zoom={45}\n        position={[-10.98, 1.963, 1.346]}\n        name=\"myOrthographicCamera\"\n        rotation={[degToRad(-42.342), degToRad(-65.604), degToRad(-39.706)]} // 25.86 , -46.13, 19.26\n        __inspectorData={{ useOnPlay: false }}\n      />\n\n      <cubeCamera\n        ref={cubeCameraRef}\n        name=\"myCubeCamera\"\n        args={[0.1, 1000, webGLCubeRenderTargetRef.current]}\n        position={[0, 0, 8]}\n      />\n\n      <CustomControl\n        name={'myBool'}\n        object={customPropsRef.current}\n        prop={'myBool'}\n        control={{\n          label: 'My Bool',\n          onChange: (value: boolean) => {\n            setShowOthers(value);\n          }\n        }}\n      />\n      <CustomControl\n        name={'myBool_2'}\n        object={customPropsRef.current}\n        prop={'myBool'}\n        control={{\n          label: 'My Bool',\n          onChange: (value: boolean) => {\n            setShowOthers(value);\n          }\n        }}\n      />\n      {showOthers && (\n        <>\n          <CustomControl\n            name={'SceneBG'}\n            object={scene}\n            prop={'background'}\n            control={{\n              label: 'Texture',\n              gl,\n              color: { type: 'float' },\n              onChange: (...args: any[]) => {\n                console.log('Experience reacting to SceneBG value change', args);\n              }\n            }}\n          />\n          <CustomControl\n            name=\"myNumber\"\n            object={customPropsRef.current}\n            prop={'myNumber'}\n            control={{\n              label: 'My Number',\n              step: 0.01,\n              keyScale: 0.1,\n              pointerScale: 0.01,\n              onChange: (value: number) => {\n                customPropsRef.current.myPoint.x = value;\n              }\n            }}\n          />\n          <CustomControl\n            name=\"myPoint\"\n            object={customPropsRef.current}\n            prop={'myPoint'}\n            control={{\n              label: 'Point',\n              step: 0.01,\n              keyScale: 0.1,\n              pointerScale: 0.01,\n              onChange: (value: any) => {\n                setCustomControlXY({ ...value });\n                customPropsRef.current.myNumber = value.x;\n              }\n            }}\n          />\n        </>\n      )}\n    </>\n  );\n});\n\nexport default Experience;\n"],"names":["TestIndexedCube3Materials","geometry","THREE.BufferGeometry","vertices","THREE.BufferAttribute","indices","materials","THREE.MeshBasicMaterial","cube","THREE.Mesh","group","THREE.Group","pointLight","THREE.PointLight","LightProbeGenerator","cubeTexture","totalWeight","coord","Vector3","dir","color","Color","shBasis","sh","SphericalHarmonics3","shCoefficients","faceIndex","image","width","height","canvas","context","imageData","data","imageWidth","pixelSize","i","il","convertColorToLinear","pixelIndex","col","row","lengthSq","weight","j","norm","LightProbe","renderer","cubeRenderTarget","flip","WebGLCoordinateSystem","dataType","HalfFloatType","r","g","b","DataUtils","colorSpace","SRGBColorSpace","LinearSRGBColorSpace","NoColorSpace","degToRad","THREE.MathUtils","shadowMapMaterial","getShadowMapMaterial","Box","props","refMesh","useRef","hovered","_hover","useState","clicked","_click","map","setMap","alphaMap","setAlphaMap","meshMaterialRef","position","mapURL","alphaMapURL","rest","usePlay","playingState","_state","delta","useEffect","api","textures","jsxs","jsx","Experience","memo","initialisedRef","scene","gl","clock","camera","useThree","useStats","THREE.OrthographicCamera","refDirectionalLight","refPointLight","refSpotLight","refLightProbe","doorMaterialRef","cubeCameraRef","webGLCubeRenderTargetRef","THREE.WebGLCubeRenderTarget","customPropsRef","showOthers","setShowOthers","customControlXY","setCustomControlXY","number","setNumber","audioListenerRef","THREE.AudioListener","_playState","_rootState","_delta","img","THREE.SRGBColorSpace","texture","THREE.CubeTexture","THREE.CubeRefractionMapping","THREE.EquirectangularRefractionMapping","THREE.UVMapping","mesh","testIndexedCube3Materials","recombinedCube","Fragment","THREE.Color","THREE.DoubleSide","CustomControl","value","args"],"mappings":"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","x_google_ignoreList":[1]}