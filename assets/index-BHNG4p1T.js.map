{"version":3,"file":"index-BHNG4p1T.js","sources":["../../demo/App.tsx","../../demo/main.tsx"],"sourcesContent":["import { ReactNode, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { extend } from '@react-three/fiber';\nimport { useDefaultSetup } from 'src/lib/hooks';\nimport * as THREE from 'three';\nimport { default as api, type AppStore } from 'src/lib/api';\n\nextend({ OrbitControls });\n\nconst glOptions = { antialias: true, precision: 'highp' };\n\ninterface AppProps {\n  children?: ReactNode;\n}\n\nexport function App(props: AppProps) {\n  const { children } = props;\n  const [renderer, setRenderer] = useState<THREE.WebGLRenderer | null>(null);\n  const [isDraggingTransformControls, setIsDraggingTransformControls] = useState(false);\n  const initialPlayingState = api.getPlayingState();\n  const [playingState, setPlayingState] = useState<AppStore['playingState']>(initialPlayingState);\n\n  const customCameraControls = false;\n\n  const { camera, scene, inspector } = useDefaultSetup({\n    showInspector: true,\n    autoNavControls: customCameraControls ? 'never' : 'whenStopped',\n    showGizmos: true,\n    useTransformControls: true,\n    onTransformControlsDragging: setIsDraggingTransformControls,\n    onPlayingStateChange: setPlayingState\n  });\n\n  /*\n  shadow types\n  const types = {\n    basic: THREE.BasicShadowMap, // gives unfiltered shadow maps - fastest, but lowest quality.\n    percentage: THREE.PCFShadowMap, // filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm (default)\n    soft/true: THREE.PCFSoftShadowMap, // filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with better soft shadows especially when using low-resolution shadow maps.\n    variance: THREE.VSMShadowMap // filters shadow maps using the Variance Shadow Map (VSM) algorithm. When using VSMShadowMap all shadow receivers will also cast shadows\n  };\n  VSMShadowMap works with Light.shadow.blurSamples\n  VSMShadowMap was showing shadow acne for PointLight which was solved with bias -0.0001\n  PCFSoftShadowMap and BasicShadowMap do not work with Light.shadow.radius\n  * */\n\n  // R3F takes care of adding/removing the camera from the scene\n  // and propagating it to useThree hook\n  // R3F does not support changing the scene after initial setup\n  return (\n    <>\n      <Canvas\n        camera={camera}\n        scene={scene}\n        shadows=\"soft\"\n        gl={(defaultProps) => {\n          const _renderer =\n            renderer ??\n            new THREE.WebGLRenderer({\n              ...defaultProps,\n              ...glOptions\n            });\n          !renderer && setRenderer(() => _renderer);\n          return _renderer;\n        }}\n        frameloop=\"always\" // 'always' | 'demand' | 'never'\n        // legacy\n        // when legacy is true it sets THREE.ColorManagement.enabled = false, by default THREE.ColorManagement is enabled\n        // when THREE.ColorManagement is enabled, ThreeJS will automatically handle the conversion of textures and colors to linear space.\n      >\n        {renderer && (\n          <orbitControls\n            args={[camera, renderer.domElement]}\n            enabled={!isDraggingTransformControls && (customCameraControls || playingState !== 'stopped')}\n            enableDamping={false}\n          />\n        )}\n        {inspector}\n        {children}\n      </Canvas>\n    </>\n  );\n}\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Experience as DefaultExperience } from './scenarios/Experience';\n// import { ProjectLongLatOnSphere as DefaultExperience } from './scenarios/ProjectLongLatOnSphere';\nimport { App } from './App';\nimport './main.css';\n\nconst Experience = DefaultExperience;\n\nconst useStrictMode = true;\n\ncreateRoot(document.getElementById('main') as HTMLElement).render(\n  useStrictMode ? (\n    <StrictMode>\n      <App>\n        <Experience />\n      </App>\n    </StrictMode>\n  ) : (\n    <App>\n      <Experience />\n    </App>\n  )\n);\n"],"names":["extend","OrbitControls","glOptions","App","props","children","renderer","setRenderer","useState","isDraggingTransformControls","setIsDraggingTransformControls","initialPlayingState","api","playingState","setPlayingState","camera","scene","inspector","useDefaultSetup","jsx","Fragment","jsxs","Canvas","defaultProps","_renderer","THREE.WebGLRenderer","Experience","DefaultExperience","createRoot","StrictMode"],"mappings":"4IAQAA,EAAO,CAAE,cAAAC,EAAe,EAExB,MAAMC,EAAY,CAAE,UAAW,GAAM,UAAW,OAAQ,EAMjD,SAASC,EAAIC,EAAiB,CAC7B,KAAA,CAAE,SAAAC,GAAaD,EACf,CAACE,EAAUC,CAAW,EAAIC,EAAAA,SAAqC,IAAI,EACnE,CAACC,EAA6BC,CAA8B,EAAIF,EAAAA,SAAS,EAAK,EAC9EG,EAAsBC,EAAI,gBAAgB,EAC1C,CAACC,EAAcC,CAAe,EAAIN,EAAAA,SAAmCG,CAAmB,EAIxF,CAAE,OAAAI,EAAQ,MAAAC,EAAO,UAAAC,CAAA,EAAcC,EAAgB,CACnD,cAAe,GACf,gBAAkD,cAClD,WAAY,GACZ,qBAAsB,GACtB,4BAA6BR,EAC7B,qBAAsBI,CAAA,CACvB,EAkBD,OAEIK,MAAAC,EAAAA,SAAA,CAAA,SAAAC,EAAA,KAACC,EAAA,CACC,OAAAP,EACA,MAAAC,EACA,QAAQ,OACR,GAAKO,GAAiB,CACpB,MAAMC,EACJlB,GACA,IAAImB,EAAoB,CACtB,GAAGF,EACH,GAAGrB,CAAA,CACJ,EACF,OAAAI,GAAYC,EAAY,IAAMiB,CAAS,EACjCA,CACT,EACA,UAAU,SAKT,SAAA,CACClB,GAAAa,EAAA,IAAC,gBAAA,CACC,KAAM,CAACJ,EAAQT,EAAS,UAAU,EAClC,QAAS,CAACG,GAAwDI,IAAiB,UACnF,cAAe,EAAA,CACjB,EAEDI,EACAZ,CAAA,CAAA,CAAA,EAEL,CAEJ,CC5EA,MAAMqB,EAAaC,EAInBC,EAAA,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,OAEvDT,EAAA,IAACU,EACC,WAAA,CAAA,SAAAV,EAAA,IAAChB,GACC,SAACgB,EAAA,IAAAO,EAAA,EAAW,CACd,CAAA,CAAA,CACF,CAMJ"}