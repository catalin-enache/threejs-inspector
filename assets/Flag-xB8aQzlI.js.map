{"version":3,"file":"Flag-xB8aQzlI.js","sources":["../../demo/scenarios/Shaders/Flag/glsl/vertex.glsl","../../demo/scenarios/Shaders/Flag/glsl/fragment.glsl","../../demo/scenarios/Shaders/Flag/Flag.tsx"],"sourcesContent":["\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\nuniform vec2 uFrequency;\nuniform float uTime;\nuniform float uIntensity;\n\nattribute vec3 position;\nattribute vec2 uv;\nattribute float aRandom;\n\nvarying float vRandom;\nvarying float vElevation;\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    float elevation = sin(modelPosition.x * uFrequency.x - uTime) * uIntensity;\n    elevation += sin(modelPosition.y * uFrequency.y - uTime) * uIntensity;\n    modelPosition.z += elevation;\n    modelPosition.y *= 0.5; // scale height to half\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n    // default gl_Position calculation\n    // gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n    vRandom = aRandom;\n    vUv = uv;\n    vElevation = elevation;\n}\n","precision mediump float;\n\nuniform sampler2D uTexture;\n\nvarying float vRandom;\nvarying vec2 vUv;\nvarying float vElevation;\n\n\nvoid main() {\n//    gl_FragColor = vec4(0.5, vRandom, 1.0, 1.0);\n    vec4 textureColor = texture2D(uTexture, vUv);\n    textureColor.r += vRandom * 0.4;\n    textureColor.rgb *= vElevation * 0.35 + 1.0;\n    gl_FragColor = textureColor;\n}\n","import * as THREE from 'three';\nimport { useEffect, useRef } from 'react';\nimport { useThree } from '@react-three/fiber';\n// @ts-ignore\nimport { CustomControl } from 'src/components/CustomControl/CustomControl';\nimport { usePlay } from 'src/lib/hooks';\nimport { useStats } from 'lib/hooks';\nimport { api } from 'src';\n\nimport vertexShader from './glsl/vertex.glsl';\nimport fragmentShader from './glsl/fragment.glsl';\n\nconst planeGeometry = new THREE.PlaneGeometry(10, 10, 64, 64);\n\nconst addRandoms = (geometry: THREE.BufferGeometry) => {\n  const count = geometry.attributes.position.count;\n  const randoms = new Float32Array(count);\n  for (let i = 0; i < count; i++) {\n    randoms[i] = Math.random();\n  }\n  geometry.setAttribute('aRandom', new THREE.BufferAttribute(randoms, 1));\n};\n\naddRandoms(planeGeometry);\n\nconst flagTexture = (await api.createTexturesFromImages('textures/pbr/floors/FloorsCheckerboard_S_Diffuse.jpg'))[0];\n// const flagTexture = new THREE.TextureLoader().load('textures/pbr/floors/FloorsCheckerboard_S_Diffuse.jpg');\nconst material = new THREE.RawShaderMaterial({\n  vertexShader,\n  fragmentShader,\n  wireframe: false,\n  side: THREE.DoubleSide,\n  transparent: false,\n  uniforms: {\n    uIntensity: { value: 0.5 },\n    uFrequency: { value: new THREE.Vector2(0.5, 0.5) },\n    uTime: { value: 0 },\n    uTexture: { value: flagTexture }\n  }\n});\n\nexport function Flag() {\n  const { scene, camera } = useThree();\n  useStats();\n\n  const paramsRef = useRef({\n    tessellation: planeGeometry.parameters.heightSegments\n  });\n\n  useEffect(() => {\n    return api.registerDefaultPlayTriggers();\n  }, []);\n\n  useEffect(() => {\n    // because R3F adds geometry asynchronously, after internal setup\n    api.updateSceneBBox();\n    // Set up the scene\n    scene.background = new THREE.Color().setHex(0x000000);\n    return () => {\n      scene.background = null;\n    };\n  }, [scene]);\n\n  useEffect(() => {\n    camera.position.set(0, 0, 22);\n    camera.rotation.set(0, 0, 0);\n    if (camera instanceof THREE.OrthographicCamera) {\n      camera.zoom = 30;\n    }\n  }, [camera]);\n\n  // const customPropsRef = useRef({});\n\n  usePlay((_playingState, _rootState, _delta) => {\n    const elapsedTime = _rootState.clock.elapsedTime;\n    material.uniforms.uTime.value = elapsedTime;\n  });\n\n  return (\n    <>\n      <mesh\n        position={[0, 0, 0]}\n        name=\"mesh\"\n        __inspectorData={{ isInspectable: true }}\n        geometry={planeGeometry}\n        material={material}\n      />\n      <CustomControl\n        name={'tessellation'}\n        object={paramsRef.current}\n        prop={'tessellation'}\n        control={{\n          label: 'Tessellation',\n          min: 1,\n          max: 256,\n          step: 1,\n          onChange: (value) => {\n            planeGeometry.dispose();\n            const newGeometry = new THREE.PlaneGeometry(10, 10, value, value);\n            planeGeometry.copy(newGeometry);\n            addRandoms(planeGeometry);\n          }\n        }}\n      />\n      <CustomControl\n        name={'uIntensity'}\n        object={material.uniforms.uIntensity}\n        prop={'value'}\n        control={{\n          label: 'Intensity',\n          min: 0,\n          max: 1,\n          step: 0.1\n          // onChange: () => {}\n        }}\n      />\n      <CustomControl\n        name={'uFrequency'}\n        object={material.uniforms.uFrequency}\n        prop={'value'}\n        control={{\n          label: 'Frequency',\n          x: { min: 0, max: 2, step: 0.1 },\n          y: { min: 0, max: 2, step: 0.1 }\n          // onChange: () => {}\n        }}\n      />\n    </>\n  );\n}\n\nexport default Flag;\n"],"names":["vertex_default","fragment_default","planeGeometry","THREE.PlaneGeometry","addRandoms","geometry","count","randoms","i","THREE.BufferAttribute","flagTexture","api","material","THREE.RawShaderMaterial","vertexShader","fragmentShader","THREE.DoubleSide","THREE.Vector2","Flag","scene","camera","useThree","useStats","paramsRef","useRef","useEffect","THREE.Color","THREE.OrthographicCamera","usePlay","_playingState","_rootState","_delta","elapsedTime","jsxs","Fragment","jsx","CustomControl","value","newGeometry"],"mappings":"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"}