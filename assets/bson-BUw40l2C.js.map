{"version":3,"mappings":"6IAAMA,IAA2C,IAAM,CACnD,MAAMC,EAAI,OAAO,yBAAyB,OAAO,eAAe,WAAW,SAAS,EAAG,OAAO,WAAW,EAAE,IAC3G,OAAQC,GAAUD,EAAE,KAAKC,CAAK,CAClC,GAAI,EACJ,SAASC,GAAaD,EAAO,CACzB,OAAOF,GAAwCE,CAAK,IAAM,YAC9D,CACA,SAASE,GAAiBF,EAAO,CAC7B,OAAQ,OAAOA,GAAU,UACrBA,GAAS,MACT,OAAO,eAAeA,IACrBA,EAAM,OAAO,WAAW,IAAM,eAC3BA,EAAM,OAAO,WAAW,IAAM,oBAC1C,CACA,SAASG,GAASC,EAAQ,CACtB,OAAOA,aAAkB,QAAU,OAAO,UAAU,SAAS,KAAKA,CAAM,IAAM,iBAClF,CACA,SAASC,GAAML,EAAO,CAClB,OAAQ,OAAOA,GAAU,UACrBA,GAAS,MACT,OAAO,eAAeA,GACtBA,EAAM,OAAO,WAAW,IAAM,KACtC,CACA,SAASM,GAAOC,EAAM,CAClB,OAAOA,aAAgB,MAAQ,OAAO,UAAU,SAAS,KAAKA,CAAI,IAAM,eAC5E,CACA,SAASC,EAAeC,EAAGC,EAAU,CACjC,OAAO,KAAK,UAAUD,EAAG,CAACE,EAAGC,IACrB,OAAOA,GAAM,SACN,CAAE,YAAa,GAAGA,CAAC,EAAI,EAEzBP,GAAMO,CAAC,EACL,OAAO,YAAYA,CAAC,EAExBA,CACV,CACL,CACA,SAASC,GAAmBC,EAAS,CAKjC,GAJsBA,GAAW,MAC7B,OAAOA,GAAY,UACnB,YAAaA,GACb,OAAOA,EAAQ,SAAY,WAE3B,OAAOA,EAAQ,OAEvB,CAEA,MAAMC,GAAqB,EACrBC,GAAsB,OAAO,IAAI,oBAAoB,EACrDC,GAAiB,WACjBC,GAAiB,YACjBC,GAAiB,KAAK,IAAI,EAAG,EAAE,EAAI,EACnCC,GAAiB,CAAC,KAAK,IAAI,EAAG,EAAE,EAChCC,GAAa,KAAK,IAAI,EAAG,EAAE,EAC3BC,GAAa,CAAC,KAAK,IAAI,EAAG,EAAE,EAC5BC,GAAmB,EACnBC,GAAmB,EACnBC,GAAmB,EACnBC,GAAkB,EAClBC,GAAmB,EACnBC,GAAsB,EACtBC,GAAgB,EAChBC,GAAoB,EACpBC,GAAiB,EACjBC,GAAiB,GACjBC,GAAmB,GACnBC,GAAsB,GACtBC,GAAiB,GACjBC,GAAmB,GACnBC,GAAyB,GACzBC,GAAgB,GAChBC,GAAsB,GACtBC,GAAiB,GACjBC,GAAuB,GACvBC,GAAoB,IACpBC,GAAoB,IACpBC,GAA8B,EAC9BC,GAA+B,EAC/BC,GAAW,OAAO,OAAO,CAC3B,OAAQ,EACR,OAAQ,EACR,OAAQ,EACR,MAAO,EACP,QAAS,EACT,UAAW,EACX,SAAU,EACV,KAAM,EACN,KAAM,EACN,KAAM,GACN,MAAO,GACP,UAAW,GACX,WAAY,GACZ,OAAQ,GACR,oBAAqB,GACrB,IAAK,GACL,UAAW,GACX,KAAM,GACN,QAAS,GACT,OAAQ,GACR,OAAQ,GACZ,CAAC,EAED,MAAMC,UAAkB,KAAM,CAC1B,IAAI,WAAY,CACZ,MAAO,EACf,CACI,IAAI,MAAO,CACP,MAAO,WACf,CACI,YAAYC,EAASlC,EAAS,CAC1B,MAAMkC,EAASlC,CAAO,CAC9B,CACI,OAAO,YAAYd,EAAO,CACtB,OAAQA,GAAS,MACb,OAAOA,GAAU,UACjB,cAAeA,GACfA,EAAM,YAAc,IACpB,SAAUA,GACV,YAAaA,GACb,UAAWA,CACvB,CACA,CACA,MAAMiD,WAAyBF,CAAU,CACrC,IAAI,MAAO,CACP,MAAO,kBACf,CACI,aAAc,CACV,MAAM,0DAA0DhC,EAAkB,MAAM,CAChG,CACA,CACA,MAAMmC,WAAyBH,CAAU,CACrC,IAAI,MAAO,CACP,MAAO,kBACf,CACI,YAAYC,EAAS,CACjB,MAAMA,CAAO,CACrB,CACA,CACA,MAAMG,UAAwBJ,CAAU,CACpC,IAAI,MAAO,CACP,MAAO,iBACf,CACI,YAAYC,EAASI,EAAQtC,EAAS,CAClC,MAAM,GAAGkC,CAAO,aAAaI,CAAM,GAAItC,CAAO,EAC9C,KAAK,OAASsC,CACtB,CACA,CAEA,IAAIC,GACAC,GACJ,SAASC,GAAUC,EAAQC,EAAOC,EAAKC,EAAO,CAC1C,GAAIA,EAAO,CACPN,KAAqB,IAAI,YAAY,OAAQ,CAAE,MAAO,EAAI,CAAE,EAC5D,GAAI,CACA,OAAOA,GAAiB,OAAOG,EAAO,SAASC,EAAOC,CAAG,CAAC,CACtE,OACeE,EAAO,CACV,MAAM,IAAIb,EAAU,wCAAyC,CAAE,MAAAa,CAAK,CAAE,CAClF,CACA,CACI,OAAAN,KAAwB,IAAI,YAAY,OAAQ,CAAE,MAAO,EAAK,CAAE,EACzDA,GAAoB,OAAOE,EAAO,SAASC,EAAOC,CAAG,CAAC,CACjE,CAEA,SAASG,GAAkBC,EAAYL,EAAOC,EAAK,CAC/C,GAAII,EAAW,SAAW,EACtB,MAAO,GAEX,MAAMC,EAAmBL,EAAMD,EAC/B,GAAIM,IAAqB,EACrB,MAAO,GAEX,GAAIA,EAAmB,GACnB,OAAO,KAEX,GAAIA,IAAqB,GAAKD,EAAWL,CAAK,EAAI,IAC9C,OAAO,OAAO,aAAaK,EAAWL,CAAK,CAAC,EAEhD,GAAIM,IAAqB,GAAKD,EAAWL,CAAK,EAAI,KAAOK,EAAWL,EAAQ,CAAC,EAAI,IAC7E,OAAO,OAAO,aAAaK,EAAWL,CAAK,CAAC,EAAI,OAAO,aAAaK,EAAWL,EAAQ,CAAC,CAAC,EAE7F,GAAIM,IAAqB,GACrBD,EAAWL,CAAK,EAAI,KACpBK,EAAWL,EAAQ,CAAC,EAAI,KACxBK,EAAWL,EAAQ,CAAC,EAAI,IACxB,OAAQ,OAAO,aAAaK,EAAWL,CAAK,CAAC,EACzC,OAAO,aAAaK,EAAWL,EAAQ,CAAC,CAAC,EACzC,OAAO,aAAaK,EAAWL,EAAQ,CAAC,CAAC,EAEjD,MAAMO,EAAa,CAAE,EACrB,QAASC,EAAIR,EAAOQ,EAAIP,EAAKO,IAAK,CAC9B,MAAMC,EAAOJ,EAAWG,CAAC,EACzB,GAAIC,EAAO,IACP,OAAO,KAEXF,EAAW,KAAKE,CAAI,CAC5B,CACI,OAAO,OAAO,aAAa,GAAGF,CAAU,CAC5C,CACA,SAASG,GAAmBC,EAAaC,EAAQjB,EAAQ,CACrD,GAAIiB,EAAO,SAAW,EAClB,MAAO,GAGX,GAFIA,EAAO,OAAS,IAEhBD,EAAY,OAAShB,EAASiB,EAAO,OACrC,OAAO,KACX,QAASC,EAAa,EAAGC,EAAoBnB,EAAQkB,EAAaD,EAAO,OAAQC,IAAcC,IAAqB,CAChH,MAAMC,EAAOH,EAAO,WAAWC,CAAU,EACzC,GAAIE,EAAO,IACP,OAAO,KACXJ,EAAYG,CAAiB,EAAIC,CACzC,CACI,OAAOH,EAAO,MAClB,CAEA,SAASI,GAAsBC,EAAY,CACvC,OAAOC,EAAgB,gBAAgB,MAAM,KAAK,CAAE,OAAQD,CAAU,EAAI,IAAM,KAAK,MAAM,KAAK,OAAM,EAAK,GAAG,CAAC,CAAC,CACpH,CACA,MAAME,GAAoB,MAAO,SAAY,CACzC,GAAI,CACA,OAAQ,MAAMC,GAAA,4BAAAC,CAAA,mCAAAC,EAAA,EAAgB,mBAAAD,CAAA,4BAAE,WACxC,MACU,CACF,OAAOL,EACf,CACA,GAAI,EACEE,EAAkB,CACpB,kBAAkBK,EAAiB,CAC/B,GAAI,OAAO,SAASA,CAAe,EAC/B,OAAOA,EAEX,GAAI,YAAY,OAAOA,CAAe,EAClC,OAAO,OAAO,KAAKA,EAAgB,OAAQA,EAAgB,WAAYA,EAAgB,UAAU,EAErG,MAAMC,EAAYD,IAAkB,OAAO,WAAW,GAAK,OAAO,UAAU,SAAS,KAAKA,CAAe,EACzG,GAAIC,IAAc,eACdA,IAAc,qBACdA,IAAc,wBACdA,IAAc,6BACd,OAAO,OAAO,KAAKD,CAAe,EAEtC,MAAM,IAAIjC,EAAU,uDAAuD,CAC9E,EACD,SAASmC,EAAM,CACX,OAAO,OAAO,MAAMA,CAAI,CAC3B,EACD,eAAeA,EAAM,CACjB,OAAO,OAAO,YAAYA,CAAI,CACjC,EACD,OAAOC,EAAGC,EAAG,CACT,OAAOT,EAAgB,kBAAkBQ,CAAC,EAAE,OAAOC,CAAC,CACvD,EACD,gBAAgBC,EAAO,CACnB,OAAO,OAAO,KAAKA,CAAK,CAC3B,EACD,WAAWC,EAAQ,CACf,OAAO,OAAO,KAAKA,EAAQ,QAAQ,CACtC,EACD,SAAS9B,EAAQ,CACb,OAAOmB,EAAgB,kBAAkBnB,CAAM,EAAE,SAAS,QAAQ,CACrE,EACD,aAAa+B,EAAY,CACrB,OAAO,OAAO,KAAKA,EAAY,QAAQ,CAC1C,EACD,WAAW/B,EAAQ,CACf,OAAOmB,EAAgB,kBAAkBnB,CAAM,EAAE,SAAS,QAAQ,CACrE,EACD,QAAQgC,EAAK,CACT,OAAO,OAAO,KAAKA,EAAK,KAAK,CAChC,EACD,MAAMhC,EAAQ,CACV,OAAOmB,EAAgB,kBAAkBnB,CAAM,EAAE,SAAS,KAAK,CAClE,EACD,OAAOA,EAAQC,EAAOC,EAAKC,EAAO,CAC9B,MAAM8B,EAAa/B,EAAMD,GAAS,GAAKI,GAAkBL,EAAQC,EAAOC,CAAG,EAAI,KAC/E,GAAI+B,GAAc,KACd,OAAOA,EAEX,MAAMC,EAASf,EAAgB,kBAAkBnB,CAAM,EAAE,SAAS,OAAQC,EAAOC,CAAG,EACpF,GAAIC,GACA,QAASM,EAAI,EAAGA,EAAIyB,EAAO,OAAQzB,IAC/B,GAAIyB,EAAO,WAAWzB,CAAC,IAAM,MAAQ,CACjCV,GAAUC,EAAQC,EAAOC,EAAK,EAAI,EAClC,KACpB,EAGQ,OAAOgC,CACV,EACD,eAAeC,EAAO,CAClB,OAAO,OAAO,WAAWA,EAAO,MAAM,CACzC,EACD,eAAenC,EAAQa,EAAQuB,EAAY,CACvC,MAAMC,EAAoB1B,GAAmBX,EAAQa,EAAQuB,CAAU,EACvE,OAAIC,GAGGlB,EAAgB,kBAAkBnB,CAAM,EAAE,MAAMa,EAAQuB,EAAY,OAAW,MAAM,CAC/F,EACD,YAAahB,GACb,OAAOpB,EAAQ,CACX,OAAOmB,EAAgB,kBAAkBnB,CAAM,EAAE,OAAQ,CACjE,CACA,EAEA,SAASsC,IAAgB,CACrB,KAAM,CAAE,UAAAC,CAAS,EAAK,WACtB,OAAO,OAAOA,GAAc,UAAYA,EAAU,UAAY,aAClE,CACA,SAASC,GAAmBtB,EAAY,CACpC,GAAIA,EAAa,EACb,MAAM,IAAI,WAAW,kDAAkDA,CAAU,EAAE,EAEvF,OAAOuB,GAAa,gBAAgB,MAAM,KAAK,CAAE,OAAQvB,CAAU,EAAI,IAAM,KAAK,MAAM,KAAK,OAAM,EAAK,GAAG,CAAC,CAAC,CACjH,CACA,MAAMwB,IAAkB,IAAM,CAC1B,KAAM,CAAE,OAAAC,CAAM,EAAK,WACnB,GAAIA,GAAU,MAAQ,OAAOA,EAAO,iBAAoB,WACpD,OAAQzB,GACGyB,EAAO,gBAAgBF,GAAa,SAASvB,CAAU,CAAC,EAInE,GAAIoB,GAAa,EAAI,CACjB,KAAM,CAAE,QAAAM,CAAO,EAAK,WACpBA,GAAS,OAAO,0IAA0I,CACtK,CACQ,OAAOJ,EAEf,GAAI,EACEK,GAAY,cACZJ,GAAe,CACjB,kBAAkBK,EAAqB,CACnC,MAAMrB,EAAYqB,IAAsB,OAAO,WAAW,GACtD,OAAO,UAAU,SAAS,KAAKA,CAAmB,EACtD,GAAIrB,IAAc,aACd,OAAOqB,EAEX,GAAI,YAAY,OAAOA,CAAmB,EACtC,OAAO,IAAI,WAAWA,EAAoB,OAAO,MAAMA,EAAoB,WAAYA,EAAoB,WAAaA,EAAoB,UAAU,CAAC,EAE3J,GAAIrB,IAAc,eACdA,IAAc,qBACdA,IAAc,wBACdA,IAAc,6BACd,OAAO,IAAI,WAAWqB,CAAmB,EAE7C,MAAM,IAAIvD,EAAU,uDAAuD,CAC9E,EACD,SAASmC,EAAM,CACX,GAAI,OAAOA,GAAS,SAChB,MAAM,IAAI,UAAU,wDAAwD,OAAOA,CAAI,CAAC,EAAE,EAE9F,OAAO,IAAI,WAAWA,CAAI,CAC7B,EACD,eAAeA,EAAM,CACjB,OAAOe,GAAa,SAASf,CAAI,CACpC,EACD,OAAOC,EAAGC,EAAG,CACT,GAAID,EAAE,aAAeC,EAAE,WACnB,MAAO,GAEX,QAASnB,EAAI,EAAGA,EAAIkB,EAAE,WAAYlB,IAC9B,GAAIkB,EAAElB,CAAC,IAAMmB,EAAEnB,CAAC,EACZ,MAAO,GAGf,MAAO,EACV,EACD,gBAAgBoB,EAAO,CACnB,OAAO,WAAW,KAAKA,CAAK,CAC/B,EACD,WAAWC,EAAQ,CACf,OAAO,WAAW,KAAK,KAAKA,CAAM,EAAGiB,GAAKA,EAAE,WAAW,CAAC,CAAC,CAC5D,EACD,SAASzC,EAAY,CACjB,OAAO,KAAKmC,GAAa,WAAWnC,CAAU,CAAC,CAClD,EACD,aAAayB,EAAY,CACrB,OAAO,WAAW,KAAKA,EAAYgB,GAAKA,EAAE,WAAW,CAAC,EAAI,GAAI,CACjE,EACD,WAAWzC,EAAY,CACnB,OAAO,MAAM,KAAK,YAAY,KAAKA,CAAU,EAAGsB,GAAK,OAAO,aAAaA,CAAC,CAAC,EAAE,KAAK,EAAE,CACvF,EACD,QAAQI,EAAK,CACT,MAAMgB,EAAgBhB,EAAI,OAAS,IAAM,EAAIA,EAAMA,EAAI,MAAM,EAAGA,EAAI,OAAS,CAAC,EACxEhC,EAAS,CAAE,EACjB,QAASS,EAAI,EAAGA,EAAIuC,EAAc,OAAQvC,GAAK,EAAG,CAC9C,MAAMwC,EAAaD,EAAcvC,CAAC,EAC5ByC,EAAcF,EAAcvC,EAAI,CAAC,EAIvC,GAHI,CAACoC,GAAU,KAAKI,CAAU,GAG1B,CAACJ,GAAU,KAAKK,CAAW,EAC3B,MAEJ,MAAMC,EAAW,OAAO,SAAS,GAAGF,CAAU,GAAGC,CAAW,GAAI,EAAE,EAClElD,EAAO,KAAKmD,CAAQ,CAChC,CACQ,OAAO,WAAW,KAAKnD,CAAM,CAChC,EACD,MAAMM,EAAY,CACd,OAAO,MAAM,KAAKA,EAAYI,GAAQA,EAAK,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EAAE,KAAK,EAAE,CACpF,EACD,OAAOJ,EAAYL,EAAOC,EAAKC,EAAO,CAClC,MAAM8B,EAAa/B,EAAMD,GAAS,GAAKI,GAAkBC,EAAYL,EAAOC,CAAG,EAAI,KACnF,OAAI+B,GAGGlC,GAAUO,EAAYL,EAAOC,EAAKC,CAAK,CACjD,EACD,eAAegC,EAAO,CAClB,OAAO,IAAI,YAAa,EAAC,OAAOA,CAAK,EAAE,UAC1C,EACD,eAAe7B,EAAYO,EAAQuB,EAAY,CAC3C,MAAMgB,EAAQ,IAAI,cAAc,OAAOvC,CAAM,EAC7C,OAAAP,EAAW,IAAI8C,EAAOhB,CAAU,EACzBgB,EAAM,UAChB,EACD,YAAaV,GACb,OAAO1C,EAAQ,CACX,GAAIA,EAAO,OAAS,IAAM,EACtB,MAAM,IAAI,WAAW,2CAA2C,EAEpE,QAASS,EAAI,EAAGA,EAAIT,EAAO,OAAQS,GAAK,EAAG,CACvC,MAAM4C,EAAQrD,EAAOS,CAAC,EAChB6C,EAAQtD,EAAOS,EAAI,CAAC,EACpB8C,EAAQvD,EAAOS,EAAI,CAAC,EACpB+C,EAAQxD,EAAOS,EAAI,CAAC,EAC1BT,EAAOS,CAAC,EAAI+C,EACZxD,EAAOS,EAAI,CAAC,EAAI8C,EAChBvD,EAAOS,EAAI,CAAC,EAAI6C,EAChBtD,EAAOS,EAAI,CAAC,EAAI4C,CAC5B,CACQ,OAAOrD,CACf,CACA,EAEMyD,GAAkB,OAAO,QAAW,YAAc,OAAO,WAAW,YAAc,GAClFC,EAAYD,GAAkBtC,EAAkBsB,GAEtD,MAAMkB,CAAU,CACZ,IAAKnG,EAAmB,GAAI,CACxB,OAAOD,EACf,CACI,CAAC,OAAO,IAAI,4BAA4B,CAAC,EAAEqG,EAAOtG,EAASuG,EAAS,CAChE,OAAO,KAAK,QAAQD,EAAOtG,EAASuG,CAAO,CACnD,CACA,CAEA,MAAMC,GAAQ,IAAI,aAAa,CAAC,EAC1BC,EAAc,IAAI,WAAWD,GAAM,OAAQ,EAAG,CAAC,EACrDA,GAAM,CAAC,EAAI,GACX,MAAME,GAAcD,EAAY,CAAC,IAAM,EACjCE,EAAc,CAChB,YAAAD,GACA,sBAAsBnD,EAAQjB,EAAQ,CAClC,GAAIiB,EAAOjB,EAAS,CAAC,EAAI,IACrB,MAAM,IAAI,WAAW,sCAAsCA,CAAM,EAAE,EAEvE,OAAQiB,EAAOjB,CAAM,EAChBiB,EAAOjB,EAAS,CAAC,GAAK,EACtBiB,EAAOjB,EAAS,CAAC,GAAK,GACtBiB,EAAOjB,EAAS,CAAC,GAAK,EAC9B,EACD,WAAWiB,EAAQjB,EAAQ,CACvB,OAAQiB,EAAOjB,CAAM,EAChBiB,EAAOjB,EAAS,CAAC,GAAK,EACtBiB,EAAOjB,EAAS,CAAC,GAAK,GACtBiB,EAAOjB,EAAS,CAAC,GAAK,EAC9B,EACD,YAAYiB,EAAQjB,EAAQ,CACxB,OAAQiB,EAAOjB,CAAM,EACjBiB,EAAOjB,EAAS,CAAC,EAAI,IACrBiB,EAAOjB,EAAS,CAAC,EAAI,MACrBiB,EAAOjB,EAAS,CAAC,EAAI,QAC5B,EACD,YAAYiB,EAAQjB,EAAQ,CACxB,OAAQiB,EAAOjB,EAAS,CAAC,EACrBiB,EAAOjB,EAAS,CAAC,EAAI,IACrBiB,EAAOjB,EAAS,CAAC,EAAI,MACrBiB,EAAOjB,CAAM,EAAI,QACxB,EACD,cAAciB,EAAQjB,EAAQ,CAC1B,MAAMsE,EAAK,OAAOrD,EAAOjB,EAAS,CAAC,EAC/BiB,EAAOjB,EAAS,CAAC,EAAI,IACrBiB,EAAOjB,EAAS,CAAC,EAAI,OACpBiB,EAAOjB,EAAS,CAAC,GAAK,GAAG,EACxBuE,EAAK,OAAOtD,EAAOjB,CAAM,EAC3BiB,EAAOjB,EAAS,CAAC,EAAI,IACrBiB,EAAOjB,EAAS,CAAC,EAAI,MACrBiB,EAAOjB,EAAS,CAAC,EAAI,QAAQ,EACjC,OAAQsE,GAAM,OAAO,EAAE,GAAKC,CAC/B,EACD,aAAcH,GACR,CAACnD,EAAQjB,KACPmE,EAAY,CAAC,EAAIlD,EAAOjB,CAAM,EAC9BmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAC3BkE,GAAM,CAAC,GAEhB,CAACjD,EAAQjB,KACPmE,EAAY,CAAC,EAAIlD,EAAOjB,CAAM,EAC9BmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAClCmE,EAAY,CAAC,EAAIlD,EAAOjB,EAAS,CAAC,EAC3BkE,GAAM,CAAC,GAEtB,WAAWlD,EAAahB,EAAQpD,EAAO,CACnC,OAAAoE,EAAYhB,EAAS,CAAC,EAAIpD,EAC1BA,KAAW,EACXoE,EAAYhB,EAAS,CAAC,EAAIpD,EAC1BA,KAAW,EACXoE,EAAYhB,EAAS,CAAC,EAAIpD,EAC1BA,KAAW,EACXoE,EAAYhB,CAAM,EAAIpD,EACf,CACV,EACD,WAAWoE,EAAahB,EAAQpD,EAAO,CACnC,OAAAoE,EAAYhB,CAAM,EAAIpD,EACtBA,KAAW,EACXoE,EAAYhB,EAAS,CAAC,EAAIpD,EAC1BA,KAAW,EACXoE,EAAYhB,EAAS,CAAC,EAAIpD,EAC1BA,KAAW,EACXoE,EAAYhB,EAAS,CAAC,EAAIpD,EACnB,CACV,EACD,cAAcoE,EAAahB,EAAQpD,EAAO,CACtC,MAAM4H,EAAa,OAAO,UAAW,EACrC,IAAID,EAAK,OAAO3H,EAAQ4H,CAAU,EAClCxD,EAAYhB,CAAM,EAAIuE,EACtBA,IAAO,EACPvD,EAAYhB,EAAS,CAAC,EAAIuE,EAC1BA,IAAO,EACPvD,EAAYhB,EAAS,CAAC,EAAIuE,EAC1BA,IAAO,EACPvD,EAAYhB,EAAS,CAAC,EAAIuE,EAC1B,IAAID,EAAK,OAAQ1H,GAAS,OAAO,EAAE,EAAK4H,CAAU,EAClD,OAAAxD,EAAYhB,EAAS,CAAC,EAAIsE,EAC1BA,IAAO,EACPtD,EAAYhB,EAAS,CAAC,EAAIsE,EAC1BA,IAAO,EACPtD,EAAYhB,EAAS,CAAC,EAAIsE,EAC1BA,IAAO,EACPtD,EAAYhB,EAAS,CAAC,EAAIsE,EACnB,CACV,EACD,aAAcF,GACR,CAACpD,EAAahB,EAAQpD,KACpBsH,GAAM,CAAC,EAAItH,EACXoE,EAAYhB,CAAM,EAAImE,EAAY,CAAC,EACnCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EAChC,GAET,CAACnD,EAAahB,EAAQpD,KACpBsH,GAAM,CAAC,EAAItH,EACXoE,EAAYhB,CAAM,EAAImE,EAAY,CAAC,EACnCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EACvCnD,EAAYhB,EAAS,CAAC,EAAImE,EAAY,CAAC,EAChC,EAEnB,EAEA,MAAMM,UAAeV,CAAU,CAC3B,IAAI,WAAY,CACZ,MAAO,QACf,CACI,YAAY3D,EAAQsE,EAAS,CAEzB,GADA,MAAO,EACDtE,GAAU,MACZ,OAAOA,GAAW,UAClB,CAAC,YAAY,OAAOA,CAAM,GAC1B,CAACtD,GAAiBsD,CAAM,GACxB,CAAC,MAAM,QAAQA,CAAM,EACrB,MAAM,IAAIT,EAAU,4DAA4D,EAEpF,KAAK,SAAW+E,GAAWD,EAAO,4BAC9BrE,GAAU,MACV,KAAK,OAAS0D,EAAU,SAASW,EAAO,WAAW,EACnD,KAAK,SAAW,IAGhB,KAAK,OAAS,MAAM,QAAQrE,CAAM,EAC5B0D,EAAU,gBAAgB1D,CAAM,EAChC0D,EAAU,kBAAkB1D,CAAM,EACxC,KAAK,SAAW,KAAK,OAAO,WAExC,CACI,IAAIuE,EAAW,CACX,GAAI,OAAOA,GAAc,UAAYA,EAAU,SAAW,EACtD,MAAM,IAAIhF,EAAU,sCAAsC,EAEzD,GAAI,OAAOgF,GAAc,UAAYA,EAAU,SAAW,EAC3D,MAAM,IAAIhF,EAAU,mDAAmD,EAC3E,IAAIiF,EAUJ,GATI,OAAOD,GAAc,SACrBC,EAAcD,EAAU,WAAW,CAAC,EAE/B,OAAOA,GAAc,SAC1BC,EAAcD,EAGdC,EAAcD,EAAU,CAAC,EAEzBC,EAAc,GAAKA,EAAc,IACjC,MAAM,IAAIjF,EAAU,0DAA0D,EAElF,GAAI,KAAK,OAAO,WAAa,KAAK,SAC9B,KAAK,OAAO,KAAK,UAAU,EAAIiF,MAE9B,CACD,MAAMC,EAAWf,EAAU,SAASW,EAAO,YAAc,KAAK,OAAO,MAAM,EAC3EI,EAAS,IAAI,KAAK,OAAQ,CAAC,EAC3B,KAAK,OAASA,EACd,KAAK,OAAO,KAAK,UAAU,EAAID,CAC3C,CACA,CACI,MAAME,EAAU9E,EAAQ,CAEpB,GADAA,EAAS,OAAOA,GAAW,SAAWA,EAAS,KAAK,SAChD,KAAK,OAAO,WAAaA,EAAS8E,EAAS,OAAQ,CACnD,MAAMD,EAAWf,EAAU,SAAS,KAAK,OAAO,WAAagB,EAAS,MAAM,EAC5ED,EAAS,IAAI,KAAK,OAAQ,CAAC,EAC3B,KAAK,OAASA,CAC1B,CACQ,GAAI,YAAY,OAAOC,CAAQ,EAC3B,KAAK,OAAO,IAAIhB,EAAU,kBAAkBgB,CAAQ,EAAG9E,CAAM,EAC7D,KAAK,SACDA,EAAS8E,EAAS,WAAa,KAAK,SAAW9E,EAAS8E,EAAS,OAAS,KAAK,iBAE9E,OAAOA,GAAa,SACzB,MAAM,IAAInF,EAAU,wBAAwB,CAExD,CACI,KAAKoF,EAAUC,EAAQ,CACnBA,EAASA,GAAUA,EAAS,EAAIA,EAAS,KAAK,SAC9C,MAAM1E,EAAMyE,EAAWC,EACvB,OAAO,KAAK,OAAO,SAASD,EAAUzE,EAAM,KAAK,SAAW,KAAK,SAAWA,CAAG,CACvF,CACI,OAAQ,CACJ,OAAO,KAAK,OAAO,SAAW,KAAK,SAC7B,KAAK,OACL,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CACnD,CACI,QAAS,CACL,OAAO,KAAK,QACpB,CACI,QAAS,CACL,OAAOwD,EAAU,SAAS,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CAAC,CACxE,CACI,SAASmB,EAAU,CACf,OAAIA,IAAa,MACNnB,EAAU,MAAM,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CAAC,EAC7DmB,IAAa,SACNnB,EAAU,SAAS,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CAAC,EAChEmB,IAAa,QAAUA,IAAa,QAC7BnB,EAAU,OAAO,KAAK,OAAQ,EAAG,KAAK,SAAU,EAAK,EACzDA,EAAU,OAAO,KAAK,OAAQ,EAAG,KAAK,SAAU,EAAK,CACpE,CACI,eAAepG,EAAS,CACpBA,EAAUA,GAAW,CAAE,EACnB,KAAK,WAAa+G,EAAO,gBACzBS,GAAqB,IAAI,EAE7B,MAAMC,EAAerB,EAAU,SAAS,KAAK,MAAM,EAC7CY,EAAU,OAAO,KAAK,QAAQ,EAAE,SAAS,EAAE,EACjD,OAAIhH,EAAQ,OACD,CACH,QAASyH,EACT,MAAOT,EAAQ,SAAW,EAAI,IAAMA,EAAUA,CACjD,EAEE,CACH,QAAS,CACL,OAAQS,EACR,QAAST,EAAQ,SAAW,EAAI,IAAMA,EAAUA,CAChE,CACS,CACT,CACI,QAAS,CACL,GAAI,KAAK,WAAaD,EAAO,aACzB,OAAO,IAAIW,EAAK,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CAAC,EAE1D,MAAM,IAAIzF,EAAU,oBAAoB,KAAK,QAAQ,oDAAoD8E,EAAO,YAAY,2BAA2B,CAC/J,CACI,OAAO,oBAAoBrC,EAAKsC,EAAS,CACrC,OAAO,IAAID,EAAOX,EAAU,QAAQ1B,CAAG,EAAGsC,CAAO,CACzD,CACI,OAAO,iBAAiBxC,EAAQwC,EAAS,CACrC,OAAO,IAAID,EAAOX,EAAU,WAAW5B,CAAM,EAAGwC,CAAO,CAC/D,CACI,OAAO,iBAAiBW,EAAK3H,EAAS,CAClCA,EAAUA,GAAW,CAAE,EACvB,IAAI4H,EACAC,EAiBJ,GAhBI,YAAaF,EACT3H,EAAQ,QAAU,OAAO2H,EAAI,SAAY,UAAY,UAAWA,GAChEE,EAAOF,EAAI,MAAQ,SAASA,EAAI,MAAO,EAAE,EAAI,EAC7CC,EAAOxB,EAAU,WAAWuB,EAAI,OAAO,GAGnC,OAAOA,EAAI,SAAY,WACvBE,EAAOF,EAAI,QAAQ,QAAU,SAASA,EAAI,QAAQ,QAAS,EAAE,EAAI,EACjEC,EAAOxB,EAAU,WAAWuB,EAAI,QAAQ,MAAM,GAIjD,UAAWA,IAChBE,EAAO,EACPD,EAAOF,EAAK,gBAAgBC,EAAI,KAAK,GAErC,CAACC,EACD,MAAM,IAAI3F,EAAU,0CAA0C,KAAK,UAAU0F,CAAG,CAAC,EAAE,EAEvF,OAAOE,IAAS9F,GAA+B,IAAI2F,EAAKE,CAAI,EAAI,IAAIb,EAAOa,EAAMC,CAAI,CAC7F,CACI,QAAQvB,EAAOtG,EAASuG,EAAS,CAC7BA,IAAY7G,EACZ,MAAM8E,EAAS4B,EAAU,SAAS,KAAK,OAAO,SAAS,EAAG,KAAK,QAAQ,CAAC,EAClE0B,EAAYvB,EAAQ/B,EAAQxE,CAAO,EACnC+H,EAAaxB,EAAQ,KAAK,SAAUvG,CAAO,EACjD,MAAO,2BAA2B8H,CAAS,KAAKC,CAAU,GAClE,CACI,aAAc,CACV,GAAI,KAAK,WAAahB,EAAO,eACzB,MAAM,IAAI9E,EAAU,+BAA+B,EAEvD,GAAI,KAAK,OAAO,CAAC,IAAM8E,EAAO,YAAY,KACtC,MAAM,IAAI9E,EAAU,mCAAmC,EAE3D,OAAO,IAAI,UAAU,KAAK,OAAO,OAAO,MAAM,KAAK,OAAO,WAAa,EAAG,KAAK,OAAO,WAAa,KAAK,QAAQ,CAAC,CACzH,CACI,gBAAiB,CACb,GAAI,KAAK,WAAa8E,EAAO,eACzB,MAAM,IAAI9E,EAAU,+BAA+B,EAEvD,GAAI,KAAK,OAAO,CAAC,IAAM8E,EAAO,YAAY,QACtC,MAAM,IAAI9E,EAAU,sCAAsC,EAE9D,MAAM+F,EAAa,IAAI,WAAW,KAAK,OAAO,OAAO,MAAM,KAAK,OAAO,WAAa,EAAG,KAAK,OAAO,WAAa,KAAK,QAAQ,CAAC,EAC9H,OAAIrB,EAAY,aACZP,EAAU,OAAO4B,CAAU,EACxB,IAAI,aAAaA,EAAW,MAAM,CACjD,CACI,cAAe,CACX,GAAI,KAAK,WAAajB,EAAO,eACzB,MAAM,IAAI9E,EAAU,+BAA+B,EAEvD,GAAI,KAAK,OAAO,CAAC,IAAM8E,EAAO,YAAY,UACtC,MAAM,IAAI9E,EAAU,yCAAyC,EAEjE,OAAO,IAAI,WAAW,KAAK,OAAO,OAAO,MAAM,KAAK,OAAO,WAAa,EAAG,KAAK,OAAO,WAAa,KAAK,QAAQ,CAAC,CAC1H,CACI,QAAS,CACL,GAAI,KAAK,WAAa8E,EAAO,eACzB,MAAM,IAAI9E,EAAU,+BAA+B,EAEvD,GAAI,KAAK,OAAO,CAAC,IAAM8E,EAAO,YAAY,UACtC,MAAM,IAAI9E,EAAU,yCAAyC,EAGjE,MAAMgG,GADY,KAAK,OAAM,EAAK,GACL,EAAI,KAAK,OAAO,CAAC,EACxCC,EAAO,IAAI,UAAUD,CAAQ,EACnC,QAASE,EAAY,EAAGA,EAAYD,EAAK,OAAQC,IAAa,CAC1D,MAAMrD,EAAcqD,EAAY,EAAK,EAC/B/E,EAAO,KAAK,OAAO0B,EAAa,CAAC,EACjCsD,EAAQ,EAAKD,EAAY,EACzBE,EAAOjF,GAAQgF,EAAS,EAC9BF,EAAKC,CAAS,EAAIE,CAC9B,CACQ,OAAOH,CACf,CACI,OAAO,cAAc3D,EAAO,CACxB,MAAM7B,EAAS0D,EAAU,SAAS7B,EAAM,WAAa,CAAC,EACtD7B,EAAO,CAAC,EAAIqE,EAAO,YAAY,KAC/BrE,EAAO,CAAC,EAAI,EACZ,MAAM4F,EAAW,IAAI,WAAW/D,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAChF,OAAA7B,EAAO,IAAI4F,EAAU,CAAC,EACf,IAAI,KAAK5F,EAAQ,KAAK,cAAc,CACnD,CACI,OAAO,iBAAiB6B,EAAO,CAC3B,MAAMgE,EAAcnC,EAAU,SAAS7B,EAAM,WAAa,CAAC,EAC3DgE,EAAY,CAAC,EAAIxB,EAAO,YAAY,QACpCwB,EAAY,CAAC,EAAI,EACjB,MAAMP,EAAa,IAAI,WAAWzD,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAClF,OAAAgE,EAAY,IAAIP,EAAY,CAAC,EACzBrB,EAAY,aACZP,EAAU,OAAO,IAAI,WAAWmC,EAAY,OAAQ,CAAC,CAAC,EACnD,IAAI,KAAKA,EAAa,KAAK,cAAc,CACxD,CACI,OAAO,eAAehE,EAAOiE,EAAU,EAAG,CACtC,MAAM9F,EAAS0D,EAAU,SAAS7B,EAAM,WAAa,CAAC,EACtD,OAAA7B,EAAO,CAAC,EAAIqE,EAAO,YAAY,UAC/BrE,EAAO,CAAC,EAAI8F,EACZ9F,EAAO,IAAI6B,EAAO,CAAC,EACZ,IAAI,KAAK7B,EAAQ,KAAK,cAAc,CACnD,CACI,OAAO,SAASwF,EAAM,CAClB,MAAMtE,EAAcsE,EAAK,OAAS,IAAO,EACnCpC,EAAQ,IAAI,WAAWlC,EAAa,CAAC,EAC3CkC,EAAM,CAAC,EAAIiB,EAAO,YAAY,UAC9B,MAAM0B,EAAYP,EAAK,OAAS,EAChCpC,EAAM,CAAC,EAAI2C,IAAc,EAAI,EAAI,EAAIA,EACrC,QAASN,EAAY,EAAGA,EAAYD,EAAK,OAAQC,IAAa,CAC1D,MAAMrD,EAAaqD,IAAc,EAC3BE,EAAMH,EAAKC,CAAS,EAC1B,GAAIE,IAAQ,GAAKA,IAAQ,EACrB,MAAM,IAAIpG,EAAU,wBAAwBkG,CAAS,2BAA2BD,EAAKC,CAAS,CAAC,EAAE,EAErG,GAAIE,IAAQ,EACR,SACJ,MAAMD,EAAQ,EAAKD,EAAY,EAC/BrC,EAAMhB,EAAa,CAAC,GAAKuD,GAAOD,CAC5C,CACQ,OAAO,IAAI,KAAKtC,EAAOiB,EAAO,cAAc,CACpD,CACA,CACAA,EAAO,4BAA8B,EACrCA,EAAO,YAAc,IACrBA,EAAO,gBAAkB,EACzBA,EAAO,iBAAmB,EAC1BA,EAAO,mBAAqB,EAC5BA,EAAO,iBAAmB,EAC1BA,EAAO,aAAe,EACtBA,EAAO,YAAc,EACrBA,EAAO,kBAAoB,EAC3BA,EAAO,eAAiB,EACxBA,EAAO,kBAAoB,EAC3BA,EAAO,eAAiB,EACxBA,EAAO,qBAAuB,IAC9BA,EAAO,YAAc,OAAO,OAAO,CAC/B,KAAM,EACN,QAAS,GACT,UAAW,EACf,CAAC,EACD,SAASS,GAAqBkB,EAAQ,CAClC,GAAIA,EAAO,WAAa3B,EAAO,eAC3B,OACJ,MAAM3C,EAAOsE,EAAO,SACdC,EAAWD,EAAO,OAAO,CAAC,EAC1BF,EAAUE,EAAO,OAAO,CAAC,EAC/B,IAAKC,IAAa5B,EAAO,YAAY,SAAW4B,IAAa5B,EAAO,YAAY,OAC5EyB,IAAY,EACZ,MAAM,IAAIvG,EAAU,mEAAmE,EAE3F,GAAI0G,IAAa5B,EAAO,YAAY,WAAayB,IAAY,GAAKpE,IAAS,EACvE,MAAM,IAAInC,EAAU,4EAA4E,EAEpG,GAAI0G,IAAa5B,EAAO,YAAY,WAAayB,EAAU,EACvD,MAAM,IAAIvG,EAAU,mEAAmEuG,CAAO,EAAE,CAExG,CACA,MAAMI,GAAmB,GACnBC,GAAsB,kBACtBC,GAAmB,kEACzB,MAAMpB,UAAaX,CAAO,CACtB,YAAYlC,EAAO,CACf,IAAIiB,EACJ,GAAIjB,GAAS,KACTiB,EAAQ4B,EAAK,SAAU,UAElB7C,aAAiB6C,EACtB5B,EAAQM,EAAU,kBAAkB,IAAI,WAAWvB,EAAM,MAAM,CAAC,UAE3D,YAAY,OAAOA,CAAK,GAAKA,EAAM,aAAe+D,GACvD9C,EAAQM,EAAU,kBAAkBvB,CAAK,UAEpC,OAAOA,GAAU,SACtBiB,EAAQ4B,EAAK,gBAAgB7C,CAAK,MAGlC,OAAM,IAAI5C,EAAU,gLAAgL,EAExM,MAAM6D,EAAO/D,EAA4B,CACjD,CACI,IAAI,IAAK,CACL,OAAO,KAAK,MACpB,CACI,IAAI,GAAG7C,EAAO,CACV,KAAK,OAASA,CACtB,CACI,YAAY6J,EAAgB,GAAM,CAC9B,OAAIA,EACO,CACH3C,EAAU,MAAM,KAAK,OAAO,SAAS,EAAG,CAAC,CAAC,EAC1CA,EAAU,MAAM,KAAK,OAAO,SAAS,EAAG,CAAC,CAAC,EAC1CA,EAAU,MAAM,KAAK,OAAO,SAAS,EAAG,CAAC,CAAC,EAC1CA,EAAU,MAAM,KAAK,OAAO,SAAS,EAAG,EAAE,CAAC,EAC3CA,EAAU,MAAM,KAAK,OAAO,SAAS,GAAI,EAAE,CAAC,CAC5D,EAAc,KAAK,GAAG,EAEPA,EAAU,MAAM,KAAK,MAAM,CAC1C,CACI,SAASmB,EAAU,CACf,OAAIA,IAAa,MACNnB,EAAU,MAAM,KAAK,EAAE,EAC9BmB,IAAa,SACNnB,EAAU,SAAS,KAAK,EAAE,EAC9B,KAAK,YAAa,CACjC,CACI,QAAS,CACL,OAAO,KAAK,YAAa,CACjC,CACI,OAAO4C,EAAS,CACZ,GAAI,CAACA,EACD,MAAO,GAEX,GAAIA,aAAmBtB,EACnB,OAAOtB,EAAU,OAAO4C,EAAQ,GAAI,KAAK,EAAE,EAE/C,GAAI,CACA,OAAO5C,EAAU,OAAO,IAAIsB,EAAKsB,CAAO,EAAE,GAAI,KAAK,EAAE,CACjE,MACc,CACF,MAAO,EACnB,CACA,CACI,UAAW,CACP,OAAO,IAAIjC,EAAO,KAAK,GAAIA,EAAO,YAAY,CACtD,CACI,OAAO,UAAW,CACd,MAAMjB,EAAQM,EAAU,YAAYwC,EAAgB,EACpD,OAAA9C,EAAM,CAAC,EAAKA,EAAM,CAAC,EAAI,GAAQ,GAC/BA,EAAM,CAAC,EAAKA,EAAM,CAAC,EAAI,GAAQ,IACxBA,CACf,CACI,OAAO,QAAQjB,EAAO,CAClB,OAAKA,EAGD,OAAOA,GAAU,SACV6C,EAAK,kBAAkB7C,CAAK,EAEnC1F,GAAa0F,CAAK,EACXA,EAAM,aAAe+D,GAExB/D,EAAM,YAAc,UACxBA,EAAM,WAAa,KAAK,cACxBA,EAAM,OAAO,aAAe,GAVrB,EAWnB,CACI,OAAO,oBAAoBoE,EAAW,CAClC,MAAMvG,EAASgF,EAAK,gBAAgBuB,CAAS,EAC7C,OAAO,IAAIvB,EAAKhF,CAAM,CAC9B,CACI,OAAO,iBAAiB8B,EAAQ,CAC5B,OAAO,IAAIkD,EAAKtB,EAAU,WAAW5B,CAAM,CAAC,CACpD,CACI,OAAO,gBAAgB0E,EAAgB,CACnC,GAAI,CAACxB,EAAK,kBAAkBwB,CAAc,EACtC,MAAM,IAAIjH,EAAU,yFAAyF,EAEjH,OAAOmE,EAAU,QAAQ8C,EAAe,QAAQ,KAAM,EAAE,CAAC,CACjE,CACI,OAAO,kBAAkBA,EAAgB,CACrC,OAAOL,GAAoB,KAAKK,CAAc,GAAKJ,GAAiB,KAAKI,CAAc,CAC/F,CACI,QAAQ5C,EAAOtG,EAASuG,EAAS,CAC7B,OAAAA,IAAY7G,EACL,YAAY6G,EAAQ,KAAK,cAAevG,CAAO,CAAC,GAC/D,CACA,CAEA,MAAMmJ,UAAa9C,CAAU,CACzB,IAAI,WAAY,CACZ,MAAO,MACf,CACI,YAAY+C,EAAMC,EAAO,CACrB,MAAO,EACP,KAAK,KAAOD,EAAK,SAAU,EAC3B,KAAK,MAAQC,GAAS,IAC9B,CACI,QAAS,CACL,OAAI,KAAK,OAAS,KACP,CAAE,KAAM,KAAK,KAAM,MAAO,KAAK,KAAO,EAE1C,CAAE,KAAM,KAAK,IAAM,CAClC,CACI,gBAAiB,CACb,OAAI,KAAK,MACE,CAAE,MAAO,KAAK,KAAM,OAAQ,KAAK,KAAO,EAE5C,CAAE,MAAO,KAAK,IAAM,CACnC,CACI,OAAO,iBAAiB1B,EAAK,CACzB,OAAO,IAAIwB,EAAKxB,EAAI,MAAOA,EAAI,MAAM,CAC7C,CACI,QAAQrB,EAAOtG,EAASuG,EAAS,CAC7BA,IAAY7G,EACZ,IAAI4J,EAAmB/C,EAAQ,KAAK,KAAMvG,CAAO,EACjD,MAAMuJ,EAAcD,EAAiB,SAAS;AAAA,CAAI,EAC9C,KAAK,OAAS,OACdA,GAAoB,IAAIC,EAAc;AAAA,EAAO,GAAG,GAAGhD,EAAQ,KAAK,MAAOvG,CAAO,CAAC,IAEnF,MAAMwJ,EAAgBD,GAAe,KAAK,QAAU,KACpD,MAAO,YAAYA,EAAc;AAAA,EAAO,EAAE,GAAGD,CAAgB,GAAGE,EAAgB;AAAA,EAAO,EAAE,GACjG,CACA,CAEA,SAASC,GAAYvK,EAAO,CACxB,OAAQA,GAAS,MACb,OAAOA,GAAU,UACjB,QAASA,GACTA,EAAM,KAAO,MACb,SAAUA,GACV,OAAOA,EAAM,MAAS,WACrB,EAAE,QAASA,IAAW,QAASA,GAAS,OAAOA,EAAM,KAAQ,SACtE,CACA,MAAMwK,UAAcrD,CAAU,CAC1B,IAAI,WAAY,CACZ,MAAO,OACf,CACI,YAAYsD,EAAYC,EAAKC,EAAIC,EAAQ,CACrC,MAAO,EACP,MAAMC,EAAQJ,EAAW,MAAM,GAAG,EAC9BI,EAAM,SAAW,IACjBF,EAAKE,EAAM,MAAO,EAClBJ,EAAaI,EAAM,MAAO,GAE9B,KAAK,WAAaJ,EAClB,KAAK,IAAMC,EACX,KAAK,GAAKC,EACV,KAAK,OAASC,GAAU,CAAE,CAClC,CACI,IAAI,WAAY,CACZ,OAAO,KAAK,UACpB,CACI,IAAI,UAAU5K,EAAO,CACjB,KAAK,WAAaA,CAC1B,CACI,QAAS,CACL,MAAM8K,EAAI,OAAO,OAAO,CACpB,KAAM,KAAK,WACX,IAAK,KAAK,GACtB,EAAW,KAAK,MAAM,EACd,OAAI,KAAK,IAAM,OACXA,EAAE,IAAM,KAAK,IACVA,CACf,CACI,eAAehK,EAAS,CACpBA,EAAUA,GAAW,CAAE,EACvB,IAAIgK,EAAI,CACJ,KAAM,KAAK,WACX,IAAK,KAAK,GACb,EACD,OAAIhK,EAAQ,SAGR,KAAK,KACLgK,EAAE,IAAM,KAAK,IACjBA,EAAI,OAAO,OAAOA,EAAG,KAAK,MAAM,GACzBA,CACf,CACI,OAAO,iBAAiBrC,EAAK,CACzB,MAAMsC,EAAO,OAAO,OAAO,GAAItC,CAAG,EAClC,cAAOsC,EAAK,KACZ,OAAOA,EAAK,IACZ,OAAOA,EAAK,IACL,IAAIP,EAAM/B,EAAI,KAAMA,EAAI,IAAKA,EAAI,IAAKsC,CAAI,CACzD,CACI,QAAQ3D,EAAOtG,EAASuG,EAAS,CAC7BA,IAAY7G,EACZ,MAAMwK,EAAO,CACT3D,EAAQ,KAAK,UAAWvG,CAAO,EAC/BuG,EAAQ,KAAK,IAAKvG,CAAO,EACzB,GAAI,KAAK,GAAK,CAACuG,EAAQ,KAAK,GAAIvG,CAAO,CAAC,EAAI,GAC5C,GAAI,OAAO,KAAK,KAAK,MAAM,EAAE,OAAS,EAAI,CAACuG,EAAQ,KAAK,OAAQvG,CAAO,CAAC,EAAI,CAAE,CACjF,EACD,OAAAkK,EAAK,CAAC,EAAI3D,IAAY7G,EAAiB,gBAAgBwK,EAAK,CAAC,CAAC,IAAMA,EAAK,CAAC,EACnE,aAAaA,EAAK,KAAK,IAAI,CAAC,GAC3C,CACA,CAEA,SAASC,GAAkCC,EAAK,CAC5C,GAAIA,IAAQ,GACR,OAAOA,EAEX,IAAIC,EAAa,EACjB,MAAMC,EAAaF,EAAIC,CAAU,IAAM,IACjCE,EAAuBH,EAAIC,CAAU,IAAM,KAC7CE,GAAwBD,KACxBD,GAAc,GAElB,IAAIG,EAAyB,GAC7B,KAAOH,EAAaD,EAAI,QAAUA,EAAIC,CAAU,IAAM,IAAK,EAAEA,EACzDG,EAAyB,GAE7B,OAAKA,EAGE,GAAGF,EAAa,IAAM,EAAE,GAAGF,EAAI,SAAWC,EAAa,IAAMD,EAAI,MAAMC,CAAU,CAAC,GAF9EE,EAAuBH,EAAI,MAAM,CAAC,EAAIA,CAGrD,CACA,SAASK,GAAyBL,EAAKM,EAAO,CAC1CA,EAAQA,GAAS,GACjB,MAAMC,EAAkB,uCAAuC,MAAM,EAAGD,CAAK,EAE7E,OADc,IAAI,OAAO,OAAOC,CAAe,IAAK,GAAG,EAC1C,KAAKP,CAAG,EAAI,GAAQA,CACrC,CAEA,IAAIQ,EACJ,GAAI,CACAA,EAAO,IAAI,YAAY,SAAS,IAAI,YAAY,OAAO,IAAI,WAAW,CAAC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IA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","names":["TypedArrayPrototypeGetSymbolToStringTag","g","value","isUint8Array","isAnyArrayBuffer","isRegExp","regexp","isMap","isDate","date","defaultInspect","x","_options","k","v","getStylizeFunction","options","BSON_MAJOR_VERSION","BSON_VERSION_SYMBOL","BSON_INT32_MAX","BSON_INT32_MIN","BSON_INT64_MAX","BSON_INT64_MIN","JS_INT_MAX","JS_INT_MIN","BSON_DATA_NUMBER","BSON_DATA_STRING","BSON_DATA_OBJECT","BSON_DATA_ARRAY","BSON_DATA_BINARY","BSON_DATA_UNDEFINED","BSON_DATA_OID","BSON_DATA_BOOLEAN","BSON_DATA_DATE","BSON_DATA_NULL","BSON_DATA_REGEXP","BSON_DATA_DBPOINTER","BSON_DATA_CODE","BSON_DATA_SYMBOL","BSON_DATA_CODE_W_SCOPE","BSON_DATA_INT","BSON_DATA_TIMESTAMP","BSON_DATA_LONG","BSON_DATA_DECIMAL128","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","BSON_BINARY_SUBTYPE_DEFAULT","BSON_BINARY_SUBTYPE_UUID_NEW","BSONType","BSONError","message","BSONVersionError","BSONRuntimeError","BSONOffsetError","offset","TextDecoderFatal","TextDecoderNonFatal","parseUtf8","buffer","start","end","fatal","cause","tryReadBasicLatin","uint8array","stringByteLength","latinBytes","i","byte","tryWriteBasicLatin","destination","source","charOffset","destinationOffset","char","nodejsMathRandomBytes","byteLength","nodeJsByteUtils","nodejsRandomBytes","__vitePreload","randomBytes","__viteBrowserExternal","potentialBuffer","stringTag","size","a","b","array","base64","codePoints","hex","basicLatin","string","input","byteOffset","latinBytesWritten","isReactNative","navigator","webMathRandomBytes","webByteUtils","webRandomBytes","crypto","console","HEX_DIGIT","potentialUint8array","c","evenLengthHex","firstDigit","secondDigit","hexDigit","bytes","byte0","byte1","byte2","byte3","hasGlobalBuffer","ByteUtils","BSONValue","depth","inspect","FLOAT","FLOAT_BYTES","isBigEndian","NumberUtils","hi","lo","mask32bits","Binary","subType","byteValue","decodedByte","newSpace","sequence","position","length","encoding","validateBinaryVector","base64String","UUID","doc","data","type","base64Arg","subTypeArg","floatBytes","bitCount","bits","bitOffset","shift","bit","intBytes","binaryBytes","padding","remainder","vector","datatype","UUID_BYTE_LENGTH","UUID_WITHOUT_DASHES","UUID_WITH_DASHES","includeDashes","otherId","hexString","representation","Code","code","scope","parametersString","multiLineFn","endingNewline","isDBRefLike","DBRef","collection","oid","db","fields","parts","o","copy","args","removeLeadingZerosAndExplicitPlus","str","startIndex","isNegative","isExplicitlyPositive","foundInsignificantZero","validateStringCharacters","radix","validCharacters","wasm","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_32_DBL","TWO_PWR_64_DBL","TWO_PWR_63_DBL","INT_CACHE","UINT_CACHE","MAX_INT64_STRING_LENGTH","DECIMAL_REG_EX","Long","lowOrValue","highOrUnsigned","unsigned","unsignedBool","high","res","lowBits","highBits","obj","cachedObj","cache","FROM_BIGINT_BIT_MASK","FROM_BIGINT_BIT_SHIFT","p","radixToPower","result","power","unsignedOrRadix","cleanedStr","le","val","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","other","thisNeg","otherNeg","divisor","low","approx","rem","log2","delta","approxRes","approxRem","multiplier","numBits","subtrahend","radixLong","div","rem1","remDiv","digits","useBigInt64","relaxed","bigIntResult","longResult","longVal","unsignedVal","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","EXPONENT_MAX","EXPONENT_MIN","EXPONENT_BIAS","MAX_DIGITS","NAN_BUFFER","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","COMBINATION_MASK","EXPONENT_MASK","COMBINATION_INFINITY","COMBINATION_NAN","isDigit","divideu128","DIVISOR","_rem","multiply64x2","left","right","leftHigh","leftLow","rightHigh","rightLow","productHigh","productMid","productMid2","productLow","lessThan","uhleft","uhright","ulleft","ulright","invalidErr","Decimal128","sawSign","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","nDigitsStored","digitsInsert","lastDigit","exponent","significandHigh","significandLow","biasedExponent","index","stringMatch","infMatch","nanMatch","unsignedNumber","e","expSign","expNumber","match","endOfString","roundDigit","roundBit","dIdx","significand","dec","biased_exponent","significand_digits","is_zero","significand_msb","significand128","j","midl","midh","combination","least_digits","scientific_exponent","radix_position","Double","coercedValue","doubleValue","Int32","cleanedValue","MaxKey","MinKey","PROCESS_UNIQUE","__idCache","ObjectId","inputId","workingId","__id","time","inc","variable","otherIdString","thisIdString","timestamp","id","internalCalculateObjectSize","object","serializeFunctions","ignoreUndefined","totalLength","calculateElement","key","name","isArray","binary","ordered_values","alphabetize","BSONRegExp","pattern","stylize","flags","BSONSymbol","LongWithoutOverridesClass","Timestamp","t","optRadix","JS_INT_MAX_LONG","JS_INT_MIN_LONG","internalDeserialize","deserializeObject","allowedDBRefKeys","fieldsAsRaw","raw","bsonRegExp","promoteBuffers","promoteLongs","promoteValues","validation","globalUTFValidation","validationSetting","utf8KeysSet","utf8ValidatedKeys","utf8ValidationValues","item","arrayIndex","isPossibleDBRef","elementType","shouldValidateKey","stringSize","_index","objectSize","objectOptions","arrayOptions","stopIndex","long","binarySize","totalBinarySize","regExpOptions","optionsArray","symbol","functionString","totalSize","scopeObject","namespace","oidBuffer","ignoreKeys","serializeString","numberOfWrittenBytes","serializeNumber","serializeBigInt","serializeNull","_","serializeBoolean","serializeDate","dateInMilis","serializeRegExp","serializeBSONRegExp","sortedOptions","serializeMinMax","serializeObjectId","serializeBuffer","serializeObject","checkKeys","path","endIndex","serializeInto","serializeDecimal128","serializeLong","serializeInt32","serializeDouble","serializeFunction","serializeCode","codeSize","serializeBinary","serializeSymbol","serializeDBRef","output","startingIndex","iterator","done","entry","isBSONType","keysToCodecs","deserializeValue","in32BitRange","in64BitRange","keys","d","dollarKeys","valid","serializeArray","serializeValue","getISOString","isoStr","props","leadingPart","prop","alreadySeen","circularPart","current","leadingSpace","dashes","dateNum","inRange","serializeDocument","BSON_TYPE_MAPPINGS","bsontype","_doc","outDoc","mapper","parse","text","ejsonOptions","stringify","replacer","space","serializeOptions","EJSONserialize","EJSONdeserialize","ejson","EJSON","getSize","findNull","nullTerminatorOffset","parseToElements","startOffset","documentSize","elements","nameOffset","nameLength","onDemand","MAXSIZE","setInternalBufferSize","serialize","minInternalBufferSize","serializationIndex","finishedBuffer","serializeWithBufferAndIndex","finalBuffer","deserialize","calculateObjectSize","deserializeStream","numberOfDocuments","documents","docStartIndex","internalOptions","bufferData","bson"],"ignoreList":[0],"sources":["../../node_modules/bson/lib/bson.mjs"],"sourcesContent":["const TypedArrayPrototypeGetSymbolToStringTag = (() => {\n    const g = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array.prototype), Symbol.toStringTag).get;\n    return (value) => g.call(value);\n})();\nfunction isUint8Array(value) {\n    return TypedArrayPrototypeGetSymbolToStringTag(value) === 'Uint8Array';\n}\nfunction isAnyArrayBuffer(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.toStringTag in value &&\n        (value[Symbol.toStringTag] === 'ArrayBuffer' ||\n            value[Symbol.toStringTag] === 'SharedArrayBuffer'));\n}\nfunction isRegExp(regexp) {\n    return regexp instanceof RegExp || Object.prototype.toString.call(regexp) === '[object RegExp]';\n}\nfunction isMap(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.toStringTag in value &&\n        value[Symbol.toStringTag] === 'Map');\n}\nfunction isDate(date) {\n    return date instanceof Date || Object.prototype.toString.call(date) === '[object Date]';\n}\nfunction defaultInspect(x, _options) {\n    return JSON.stringify(x, (k, v) => {\n        if (typeof v === 'bigint') {\n            return { $numberLong: `${v}` };\n        }\n        else if (isMap(v)) {\n            return Object.fromEntries(v);\n        }\n        return v;\n    });\n}\nfunction getStylizeFunction(options) {\n    const stylizeExists = options != null &&\n        typeof options === 'object' &&\n        'stylize' in options &&\n        typeof options.stylize === 'function';\n    if (stylizeExists) {\n        return options.stylize;\n    }\n}\n\nconst BSON_MAJOR_VERSION = 6;\nconst BSON_VERSION_SYMBOL = Symbol.for('@@mdb.bson.version');\nconst BSON_INT32_MAX = 0x7fffffff;\nconst BSON_INT32_MIN = -2147483648;\nconst BSON_INT64_MAX = Math.pow(2, 63) - 1;\nconst BSON_INT64_MIN = -Math.pow(2, 63);\nconst JS_INT_MAX = Math.pow(2, 53);\nconst JS_INT_MIN = -Math.pow(2, 53);\nconst BSON_DATA_NUMBER = 1;\nconst BSON_DATA_STRING = 2;\nconst BSON_DATA_OBJECT = 3;\nconst BSON_DATA_ARRAY = 4;\nconst BSON_DATA_BINARY = 5;\nconst BSON_DATA_UNDEFINED = 6;\nconst BSON_DATA_OID = 7;\nconst BSON_DATA_BOOLEAN = 8;\nconst BSON_DATA_DATE = 9;\nconst BSON_DATA_NULL = 10;\nconst BSON_DATA_REGEXP = 11;\nconst BSON_DATA_DBPOINTER = 12;\nconst BSON_DATA_CODE = 13;\nconst BSON_DATA_SYMBOL = 14;\nconst BSON_DATA_CODE_W_SCOPE = 15;\nconst BSON_DATA_INT = 16;\nconst BSON_DATA_TIMESTAMP = 17;\nconst BSON_DATA_LONG = 18;\nconst BSON_DATA_DECIMAL128 = 19;\nconst BSON_DATA_MIN_KEY = 0xff;\nconst BSON_DATA_MAX_KEY = 0x7f;\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\nconst BSON_BINARY_SUBTYPE_UUID_NEW = 4;\nconst BSONType = Object.freeze({\n    double: 1,\n    string: 2,\n    object: 3,\n    array: 4,\n    binData: 5,\n    undefined: 6,\n    objectId: 7,\n    bool: 8,\n    date: 9,\n    null: 10,\n    regex: 11,\n    dbPointer: 12,\n    javascript: 13,\n    symbol: 14,\n    javascriptWithScope: 15,\n    int: 16,\n    timestamp: 17,\n    long: 18,\n    decimal: 19,\n    minKey: -1,\n    maxKey: 127\n});\n\nclass BSONError extends Error {\n    get bsonError() {\n        return true;\n    }\n    get name() {\n        return 'BSONError';\n    }\n    constructor(message, options) {\n        super(message, options);\n    }\n    static isBSONError(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            'bsonError' in value &&\n            value.bsonError === true &&\n            'name' in value &&\n            'message' in value &&\n            'stack' in value);\n    }\n}\nclass BSONVersionError extends BSONError {\n    get name() {\n        return 'BSONVersionError';\n    }\n    constructor() {\n        super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.x.x`);\n    }\n}\nclass BSONRuntimeError extends BSONError {\n    get name() {\n        return 'BSONRuntimeError';\n    }\n    constructor(message) {\n        super(message);\n    }\n}\nclass BSONOffsetError extends BSONError {\n    get name() {\n        return 'BSONOffsetError';\n    }\n    constructor(message, offset, options) {\n        super(`${message}. offset: ${offset}`, options);\n        this.offset = offset;\n    }\n}\n\nlet TextDecoderFatal;\nlet TextDecoderNonFatal;\nfunction parseUtf8(buffer, start, end, fatal) {\n    if (fatal) {\n        TextDecoderFatal ??= new TextDecoder('utf8', { fatal: true });\n        try {\n            return TextDecoderFatal.decode(buffer.subarray(start, end));\n        }\n        catch (cause) {\n            throw new BSONError('Invalid UTF-8 string in BSON document', { cause });\n        }\n    }\n    TextDecoderNonFatal ??= new TextDecoder('utf8', { fatal: false });\n    return TextDecoderNonFatal.decode(buffer.subarray(start, end));\n}\n\nfunction tryReadBasicLatin(uint8array, start, end) {\n    if (uint8array.length === 0) {\n        return '';\n    }\n    const stringByteLength = end - start;\n    if (stringByteLength === 0) {\n        return '';\n    }\n    if (stringByteLength > 20) {\n        return null;\n    }\n    if (stringByteLength === 1 && uint8array[start] < 128) {\n        return String.fromCharCode(uint8array[start]);\n    }\n    if (stringByteLength === 2 && uint8array[start] < 128 && uint8array[start + 1] < 128) {\n        return String.fromCharCode(uint8array[start]) + String.fromCharCode(uint8array[start + 1]);\n    }\n    if (stringByteLength === 3 &&\n        uint8array[start] < 128 &&\n        uint8array[start + 1] < 128 &&\n        uint8array[start + 2] < 128) {\n        return (String.fromCharCode(uint8array[start]) +\n            String.fromCharCode(uint8array[start + 1]) +\n            String.fromCharCode(uint8array[start + 2]));\n    }\n    const latinBytes = [];\n    for (let i = start; i < end; i++) {\n        const byte = uint8array[i];\n        if (byte > 127) {\n            return null;\n        }\n        latinBytes.push(byte);\n    }\n    return String.fromCharCode(...latinBytes);\n}\nfunction tryWriteBasicLatin(destination, source, offset) {\n    if (source.length === 0)\n        return 0;\n    if (source.length > 25)\n        return null;\n    if (destination.length - offset < source.length)\n        return null;\n    for (let charOffset = 0, destinationOffset = offset; charOffset < source.length; charOffset++, destinationOffset++) {\n        const char = source.charCodeAt(charOffset);\n        if (char > 127)\n            return null;\n        destination[destinationOffset] = char;\n    }\n    return source.length;\n}\n\nfunction nodejsMathRandomBytes(byteLength) {\n    return nodeJsByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst nodejsRandomBytes = await (async () => {\n    try {\n        return (await import('crypto')).randomBytes;\n    }\n    catch {\n        return nodejsMathRandomBytes;\n    }\n})();\nconst nodeJsByteUtils = {\n    toLocalBufferType(potentialBuffer) {\n        if (Buffer.isBuffer(potentialBuffer)) {\n            return potentialBuffer;\n        }\n        if (ArrayBuffer.isView(potentialBuffer)) {\n            return Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n        }\n        const stringTag = potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return Buffer.from(potentialBuffer);\n        }\n        throw new BSONError(`Cannot create Buffer from the passed potentialBuffer.`);\n    },\n    allocate(size) {\n        return Buffer.alloc(size);\n    },\n    allocateUnsafe(size) {\n        return Buffer.allocUnsafe(size);\n    },\n    equals(a, b) {\n        return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n    },\n    fromNumberArray(array) {\n        return Buffer.from(array);\n    },\n    fromBase64(base64) {\n        return Buffer.from(base64, 'base64');\n    },\n    toBase64(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('base64');\n    },\n    fromISO88591(codePoints) {\n        return Buffer.from(codePoints, 'binary');\n    },\n    toISO88591(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('binary');\n    },\n    fromHex(hex) {\n        return Buffer.from(hex, 'hex');\n    },\n    toHex(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString('hex');\n    },\n    toUTF8(buffer, start, end, fatal) {\n        const basicLatin = end - start <= 20 ? tryReadBasicLatin(buffer, start, end) : null;\n        if (basicLatin != null) {\n            return basicLatin;\n        }\n        const string = nodeJsByteUtils.toLocalBufferType(buffer).toString('utf8', start, end);\n        if (fatal) {\n            for (let i = 0; i < string.length; i++) {\n                if (string.charCodeAt(i) === 0xfffd) {\n                    parseUtf8(buffer, start, end, true);\n                    break;\n                }\n            }\n        }\n        return string;\n    },\n    utf8ByteLength(input) {\n        return Buffer.byteLength(input, 'utf8');\n    },\n    encodeUTF8Into(buffer, source, byteOffset) {\n        const latinBytesWritten = tryWriteBasicLatin(buffer, source, byteOffset);\n        if (latinBytesWritten != null) {\n            return latinBytesWritten;\n        }\n        return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, 'utf8');\n    },\n    randomBytes: nodejsRandomBytes,\n    swap32(buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).swap32();\n    }\n};\n\nfunction isReactNative() {\n    const { navigator } = globalThis;\n    return typeof navigator === 'object' && navigator.product === 'ReactNative';\n}\nfunction webMathRandomBytes(byteLength) {\n    if (byteLength < 0) {\n        throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n    }\n    return webByteUtils.fromNumberArray(Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256)));\n}\nconst webRandomBytes = (() => {\n    const { crypto } = globalThis;\n    if (crypto != null && typeof crypto.getRandomValues === 'function') {\n        return (byteLength) => {\n            return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n        };\n    }\n    else {\n        if (isReactNative()) {\n            const { console } = globalThis;\n            console?.warn?.('BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.');\n        }\n        return webMathRandomBytes;\n    }\n})();\nconst HEX_DIGIT = /(\\d|[a-f])/i;\nconst webByteUtils = {\n    toLocalBufferType(potentialUint8array) {\n        const stringTag = potentialUint8array?.[Symbol.toStringTag] ??\n            Object.prototype.toString.call(potentialUint8array);\n        if (stringTag === 'Uint8Array') {\n            return potentialUint8array;\n        }\n        if (ArrayBuffer.isView(potentialUint8array)) {\n            return new Uint8Array(potentialUint8array.buffer.slice(potentialUint8array.byteOffset, potentialUint8array.byteOffset + potentialUint8array.byteLength));\n        }\n        if (stringTag === 'ArrayBuffer' ||\n            stringTag === 'SharedArrayBuffer' ||\n            stringTag === '[object ArrayBuffer]' ||\n            stringTag === '[object SharedArrayBuffer]') {\n            return new Uint8Array(potentialUint8array);\n        }\n        throw new BSONError(`Cannot make a Uint8Array from passed potentialBuffer.`);\n    },\n    allocate(size) {\n        if (typeof size !== 'number') {\n            throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n        }\n        return new Uint8Array(size);\n    },\n    allocateUnsafe(size) {\n        return webByteUtils.allocate(size);\n    },\n    equals(a, b) {\n        if (a.byteLength !== b.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < a.byteLength; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    },\n    fromNumberArray(array) {\n        return Uint8Array.from(array);\n    },\n    fromBase64(base64) {\n        return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n    },\n    toBase64(uint8array) {\n        return btoa(webByteUtils.toISO88591(uint8array));\n    },\n    fromISO88591(codePoints) {\n        return Uint8Array.from(codePoints, c => c.charCodeAt(0) & 0xff);\n    },\n    toISO88591(uint8array) {\n        return Array.from(Uint16Array.from(uint8array), b => String.fromCharCode(b)).join('');\n    },\n    fromHex(hex) {\n        const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n        const buffer = [];\n        for (let i = 0; i < evenLengthHex.length; i += 2) {\n            const firstDigit = evenLengthHex[i];\n            const secondDigit = evenLengthHex[i + 1];\n            if (!HEX_DIGIT.test(firstDigit)) {\n                break;\n            }\n            if (!HEX_DIGIT.test(secondDigit)) {\n                break;\n            }\n            const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n            buffer.push(hexDigit);\n        }\n        return Uint8Array.from(buffer);\n    },\n    toHex(uint8array) {\n        return Array.from(uint8array, byte => byte.toString(16).padStart(2, '0')).join('');\n    },\n    toUTF8(uint8array, start, end, fatal) {\n        const basicLatin = end - start <= 20 ? tryReadBasicLatin(uint8array, start, end) : null;\n        if (basicLatin != null) {\n            return basicLatin;\n        }\n        return parseUtf8(uint8array, start, end, fatal);\n    },\n    utf8ByteLength(input) {\n        return new TextEncoder().encode(input).byteLength;\n    },\n    encodeUTF8Into(uint8array, source, byteOffset) {\n        const bytes = new TextEncoder().encode(source);\n        uint8array.set(bytes, byteOffset);\n        return bytes.byteLength;\n    },\n    randomBytes: webRandomBytes,\n    swap32(buffer) {\n        if (buffer.length % 4 !== 0) {\n            throw new RangeError('Buffer size must be a multiple of 32-bits');\n        }\n        for (let i = 0; i < buffer.length; i += 4) {\n            const byte0 = buffer[i];\n            const byte1 = buffer[i + 1];\n            const byte2 = buffer[i + 2];\n            const byte3 = buffer[i + 3];\n            buffer[i] = byte3;\n            buffer[i + 1] = byte2;\n            buffer[i + 2] = byte1;\n            buffer[i + 3] = byte0;\n        }\n        return buffer;\n    }\n};\n\nconst hasGlobalBuffer = typeof Buffer === 'function' && Buffer.prototype?._isBuffer !== true;\nconst ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\n\nclass BSONValue {\n    get [BSON_VERSION_SYMBOL]() {\n        return BSON_MAJOR_VERSION;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](depth, options, inspect) {\n        return this.inspect(depth, options, inspect);\n    }\n}\n\nconst FLOAT = new Float64Array(1);\nconst FLOAT_BYTES = new Uint8Array(FLOAT.buffer, 0, 8);\nFLOAT[0] = -1;\nconst isBigEndian = FLOAT_BYTES[7] === 0;\nconst NumberUtils = {\n    isBigEndian,\n    getNonnegativeInt32LE(source, offset) {\n        if (source[offset + 3] > 127) {\n            throw new RangeError(`Size cannot be negative at offset: ${offset}`);\n        }\n        return (source[offset] |\n            (source[offset + 1] << 8) |\n            (source[offset + 2] << 16) |\n            (source[offset + 3] << 24));\n    },\n    getInt32LE(source, offset) {\n        return (source[offset] |\n            (source[offset + 1] << 8) |\n            (source[offset + 2] << 16) |\n            (source[offset + 3] << 24));\n    },\n    getUint32LE(source, offset) {\n        return (source[offset] +\n            source[offset + 1] * 256 +\n            source[offset + 2] * 65536 +\n            source[offset + 3] * 16777216);\n    },\n    getUint32BE(source, offset) {\n        return (source[offset + 3] +\n            source[offset + 2] * 256 +\n            source[offset + 1] * 65536 +\n            source[offset] * 16777216);\n    },\n    getBigInt64LE(source, offset) {\n        const hi = BigInt(source[offset + 4] +\n            source[offset + 5] * 256 +\n            source[offset + 6] * 65536 +\n            (source[offset + 7] << 24));\n        const lo = BigInt(source[offset] +\n            source[offset + 1] * 256 +\n            source[offset + 2] * 65536 +\n            source[offset + 3] * 16777216);\n        return (hi << BigInt(32)) + lo;\n    },\n    getFloat64LE: isBigEndian\n        ? (source, offset) => {\n            FLOAT_BYTES[7] = source[offset];\n            FLOAT_BYTES[6] = source[offset + 1];\n            FLOAT_BYTES[5] = source[offset + 2];\n            FLOAT_BYTES[4] = source[offset + 3];\n            FLOAT_BYTES[3] = source[offset + 4];\n            FLOAT_BYTES[2] = source[offset + 5];\n            FLOAT_BYTES[1] = source[offset + 6];\n            FLOAT_BYTES[0] = source[offset + 7];\n            return FLOAT[0];\n        }\n        : (source, offset) => {\n            FLOAT_BYTES[0] = source[offset];\n            FLOAT_BYTES[1] = source[offset + 1];\n            FLOAT_BYTES[2] = source[offset + 2];\n            FLOAT_BYTES[3] = source[offset + 3];\n            FLOAT_BYTES[4] = source[offset + 4];\n            FLOAT_BYTES[5] = source[offset + 5];\n            FLOAT_BYTES[6] = source[offset + 6];\n            FLOAT_BYTES[7] = source[offset + 7];\n            return FLOAT[0];\n        },\n    setInt32BE(destination, offset, value) {\n        destination[offset + 3] = value;\n        value >>>= 8;\n        destination[offset + 2] = value;\n        value >>>= 8;\n        destination[offset + 1] = value;\n        value >>>= 8;\n        destination[offset] = value;\n        return 4;\n    },\n    setInt32LE(destination, offset, value) {\n        destination[offset] = value;\n        value >>>= 8;\n        destination[offset + 1] = value;\n        value >>>= 8;\n        destination[offset + 2] = value;\n        value >>>= 8;\n        destination[offset + 3] = value;\n        return 4;\n    },\n    setBigInt64LE(destination, offset, value) {\n        const mask32bits = BigInt(0xffff_ffff);\n        let lo = Number(value & mask32bits);\n        destination[offset] = lo;\n        lo >>= 8;\n        destination[offset + 1] = lo;\n        lo >>= 8;\n        destination[offset + 2] = lo;\n        lo >>= 8;\n        destination[offset + 3] = lo;\n        let hi = Number((value >> BigInt(32)) & mask32bits);\n        destination[offset + 4] = hi;\n        hi >>= 8;\n        destination[offset + 5] = hi;\n        hi >>= 8;\n        destination[offset + 6] = hi;\n        hi >>= 8;\n        destination[offset + 7] = hi;\n        return 8;\n    },\n    setFloat64LE: isBigEndian\n        ? (destination, offset, value) => {\n            FLOAT[0] = value;\n            destination[offset] = FLOAT_BYTES[7];\n            destination[offset + 1] = FLOAT_BYTES[6];\n            destination[offset + 2] = FLOAT_BYTES[5];\n            destination[offset + 3] = FLOAT_BYTES[4];\n            destination[offset + 4] = FLOAT_BYTES[3];\n            destination[offset + 5] = FLOAT_BYTES[2];\n            destination[offset + 6] = FLOAT_BYTES[1];\n            destination[offset + 7] = FLOAT_BYTES[0];\n            return 8;\n        }\n        : (destination, offset, value) => {\n            FLOAT[0] = value;\n            destination[offset] = FLOAT_BYTES[0];\n            destination[offset + 1] = FLOAT_BYTES[1];\n            destination[offset + 2] = FLOAT_BYTES[2];\n            destination[offset + 3] = FLOAT_BYTES[3];\n            destination[offset + 4] = FLOAT_BYTES[4];\n            destination[offset + 5] = FLOAT_BYTES[5];\n            destination[offset + 6] = FLOAT_BYTES[6];\n            destination[offset + 7] = FLOAT_BYTES[7];\n            return 8;\n        }\n};\n\nclass Binary extends BSONValue {\n    get _bsontype() {\n        return 'Binary';\n    }\n    constructor(buffer, subType) {\n        super();\n        if (!(buffer == null) &&\n            typeof buffer === 'string' &&\n            !ArrayBuffer.isView(buffer) &&\n            !isAnyArrayBuffer(buffer) &&\n            !Array.isArray(buffer)) {\n            throw new BSONError('Binary can only be constructed from Uint8Array or number[]');\n        }\n        this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n        if (buffer == null) {\n            this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n            this.position = 0;\n        }\n        else {\n            this.buffer = Array.isArray(buffer)\n                ? ByteUtils.fromNumberArray(buffer)\n                : ByteUtils.toLocalBufferType(buffer);\n            this.position = this.buffer.byteLength;\n        }\n    }\n    put(byteValue) {\n        if (typeof byteValue === 'string' && byteValue.length !== 1) {\n            throw new BSONError('only accepts single character String');\n        }\n        else if (typeof byteValue !== 'number' && byteValue.length !== 1)\n            throw new BSONError('only accepts single character Uint8Array or Array');\n        let decodedByte;\n        if (typeof byteValue === 'string') {\n            decodedByte = byteValue.charCodeAt(0);\n        }\n        else if (typeof byteValue === 'number') {\n            decodedByte = byteValue;\n        }\n        else {\n            decodedByte = byteValue[0];\n        }\n        if (decodedByte < 0 || decodedByte > 255) {\n            throw new BSONError('only accepts number in a valid unsigned byte range 0-255');\n        }\n        if (this.buffer.byteLength > this.position) {\n            this.buffer[this.position++] = decodedByte;\n        }\n        else {\n            const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n            this.buffer[this.position++] = decodedByte;\n        }\n    }\n    write(sequence, offset) {\n        offset = typeof offset === 'number' ? offset : this.position;\n        if (this.buffer.byteLength < offset + sequence.length) {\n            const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n        }\n        if (ArrayBuffer.isView(sequence)) {\n            this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n            this.position =\n                offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n        }\n        else if (typeof sequence === 'string') {\n            throw new BSONError('input cannot be string');\n        }\n    }\n    read(position, length) {\n        length = length && length > 0 ? length : this.position;\n        const end = position + length;\n        return this.buffer.subarray(position, end > this.position ? this.position : end);\n    }\n    value() {\n        return this.buffer.length === this.position\n            ? this.buffer\n            : this.buffer.subarray(0, this.position);\n    }\n    length() {\n        return this.position;\n    }\n    toJSON() {\n        return ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.buffer.subarray(0, this.position));\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        if (encoding === 'utf8' || encoding === 'utf-8')\n            return ByteUtils.toUTF8(this.buffer, 0, this.position, false);\n        return ByteUtils.toUTF8(this.buffer, 0, this.position, false);\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (this.sub_type === Binary.SUBTYPE_VECTOR) {\n            validateBinaryVector(this);\n        }\n        const base64String = ByteUtils.toBase64(this.buffer);\n        const subType = Number(this.sub_type).toString(16);\n        if (options.legacy) {\n            return {\n                $binary: base64String,\n                $type: subType.length === 1 ? '0' + subType : subType\n            };\n        }\n        return {\n            $binary: {\n                base64: base64String,\n                subType: subType.length === 1 ? '0' + subType : subType\n            }\n        };\n    }\n    toUUID() {\n        if (this.sub_type === Binary.SUBTYPE_UUID) {\n            return new UUID(this.buffer.subarray(0, this.position));\n        }\n        throw new BSONError(`Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`);\n    }\n    static createFromHexString(hex, subType) {\n        return new Binary(ByteUtils.fromHex(hex), subType);\n    }\n    static createFromBase64(base64, subType) {\n        return new Binary(ByteUtils.fromBase64(base64), subType);\n    }\n    static fromExtendedJSON(doc, options) {\n        options = options || {};\n        let data;\n        let type;\n        if ('$binary' in doc) {\n            if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {\n                type = doc.$type ? parseInt(doc.$type, 16) : 0;\n                data = ByteUtils.fromBase64(doc.$binary);\n            }\n            else {\n                if (typeof doc.$binary !== 'string') {\n                    type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n                    data = ByteUtils.fromBase64(doc.$binary.base64);\n                }\n            }\n        }\n        else if ('$uuid' in doc) {\n            type = 4;\n            data = UUID.bytesFromString(doc.$uuid);\n        }\n        if (!data) {\n            throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n        }\n        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        const base64Arg = inspect(base64, options);\n        const subTypeArg = inspect(this.sub_type, options);\n        return `Binary.createFromBase64(${base64Arg}, ${subTypeArg})`;\n    }\n    toInt8Array() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.Int8) {\n            throw new BSONError('Binary datatype field is not Int8');\n        }\n        return new Int8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n    }\n    toFloat32Array() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.Float32) {\n            throw new BSONError('Binary datatype field is not Float32');\n        }\n        const floatBytes = new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n        if (NumberUtils.isBigEndian)\n            ByteUtils.swap32(floatBytes);\n        return new Float32Array(floatBytes.buffer);\n    }\n    toPackedBits() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.PackedBit) {\n            throw new BSONError('Binary datatype field is not packed bit');\n        }\n        return new Uint8Array(this.buffer.buffer.slice(this.buffer.byteOffset + 2, this.buffer.byteOffset + this.position));\n    }\n    toBits() {\n        if (this.sub_type !== Binary.SUBTYPE_VECTOR) {\n            throw new BSONError('Binary sub_type is not Vector');\n        }\n        if (this.buffer[0] !== Binary.VECTOR_TYPE.PackedBit) {\n            throw new BSONError('Binary datatype field is not packed bit');\n        }\n        const byteCount = this.length() - 2;\n        const bitCount = byteCount * 8 - this.buffer[1];\n        const bits = new Int8Array(bitCount);\n        for (let bitOffset = 0; bitOffset < bits.length; bitOffset++) {\n            const byteOffset = (bitOffset / 8) | 0;\n            const byte = this.buffer[byteOffset + 2];\n            const shift = 7 - (bitOffset % 8);\n            const bit = (byte >> shift) & 1;\n            bits[bitOffset] = bit;\n        }\n        return bits;\n    }\n    static fromInt8Array(array) {\n        const buffer = ByteUtils.allocate(array.byteLength + 2);\n        buffer[0] = Binary.VECTOR_TYPE.Int8;\n        buffer[1] = 0;\n        const intBytes = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        buffer.set(intBytes, 2);\n        return new this(buffer, this.SUBTYPE_VECTOR);\n    }\n    static fromFloat32Array(array) {\n        const binaryBytes = ByteUtils.allocate(array.byteLength + 2);\n        binaryBytes[0] = Binary.VECTOR_TYPE.Float32;\n        binaryBytes[1] = 0;\n        const floatBytes = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n        binaryBytes.set(floatBytes, 2);\n        if (NumberUtils.isBigEndian)\n            ByteUtils.swap32(new Uint8Array(binaryBytes.buffer, 2));\n        return new this(binaryBytes, this.SUBTYPE_VECTOR);\n    }\n    static fromPackedBits(array, padding = 0) {\n        const buffer = ByteUtils.allocate(array.byteLength + 2);\n        buffer[0] = Binary.VECTOR_TYPE.PackedBit;\n        buffer[1] = padding;\n        buffer.set(array, 2);\n        return new this(buffer, this.SUBTYPE_VECTOR);\n    }\n    static fromBits(bits) {\n        const byteLength = (bits.length + 7) >>> 3;\n        const bytes = new Uint8Array(byteLength + 2);\n        bytes[0] = Binary.VECTOR_TYPE.PackedBit;\n        const remainder = bits.length % 8;\n        bytes[1] = remainder === 0 ? 0 : 8 - remainder;\n        for (let bitOffset = 0; bitOffset < bits.length; bitOffset++) {\n            const byteOffset = bitOffset >>> 3;\n            const bit = bits[bitOffset];\n            if (bit !== 0 && bit !== 1) {\n                throw new BSONError(`Invalid bit value at ${bitOffset}: must be 0 or 1, found ${bits[bitOffset]}`);\n            }\n            if (bit === 0)\n                continue;\n            const shift = 7 - (bitOffset % 8);\n            bytes[byteOffset + 2] |= bit << shift;\n        }\n        return new this(bytes, Binary.SUBTYPE_VECTOR);\n    }\n}\nBinary.BSON_BINARY_SUBTYPE_DEFAULT = 0;\nBinary.BUFFER_SIZE = 256;\nBinary.SUBTYPE_DEFAULT = 0;\nBinary.SUBTYPE_FUNCTION = 1;\nBinary.SUBTYPE_BYTE_ARRAY = 2;\nBinary.SUBTYPE_UUID_OLD = 3;\nBinary.SUBTYPE_UUID = 4;\nBinary.SUBTYPE_MD5 = 5;\nBinary.SUBTYPE_ENCRYPTED = 6;\nBinary.SUBTYPE_COLUMN = 7;\nBinary.SUBTYPE_SENSITIVE = 8;\nBinary.SUBTYPE_VECTOR = 9;\nBinary.SUBTYPE_USER_DEFINED = 128;\nBinary.VECTOR_TYPE = Object.freeze({\n    Int8: 0x03,\n    Float32: 0x27,\n    PackedBit: 0x10\n});\nfunction validateBinaryVector(vector) {\n    if (vector.sub_type !== Binary.SUBTYPE_VECTOR)\n        return;\n    const size = vector.position;\n    const datatype = vector.buffer[0];\n    const padding = vector.buffer[1];\n    if ((datatype === Binary.VECTOR_TYPE.Float32 || datatype === Binary.VECTOR_TYPE.Int8) &&\n        padding !== 0) {\n        throw new BSONError('Invalid Vector: padding must be zero for int8 and float32 vectors');\n    }\n    if (datatype === Binary.VECTOR_TYPE.PackedBit && padding !== 0 && size === 2) {\n        throw new BSONError('Invalid Vector: padding must be zero for packed bit vectors that are empty');\n    }\n    if (datatype === Binary.VECTOR_TYPE.PackedBit && padding > 7) {\n        throw new BSONError(`Invalid Vector: padding must be a value between 0 and 7. found: ${padding}`);\n    }\n}\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nclass UUID extends Binary {\n    constructor(input) {\n        let bytes;\n        if (input == null) {\n            bytes = UUID.generate();\n        }\n        else if (input instanceof UUID) {\n            bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n        }\n        else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n            bytes = ByteUtils.toLocalBufferType(input);\n        }\n        else if (typeof input === 'string') {\n            bytes = UUID.bytesFromString(input);\n        }\n        else {\n            throw new BSONError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');\n        }\n        super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n    }\n    toHexString(includeDashes = true) {\n        if (includeDashes) {\n            return [\n                ByteUtils.toHex(this.buffer.subarray(0, 4)),\n                ByteUtils.toHex(this.buffer.subarray(4, 6)),\n                ByteUtils.toHex(this.buffer.subarray(6, 8)),\n                ByteUtils.toHex(this.buffer.subarray(8, 10)),\n                ByteUtils.toHex(this.buffer.subarray(10, 16))\n            ].join('-');\n        }\n        return ByteUtils.toHex(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === 'hex')\n            return ByteUtils.toHex(this.id);\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    equals(otherId) {\n        if (!otherId) {\n            return false;\n        }\n        if (otherId instanceof UUID) {\n            return ByteUtils.equals(otherId.id, this.id);\n        }\n        try {\n            return ByteUtils.equals(new UUID(otherId).id, this.id);\n        }\n        catch {\n            return false;\n        }\n    }\n    toBinary() {\n        return new Binary(this.id, Binary.SUBTYPE_UUID);\n    }\n    static generate() {\n        const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n        bytes[6] = (bytes[6] & 0x0f) | 0x40;\n        bytes[8] = (bytes[8] & 0x3f) | 0x80;\n        return bytes;\n    }\n    static isValid(input) {\n        if (!input) {\n            return false;\n        }\n        if (typeof input === 'string') {\n            return UUID.isValidUUIDString(input);\n        }\n        if (isUint8Array(input)) {\n            return input.byteLength === UUID_BYTE_LENGTH;\n        }\n        return (input._bsontype === 'Binary' &&\n            input.sub_type === this.SUBTYPE_UUID &&\n            input.buffer.byteLength === 16);\n    }\n    static createFromHexString(hexString) {\n        const buffer = UUID.bytesFromString(hexString);\n        return new UUID(buffer);\n    }\n    static createFromBase64(base64) {\n        return new UUID(ByteUtils.fromBase64(base64));\n    }\n    static bytesFromString(representation) {\n        if (!UUID.isValidUUIDString(representation)) {\n            throw new BSONError('UUID string representation must be 32 hex digits or canonical hyphenated representation');\n        }\n        return ByteUtils.fromHex(representation.replace(/-/g, ''));\n    }\n    static isValidUUIDString(representation) {\n        return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new UUID(${inspect(this.toHexString(), options)})`;\n    }\n}\n\nclass Code extends BSONValue {\n    get _bsontype() {\n        return 'Code';\n    }\n    constructor(code, scope) {\n        super();\n        this.code = code.toString();\n        this.scope = scope ?? null;\n    }\n    toJSON() {\n        if (this.scope != null) {\n            return { code: this.code, scope: this.scope };\n        }\n        return { code: this.code };\n    }\n    toExtendedJSON() {\n        if (this.scope) {\n            return { $code: this.code, $scope: this.scope };\n        }\n        return { $code: this.code };\n    }\n    static fromExtendedJSON(doc) {\n        return new Code(doc.$code, doc.$scope);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        let parametersString = inspect(this.code, options);\n        const multiLineFn = parametersString.includes('\\n');\n        if (this.scope != null) {\n            parametersString += `,${multiLineFn ? '\\n' : ' '}${inspect(this.scope, options)}`;\n        }\n        const endingNewline = multiLineFn && this.scope === null;\n        return `new Code(${multiLineFn ? '\\n' : ''}${parametersString}${endingNewline ? '\\n' : ''})`;\n    }\n}\n\nfunction isDBRefLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '$id' in value &&\n        value.$id != null &&\n        '$ref' in value &&\n        typeof value.$ref === 'string' &&\n        (!('$db' in value) || ('$db' in value && typeof value.$db === 'string')));\n}\nclass DBRef extends BSONValue {\n    get _bsontype() {\n        return 'DBRef';\n    }\n    constructor(collection, oid, db, fields) {\n        super();\n        const parts = collection.split('.');\n        if (parts.length === 2) {\n            db = parts.shift();\n            collection = parts.shift();\n        }\n        this.collection = collection;\n        this.oid = oid;\n        this.db = db;\n        this.fields = fields || {};\n    }\n    get namespace() {\n        return this.collection;\n    }\n    set namespace(value) {\n        this.collection = value;\n    }\n    toJSON() {\n        const o = Object.assign({\n            $ref: this.collection,\n            $id: this.oid\n        }, this.fields);\n        if (this.db != null)\n            o.$db = this.db;\n        return o;\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        let o = {\n            $ref: this.collection,\n            $id: this.oid\n        };\n        if (options.legacy) {\n            return o;\n        }\n        if (this.db)\n            o.$db = this.db;\n        o = Object.assign(o, this.fields);\n        return o;\n    }\n    static fromExtendedJSON(doc) {\n        const copy = Object.assign({}, doc);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const args = [\n            inspect(this.namespace, options),\n            inspect(this.oid, options),\n            ...(this.db ? [inspect(this.db, options)] : []),\n            ...(Object.keys(this.fields).length > 0 ? [inspect(this.fields, options)] : [])\n        ];\n        args[1] = inspect === defaultInspect ? `new ObjectId(${args[1]})` : args[1];\n        return `new DBRef(${args.join(', ')})`;\n    }\n}\n\nfunction removeLeadingZerosAndExplicitPlus(str) {\n    if (str === '') {\n        return str;\n    }\n    let startIndex = 0;\n    const isNegative = str[startIndex] === '-';\n    const isExplicitlyPositive = str[startIndex] === '+';\n    if (isExplicitlyPositive || isNegative) {\n        startIndex += 1;\n    }\n    let foundInsignificantZero = false;\n    for (; startIndex < str.length && str[startIndex] === '0'; ++startIndex) {\n        foundInsignificantZero = true;\n    }\n    if (!foundInsignificantZero) {\n        return isExplicitlyPositive ? str.slice(1) : str;\n    }\n    return `${isNegative ? '-' : ''}${str.length === startIndex ? '0' : str.slice(startIndex)}`;\n}\nfunction validateStringCharacters(str, radix) {\n    radix = radix ?? 10;\n    const validCharacters = '0123456789abcdefghijklmnopqrstuvwxyz'.slice(0, radix);\n    const regex = new RegExp(`[^-+${validCharacters}]`, 'i');\n    return regex.test(str) ? false : str;\n}\n\nlet wasm = undefined;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n}\ncatch {\n}\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nconst INT_CACHE = {};\nconst UINT_CACHE = {};\nconst MAX_INT64_STRING_LENGTH = 20;\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\nclass Long extends BSONValue {\n    get _bsontype() {\n        return 'Long';\n    }\n    get __isLong__() {\n        return true;\n    }\n    constructor(lowOrValue = 0, highOrUnsigned, unsigned) {\n        super();\n        const unsignedBool = typeof highOrUnsigned === 'boolean' ? highOrUnsigned : Boolean(unsigned);\n        const high = typeof highOrUnsigned === 'number' ? highOrUnsigned : 0;\n        const res = typeof lowOrValue === 'string'\n            ? Long.fromString(lowOrValue, unsignedBool)\n            : typeof lowOrValue === 'bigint'\n                ? Long.fromBigInt(lowOrValue, unsignedBool)\n                : { low: lowOrValue | 0, high: high | 0, unsigned: unsignedBool };\n        this.low = res.low;\n        this.high = res.high;\n        this.unsigned = res.unsigned;\n    }\n    static fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    static fromInt(value, unsigned) {\n        let obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if ((cache = 0 <= value && value < 256)) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache)\n                UINT_CACHE[value] = obj;\n            return obj;\n        }\n        else {\n            value |= 0;\n            if ((cache = -128 <= value && value < 128)) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj)\n                    return cachedObj;\n            }\n            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache)\n                INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    static fromNumber(value, unsigned) {\n        if (isNaN(value))\n            return unsigned ? Long.UZERO : Long.ZERO;\n        if (unsigned) {\n            if (value < 0)\n                return Long.UZERO;\n            if (value >= TWO_PWR_64_DBL)\n                return Long.MAX_UNSIGNED_VALUE;\n        }\n        else {\n            if (value <= -9223372036854776e3)\n                return Long.MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL)\n                return Long.MAX_VALUE;\n        }\n        if (value < 0)\n            return Long.fromNumber(-value, unsigned).neg();\n        return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n    }\n    static fromBigInt(value, unsigned) {\n        const FROM_BIGINT_BIT_MASK = BigInt(0xffffffff);\n        const FROM_BIGINT_BIT_SHIFT = BigInt(32);\n        return new Long(Number(value & FROM_BIGINT_BIT_MASK), Number((value >> FROM_BIGINT_BIT_SHIFT) & FROM_BIGINT_BIT_MASK), unsigned);\n    }\n    static _fromString(str, unsigned, radix) {\n        if (str.length === 0)\n            throw new BSONError('empty string');\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        let p;\n        if ((p = str.indexOf('-')) > 0)\n            throw new BSONError('interior hyphen');\n        else if (p === 0) {\n            return Long._fromString(str.substring(1), unsigned, radix).neg();\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n        let result = Long.ZERO;\n        for (let i = 0; i < str.length; i += 8) {\n            const size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                const power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            }\n            else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    static fromStringStrict(str, unsignedOrRadix, radix) {\n        let unsigned = false;\n        if (typeof unsignedOrRadix === 'number') {\n            (radix = unsignedOrRadix), (unsignedOrRadix = false);\n        }\n        else {\n            unsigned = !!unsignedOrRadix;\n        }\n        radix ??= 10;\n        if (str.trim() !== str) {\n            throw new BSONError(`Input: '${str}' contains leading and/or trailing whitespace`);\n        }\n        if (!validateStringCharacters(str, radix)) {\n            throw new BSONError(`Input: '${str}' contains invalid characters for radix: ${radix}`);\n        }\n        const cleanedStr = removeLeadingZerosAndExplicitPlus(str);\n        const result = Long._fromString(cleanedStr, unsigned, radix);\n        if (result.toString(radix).toLowerCase() !== cleanedStr.toLowerCase()) {\n            throw new BSONError(`Input: ${str} is not representable as ${result.unsigned ? 'an unsigned' : 'a signed'} 64-bit Long ${radix != null ? `with radix: ${radix}` : ''}`);\n        }\n        return result;\n    }\n    static fromString(str, unsignedOrRadix, radix) {\n        let unsigned = false;\n        if (typeof unsignedOrRadix === 'number') {\n            (radix = unsignedOrRadix), (unsignedOrRadix = false);\n        }\n        else {\n            unsigned = !!unsignedOrRadix;\n        }\n        radix ??= 10;\n        if (str === 'NaN' && radix < 24) {\n            return Long.ZERO;\n        }\n        else if ((str === 'Infinity' || str === '+Infinity' || str === '-Infinity') && radix < 35) {\n            return Long.ZERO;\n        }\n        return Long._fromString(str, unsigned, radix);\n    }\n    static fromBytes(bytes, unsigned, le) {\n        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    }\n    static fromBytesLE(bytes, unsigned) {\n        return new Long(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24), bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24), unsigned);\n    }\n    static fromBytesBE(bytes, unsigned) {\n        return new Long((bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7], (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3], unsigned);\n    }\n    static isLong(value) {\n        return (value != null &&\n            typeof value === 'object' &&\n            '__isLong__' in value &&\n            value.__isLong__ === true);\n    }\n    static fromValue(val, unsigned) {\n        if (typeof val === 'number')\n            return Long.fromNumber(val, unsigned);\n        if (typeof val === 'string')\n            return Long.fromString(val, unsigned);\n        return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n    }\n    add(addend) {\n        if (!Long.isLong(addend))\n            addend = Long.fromValue(addend);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = addend.high >>> 16;\n        const b32 = addend.high & 0xffff;\n        const b16 = addend.low >>> 16;\n        const b00 = addend.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    and(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    }\n    compare(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.eq(other))\n            return 0;\n        const thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg)\n            return -1;\n        if (!thisNeg && otherNeg)\n            return 1;\n        if (!this.unsigned)\n            return this.sub(other).isNegative() ? -1 : 1;\n        return other.high >>> 0 > this.high >>> 0 ||\n            (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n            ? -1\n            : 1;\n    }\n    comp(other) {\n        return this.compare(other);\n    }\n    divide(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (divisor.isZero())\n            throw new BSONError('division by zero');\n        if (wasm) {\n            if (!this.unsigned &&\n                this.high === -2147483648 &&\n                divisor.low === -1 &&\n                divisor.high === -1) {\n                return this;\n            }\n            const low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (this.isZero())\n            return this.unsigned ? Long.UZERO : Long.ZERO;\n        let approx, rem, res;\n        if (!this.unsigned) {\n            if (this.eq(Long.MIN_VALUE)) {\n                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))\n                    return Long.MIN_VALUE;\n                else if (divisor.eq(Long.MIN_VALUE))\n                    return Long.ONE;\n                else {\n                    const halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(Long.ZERO)) {\n                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                    }\n                    else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            }\n            else if (divisor.eq(Long.MIN_VALUE))\n                return this.unsigned ? Long.UZERO : Long.ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative())\n                    return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            }\n            else if (divisor.isNegative())\n                return this.div(divisor.neg()).neg();\n            res = Long.ZERO;\n        }\n        else {\n            if (!divisor.unsigned)\n                divisor = divisor.toUnsigned();\n            if (divisor.gt(this))\n                return Long.UZERO;\n            if (divisor.gt(this.shru(1)))\n                return Long.UONE;\n            res = Long.UZERO;\n        }\n        rem = this;\n        while (rem.gte(divisor)) {\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            let approxRes = Long.fromNumber(approx);\n            let approxRem = approxRes.mul(divisor);\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            if (approxRes.isZero())\n                approxRes = Long.ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    }\n    div(divisor) {\n        return this.divide(divisor);\n    }\n    equals(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\n            return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    eq(other) {\n        return this.equals(other);\n    }\n    getHighBits() {\n        return this.high;\n    }\n    getHighBitsUnsigned() {\n        return this.high >>> 0;\n    }\n    getLowBits() {\n        return this.low;\n    }\n    getLowBitsUnsigned() {\n        return this.low >>> 0;\n    }\n    getNumBitsAbs() {\n        if (this.isNegative()) {\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        }\n        const val = this.high !== 0 ? this.high : this.low;\n        let bit;\n        for (bit = 31; bit > 0; bit--)\n            if ((val & (1 << bit)) !== 0)\n                break;\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    }\n    greaterThan(other) {\n        return this.comp(other) > 0;\n    }\n    gt(other) {\n        return this.greaterThan(other);\n    }\n    greaterThanOrEqual(other) {\n        return this.comp(other) >= 0;\n    }\n    gte(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    ge(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    isEven() {\n        return (this.low & 1) === 0;\n    }\n    isNegative() {\n        return !this.unsigned && this.high < 0;\n    }\n    isOdd() {\n        return (this.low & 1) === 1;\n    }\n    isPositive() {\n        return this.unsigned || this.high >= 0;\n    }\n    isZero() {\n        return this.high === 0 && this.low === 0;\n    }\n    lessThan(other) {\n        return this.comp(other) < 0;\n    }\n    lt(other) {\n        return this.lessThan(other);\n    }\n    lessThanOrEqual(other) {\n        return this.comp(other) <= 0;\n    }\n    lte(other) {\n        return this.lessThanOrEqual(other);\n    }\n    modulo(divisor) {\n        if (!Long.isLong(divisor))\n            divisor = Long.fromValue(divisor);\n        if (wasm) {\n            const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        return this.sub(this.div(divisor).mul(divisor));\n    }\n    mod(divisor) {\n        return this.modulo(divisor);\n    }\n    rem(divisor) {\n        return this.modulo(divisor);\n    }\n    multiply(multiplier) {\n        if (this.isZero())\n            return Long.ZERO;\n        if (!Long.isLong(multiplier))\n            multiplier = Long.fromValue(multiplier);\n        if (wasm) {\n            const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (multiplier.isZero())\n            return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE))\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE))\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative())\n                return this.neg().mul(multiplier.neg());\n            else\n                return this.neg().mul(multiplier).neg();\n        }\n        else if (multiplier.isNegative())\n            return this.mul(multiplier.neg()).neg();\n        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = multiplier.high >>> 16;\n        const b32 = multiplier.high & 0xffff;\n        const b16 = multiplier.low >>> 16;\n        const b00 = multiplier.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    }\n    mul(multiplier) {\n        return this.multiply(multiplier);\n    }\n    negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE))\n            return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    }\n    neg() {\n        return this.negate();\n    }\n    not() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    neq(other) {\n        return this.notEquals(other);\n    }\n    ne(other) {\n        return this.notEquals(other);\n    }\n    or(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    }\n    shiftLeft(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n        else\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\n    }\n    shl(numBits) {\n        return this.shiftLeft(numBits);\n    }\n    shiftRight(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        if ((numBits &= 63) === 0)\n            return this;\n        else if (numBits < 32)\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n        else\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n    }\n    shr(numBits) {\n        return this.shiftRight(numBits);\n    }\n    shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits))\n            numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0)\n            return this;\n        else {\n            const high = this.high;\n            if (numBits < 32) {\n                const low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            }\n            else if (numBits === 32)\n                return Long.fromBits(high, 0, this.unsigned);\n            else\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n        }\n    }\n    shr_u(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    shru(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    subtract(subtrahend) {\n        if (!Long.isLong(subtrahend))\n            subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    }\n    sub(subtrahend) {\n        return this.subtract(subtrahend);\n    }\n    toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    }\n    toNumber() {\n        if (this.unsigned)\n            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    toBigInt() {\n        return BigInt(this.toString());\n    }\n    toBytes(le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    }\n    toBytesLE() {\n        const hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            (lo >>> 8) & 0xff,\n            (lo >>> 16) & 0xff,\n            lo >>> 24,\n            hi & 0xff,\n            (hi >>> 8) & 0xff,\n            (hi >>> 16) & 0xff,\n            hi >>> 24\n        ];\n    }\n    toBytesBE() {\n        const hi = this.high, lo = this.low;\n        return [\n            hi >>> 24,\n            (hi >>> 16) & 0xff,\n            (hi >>> 8) & 0xff,\n            hi & 0xff,\n            lo >>> 24,\n            (lo >>> 16) & 0xff,\n            (lo >>> 8) & 0xff,\n            lo & 0xff\n        ];\n    }\n    toSigned() {\n        if (!this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, false);\n    }\n    toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix)\n            throw new BSONError('radix');\n        if (this.isZero())\n            return '0';\n        if (this.isNegative()) {\n            if (this.eq(Long.MIN_VALUE)) {\n                const radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            }\n            else\n                return '-' + this.neg().toString(radix);\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        let rem = this;\n        let result = '';\n        while (true) {\n            const remDiv = rem.div(radixToPower);\n            const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n            let digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6)\n                    digits = '0' + digits;\n                result = '' + digits + result;\n            }\n        }\n    }\n    toUnsigned() {\n        if (this.unsigned)\n            return this;\n        return Long.fromBits(this.low, this.high, true);\n    }\n    xor(other) {\n        if (!Long.isLong(other))\n            other = Long.fromValue(other);\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    }\n    eqz() {\n        return this.isZero();\n    }\n    le(other) {\n        return this.lessThanOrEqual(other);\n    }\n    toExtendedJSON(options) {\n        if (options && options.relaxed)\n            return this.toNumber();\n        return { $numberLong: this.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        const { useBigInt64 = false, relaxed = true } = { ...options };\n        if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n            throw new BSONError('$numberLong string is too long');\n        }\n        if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n            throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n        }\n        if (useBigInt64) {\n            const bigIntResult = BigInt(doc.$numberLong);\n            return BigInt.asIntN(64, bigIntResult);\n        }\n        const longResult = Long.fromString(doc.$numberLong);\n        if (relaxed) {\n            return longResult.toNumber();\n        }\n        return longResult;\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const longVal = inspect(this.toString(), options);\n        const unsignedVal = this.unsigned ? `, ${inspect(this.unsigned, options)}` : '';\n        return `new Long(${longVal}${unsignedVal})`;\n    }\n}\nLong.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\nLong.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\nLong.ZERO = Long.fromInt(0);\nLong.UZERO = Long.fromInt(0, true);\nLong.ONE = Long.fromInt(1);\nLong.UONE = Long.fromInt(1, true);\nLong.NEG_ONE = Long.fromInt(-1);\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\nconst NAN_BUFFER = ByteUtils.fromNumberArray([\n    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray([\n    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray([\n    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n].reverse());\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nconst COMBINATION_MASK = 0x1f;\nconst EXPONENT_MASK = 0x3fff;\nconst COMBINATION_INFINITY = 30;\nconst COMBINATION_NAN = 31;\nfunction isDigit(value) {\n    return !isNaN(parseInt(value, 10));\n}\nfunction divideu128(value) {\n    const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n    let _rem = Long.fromNumber(0);\n    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n        return { quotient: value, rem: _rem };\n    }\n    for (let i = 0; i <= 3; i++) {\n        _rem = _rem.shiftLeft(32);\n        _rem = _rem.add(new Long(value.parts[i], 0));\n        value.parts[i] = _rem.div(DIVISOR).low;\n        _rem = _rem.modulo(DIVISOR);\n    }\n    return { quotient: value, rem: _rem };\n}\nfunction multiply64x2(left, right) {\n    if (!left && !right) {\n        return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n    }\n    const leftHigh = left.shiftRightUnsigned(32);\n    const leftLow = new Long(left.getLowBits(), 0);\n    const rightHigh = right.shiftRightUnsigned(32);\n    const rightLow = new Long(right.getLowBits(), 0);\n    let productHigh = leftHigh.multiply(rightHigh);\n    let productMid = leftHigh.multiply(rightLow);\n    const productMid2 = leftLow.multiply(rightHigh);\n    let productLow = leftLow.multiply(rightLow);\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productMid = new Long(productMid.getLowBits(), 0)\n        .add(productMid2)\n        .add(productLow.shiftRightUnsigned(32));\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n    return { high: productHigh, low: productLow };\n}\nfunction lessThan(left, right) {\n    const uhleft = left.high >>> 0;\n    const uhright = right.high >>> 0;\n    if (uhleft < uhright) {\n        return true;\n    }\n    else if (uhleft === uhright) {\n        const ulleft = left.low >>> 0;\n        const ulright = right.low >>> 0;\n        if (ulleft < ulright)\n            return true;\n    }\n    return false;\n}\nfunction invalidErr(string, message) {\n    throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\nclass Decimal128 extends BSONValue {\n    get _bsontype() {\n        return 'Decimal128';\n    }\n    constructor(bytes) {\n        super();\n        if (typeof bytes === 'string') {\n            this.bytes = Decimal128.fromString(bytes).bytes;\n        }\n        else if (bytes instanceof Uint8Array || isUint8Array(bytes)) {\n            if (bytes.byteLength !== 16) {\n                throw new BSONError('Decimal128 must take a Buffer of 16 bytes');\n            }\n            this.bytes = bytes;\n        }\n        else {\n            throw new BSONError('Decimal128 must take a Buffer or string');\n        }\n    }\n    static fromString(representation) {\n        return Decimal128._fromString(representation, { allowRounding: false });\n    }\n    static fromStringWithRounding(representation) {\n        return Decimal128._fromString(representation, { allowRounding: true });\n    }\n    static _fromString(representation, options) {\n        let isNegative = false;\n        let sawSign = false;\n        let sawRadix = false;\n        let foundNonZero = false;\n        let significantDigits = 0;\n        let nDigitsRead = 0;\n        let nDigits = 0;\n        let radixPosition = 0;\n        let firstNonZero = 0;\n        const digits = [0];\n        let nDigitsStored = 0;\n        let digitsInsert = 0;\n        let lastDigit = 0;\n        let exponent = 0;\n        let significandHigh = new Long(0, 0);\n        let significandLow = new Long(0, 0);\n        let biasedExponent = 0;\n        let index = 0;\n        if (representation.length >= 7000) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        const stringMatch = representation.match(PARSE_STRING_REGEXP);\n        const infMatch = representation.match(PARSE_INF_REGEXP);\n        const nanMatch = representation.match(PARSE_NAN_REGEXP);\n        if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        }\n        if (stringMatch) {\n            const unsignedNumber = stringMatch[2];\n            const e = stringMatch[4];\n            const expSign = stringMatch[5];\n            const expNumber = stringMatch[6];\n            if (e && expNumber === undefined)\n                invalidErr(representation, 'missing exponent power');\n            if (e && unsignedNumber === undefined)\n                invalidErr(representation, 'missing exponent base');\n            if (e === undefined && (expSign || expNumber)) {\n                invalidErr(representation, 'missing e before exponent');\n            }\n        }\n        if (representation[index] === '+' || representation[index] === '-') {\n            sawSign = true;\n            isNegative = representation[index++] === '-';\n        }\n        if (!isDigit(representation[index]) && representation[index] !== '.') {\n            if (representation[index] === 'i' || representation[index] === 'I') {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n            }\n            else if (representation[index] === 'N') {\n                return new Decimal128(NAN_BUFFER);\n            }\n        }\n        while (isDigit(representation[index]) || representation[index] === '.') {\n            if (representation[index] === '.') {\n                if (sawRadix)\n                    invalidErr(representation, 'contains multiple periods');\n                sawRadix = true;\n                index = index + 1;\n                continue;\n            }\n            if (nDigitsStored < MAX_DIGITS) {\n                if (representation[index] !== '0' || foundNonZero) {\n                    if (!foundNonZero) {\n                        firstNonZero = nDigitsRead;\n                    }\n                    foundNonZero = true;\n                    digits[digitsInsert++] = parseInt(representation[index], 10);\n                    nDigitsStored = nDigitsStored + 1;\n                }\n            }\n            if (foundNonZero)\n                nDigits = nDigits + 1;\n            if (sawRadix)\n                radixPosition = radixPosition + 1;\n            nDigitsRead = nDigitsRead + 1;\n            index = index + 1;\n        }\n        if (sawRadix && !nDigitsRead)\n            throw new BSONError('' + representation + ' not a valid Decimal128 string');\n        if (representation[index] === 'e' || representation[index] === 'E') {\n            const match = representation.substr(++index).match(EXPONENT_REGEX);\n            if (!match || !match[2])\n                return new Decimal128(NAN_BUFFER);\n            exponent = parseInt(match[0], 10);\n            index = index + match[0].length;\n        }\n        if (representation[index])\n            return new Decimal128(NAN_BUFFER);\n        if (!nDigitsStored) {\n            digits[0] = 0;\n            nDigits = 1;\n            nDigitsStored = 1;\n            significantDigits = 0;\n        }\n        else {\n            lastDigit = nDigitsStored - 1;\n            significantDigits = nDigits;\n            if (significantDigits !== 1) {\n                while (representation[firstNonZero + significantDigits - 1 + Number(sawSign) + Number(sawRadix)] === '0') {\n                    significantDigits = significantDigits - 1;\n                }\n            }\n        }\n        if (exponent <= radixPosition && radixPosition > exponent + (1 << 14)) {\n            exponent = EXPONENT_MIN;\n        }\n        else {\n            exponent = exponent - radixPosition;\n        }\n        while (exponent > EXPONENT_MAX) {\n            lastDigit = lastDigit + 1;\n            if (lastDigit >= MAX_DIGITS) {\n                if (significantDigits === 0) {\n                    exponent = EXPONENT_MAX;\n                    break;\n                }\n                invalidErr(representation, 'overflow');\n            }\n            exponent = exponent - 1;\n        }\n        if (options.allowRounding) {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0 && significantDigits < nDigitsStored) {\n                    exponent = EXPONENT_MIN;\n                    significantDigits = 0;\n                    break;\n                }\n                if (nDigitsStored < nDigits) {\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    const digitsString = digits.join('');\n                    if (digitsString.match(/^0+$/)) {\n                        exponent = EXPONENT_MAX;\n                        break;\n                    }\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                let endOfString = nDigitsRead;\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                let roundBit = 0;\n                if (roundDigit >= 5) {\n                    roundBit = 1;\n                    if (roundDigit === 5) {\n                        roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n                        for (let i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n                            if (parseInt(representation[i], 10)) {\n                                roundBit = 1;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (roundBit) {\n                    let dIdx = lastDigit;\n                    for (; dIdx >= 0; dIdx--) {\n                        if (++digits[dIdx] > 9) {\n                            digits[dIdx] = 0;\n                            if (dIdx === 0) {\n                                if (exponent < EXPONENT_MAX) {\n                                    exponent = exponent + 1;\n                                    digits[dIdx] = 1;\n                                }\n                                else {\n                                    return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n                                }\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n                if (lastDigit === 0) {\n                    if (significantDigits === 0) {\n                        exponent = EXPONENT_MIN;\n                        break;\n                    }\n                    invalidErr(representation, 'exponent underflow');\n                }\n                if (nDigitsStored < nDigits) {\n                    if (representation[nDigits - 1 + Number(sawSign) + Number(sawRadix)] !== '0' &&\n                        significantDigits !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    nDigits = nDigits - 1;\n                }\n                else {\n                    if (digits[lastDigit] !== 0) {\n                        invalidErr(representation, 'inexact rounding');\n                    }\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                }\n                else {\n                    invalidErr(representation, 'overflow');\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                if (roundDigit !== 0) {\n                    invalidErr(representation, 'inexact rounding');\n                }\n            }\n        }\n        significandHigh = Long.fromNumber(0);\n        significandLow = Long.fromNumber(0);\n        if (significantDigits === 0) {\n            significandHigh = Long.fromNumber(0);\n            significandLow = Long.fromNumber(0);\n        }\n        else if (lastDigit < 17) {\n            let dIdx = 0;\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            significandHigh = new Long(0, 0);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        else {\n            let dIdx = 0;\n            significandHigh = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit - 17; dIdx++) {\n                significandHigh = significandHigh.multiply(Long.fromNumber(10));\n                significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n            }\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            for (; dIdx <= lastDigit; dIdx++) {\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n        significand.low = significand.low.add(significandLow);\n        if (lessThan(significand.low, significandLow)) {\n            significand.high = significand.high.add(Long.fromNumber(1));\n        }\n        biasedExponent = exponent + EXPONENT_BIAS;\n        const dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {\n            dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n        }\n        else {\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n        }\n        dec.low = significand.low;\n        if (isNegative) {\n            dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n        }\n        const buffer = ByteUtils.allocateUnsafe(16);\n        index = 0;\n        buffer[index++] = dec.low.low & 0xff;\n        buffer[index++] = (dec.low.low >> 8) & 0xff;\n        buffer[index++] = (dec.low.low >> 16) & 0xff;\n        buffer[index++] = (dec.low.low >> 24) & 0xff;\n        buffer[index++] = dec.low.high & 0xff;\n        buffer[index++] = (dec.low.high >> 8) & 0xff;\n        buffer[index++] = (dec.low.high >> 16) & 0xff;\n        buffer[index++] = (dec.low.high >> 24) & 0xff;\n        buffer[index++] = dec.high.low & 0xff;\n        buffer[index++] = (dec.high.low >> 8) & 0xff;\n        buffer[index++] = (dec.high.low >> 16) & 0xff;\n        buffer[index++] = (dec.high.low >> 24) & 0xff;\n        buffer[index++] = dec.high.high & 0xff;\n        buffer[index++] = (dec.high.high >> 8) & 0xff;\n        buffer[index++] = (dec.high.high >> 16) & 0xff;\n        buffer[index++] = (dec.high.high >> 24) & 0xff;\n        return new Decimal128(buffer);\n    }\n    toString() {\n        let biased_exponent;\n        let significand_digits = 0;\n        const significand = new Array(36);\n        for (let i = 0; i < significand.length; i++)\n            significand[i] = 0;\n        let index = 0;\n        let is_zero = false;\n        let significand_msb;\n        let significand128 = { parts: [0, 0, 0, 0] };\n        let j, k;\n        const string = [];\n        index = 0;\n        const buffer = this.bytes;\n        const low = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midl = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const midh = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        const high = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n        index = 0;\n        const dec = {\n            low: new Long(low, midl),\n            high: new Long(midh, high)\n        };\n        if (dec.high.lessThan(Long.ZERO)) {\n            string.push('-');\n        }\n        const combination = (high >> 26) & COMBINATION_MASK;\n        if (combination >> 3 === 3) {\n            if (combination === COMBINATION_INFINITY) {\n                return string.join('') + 'Infinity';\n            }\n            else if (combination === COMBINATION_NAN) {\n                return 'NaN';\n            }\n            else {\n                biased_exponent = (high >> 15) & EXPONENT_MASK;\n                significand_msb = 0x08 + ((high >> 14) & 0x01);\n            }\n        }\n        else {\n            significand_msb = (high >> 14) & 0x07;\n            biased_exponent = (high >> 17) & EXPONENT_MASK;\n        }\n        const exponent = biased_exponent - EXPONENT_BIAS;\n        significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n        significand128.parts[1] = midh;\n        significand128.parts[2] = midl;\n        significand128.parts[3] = low;\n        if (significand128.parts[0] === 0 &&\n            significand128.parts[1] === 0 &&\n            significand128.parts[2] === 0 &&\n            significand128.parts[3] === 0) {\n            is_zero = true;\n        }\n        else {\n            for (k = 3; k >= 0; k--) {\n                let least_digits = 0;\n                const result = divideu128(significand128);\n                significand128 = result.quotient;\n                least_digits = result.rem.low;\n                if (!least_digits)\n                    continue;\n                for (j = 8; j >= 0; j--) {\n                    significand[k * 9 + j] = least_digits % 10;\n                    least_digits = Math.floor(least_digits / 10);\n                }\n            }\n        }\n        if (is_zero) {\n            significand_digits = 1;\n            significand[index] = 0;\n        }\n        else {\n            significand_digits = 36;\n            while (!significand[index]) {\n                significand_digits = significand_digits - 1;\n                index = index + 1;\n            }\n        }\n        const scientific_exponent = significand_digits - 1 + exponent;\n        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n            if (significand_digits > 34) {\n                string.push(`${0}`);\n                if (exponent > 0)\n                    string.push(`E+${exponent}`);\n                else if (exponent < 0)\n                    string.push(`E${exponent}`);\n                return string.join('');\n            }\n            string.push(`${significand[index++]}`);\n            significand_digits = significand_digits - 1;\n            if (significand_digits) {\n                string.push('.');\n            }\n            for (let i = 0; i < significand_digits; i++) {\n                string.push(`${significand[index++]}`);\n            }\n            string.push('E');\n            if (scientific_exponent > 0) {\n                string.push(`+${scientific_exponent}`);\n            }\n            else {\n                string.push(`${scientific_exponent}`);\n            }\n        }\n        else {\n            if (exponent >= 0) {\n                for (let i = 0; i < significand_digits; i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n            else {\n                let radix_position = significand_digits + exponent;\n                if (radix_position > 0) {\n                    for (let i = 0; i < radix_position; i++) {\n                        string.push(`${significand[index++]}`);\n                    }\n                }\n                else {\n                    string.push('0');\n                }\n                string.push('.');\n                while (radix_position++ < 0) {\n                    string.push('0');\n                }\n                for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n                    string.push(`${significand[index++]}`);\n                }\n            }\n        }\n        return string.join('');\n    }\n    toJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    toExtendedJSON() {\n        return { $numberDecimal: this.toString() };\n    }\n    static fromExtendedJSON(doc) {\n        return Decimal128.fromString(doc.$numberDecimal);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const d128string = inspect(this.toString(), options);\n        return `new Decimal128(${d128string})`;\n    }\n}\n\nclass Double extends BSONValue {\n    get _bsontype() {\n        return 'Double';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value;\n    }\n    static fromString(value) {\n        const coercedValue = Number(value);\n        if (value === 'NaN')\n            return new Double(NaN);\n        if (value === 'Infinity')\n            return new Double(Infinity);\n        if (value === '-Infinity')\n            return new Double(-Infinity);\n        if (!Number.isFinite(coercedValue)) {\n            throw new BSONError(`Input: ${value} is not representable as a Double`);\n        }\n        if (value.trim() !== value) {\n            throw new BSONError(`Input: '${value}' contains whitespace`);\n        }\n        if (value === '') {\n            throw new BSONError(`Input is an empty string`);\n        }\n        if (/[^-0-9.+eE]/.test(value)) {\n            throw new BSONError(`Input: '${value}' is not in decimal or exponential notation`);\n        }\n        return new Double(coercedValue);\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toExtendedJSON(options) {\n        if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n            return this.value;\n        }\n        if (Object.is(Math.sign(this.value), -0)) {\n            return { $numberDouble: '-0.0' };\n        }\n        return {\n            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        const doubleValue = parseFloat(doc.$numberDouble);\n        return options && options.relaxed ? doubleValue : new Double(doubleValue);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Double(${inspect(this.value, options)})`;\n    }\n}\n\nclass Int32 extends BSONValue {\n    get _bsontype() {\n        return 'Int32';\n    }\n    constructor(value) {\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value | 0;\n    }\n    static fromString(value) {\n        const cleanedValue = removeLeadingZerosAndExplicitPlus(value);\n        const coercedValue = Number(value);\n        if (BSON_INT32_MAX < coercedValue) {\n            throw new BSONError(`Input: '${value}' is larger than the maximum value for Int32`);\n        }\n        else if (BSON_INT32_MIN > coercedValue) {\n            throw new BSONError(`Input: '${value}' is smaller than the minimum value for Int32`);\n        }\n        else if (!Number.isSafeInteger(coercedValue)) {\n            throw new BSONError(`Input: '${value}' is not a safe integer`);\n        }\n        else if (coercedValue.toString() !== cleanedValue) {\n            throw new BSONError(`Input: '${value}' is not a valid Int32 string`);\n        }\n        return new Int32(coercedValue);\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON(options) {\n        if (options && (options.relaxed || options.legacy))\n            return this.value;\n        return { $numberInt: this.value.toString() };\n    }\n    static fromExtendedJSON(doc, options) {\n        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Int32(${inspect(this.value, options)})`;\n    }\n}\n\nclass MaxKey extends BSONValue {\n    get _bsontype() {\n        return 'MaxKey';\n    }\n    toExtendedJSON() {\n        return { $maxKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MaxKey();\n    }\n    inspect() {\n        return 'new MaxKey()';\n    }\n}\n\nclass MinKey extends BSONValue {\n    get _bsontype() {\n        return 'MinKey';\n    }\n    toExtendedJSON() {\n        return { $minKey: 1 };\n    }\n    static fromExtendedJSON() {\n        return new MinKey();\n    }\n    inspect() {\n        return 'new MinKey()';\n    }\n}\n\nlet PROCESS_UNIQUE = null;\nconst __idCache = new WeakMap();\nclass ObjectId extends BSONValue {\n    get _bsontype() {\n        return 'ObjectId';\n    }\n    constructor(inputId) {\n        super();\n        let workingId;\n        if (typeof inputId === 'object' && inputId && 'id' in inputId) {\n            if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {\n                throw new BSONError('Argument passed in must have an id that is of type string or Buffer');\n            }\n            if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {\n                workingId = ByteUtils.fromHex(inputId.toHexString());\n            }\n            else {\n                workingId = inputId.id;\n            }\n        }\n        else {\n            workingId = inputId;\n        }\n        if (workingId == null || typeof workingId === 'number') {\n            this.buffer = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);\n        }\n        else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n            this.buffer = ByteUtils.toLocalBufferType(workingId);\n        }\n        else if (typeof workingId === 'string') {\n            if (ObjectId.validateHexString(workingId)) {\n                this.buffer = ByteUtils.fromHex(workingId);\n                if (ObjectId.cacheHexString) {\n                    __idCache.set(this, workingId);\n                }\n            }\n            else {\n                throw new BSONError('input must be a 24 character hex string, 12 byte Uint8Array, or an integer');\n            }\n        }\n        else {\n            throw new BSONError('Argument passed in does not match the accepted types');\n        }\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n        if (ObjectId.cacheHexString) {\n            __idCache.set(this, ByteUtils.toHex(value));\n        }\n    }\n    static validateHexString(string) {\n        if (string?.length !== 24)\n            return false;\n        for (let i = 0; i < 24; i++) {\n            const char = string.charCodeAt(i);\n            if ((char >= 48 && char <= 57) ||\n                (char >= 97 && char <= 102) ||\n                (char >= 65 && char <= 70)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    toHexString() {\n        if (ObjectId.cacheHexString) {\n            const __id = __idCache.get(this);\n            if (__id)\n                return __id;\n        }\n        const hexString = ByteUtils.toHex(this.id);\n        if (ObjectId.cacheHexString) {\n            __idCache.set(this, hexString);\n        }\n        return hexString;\n    }\n    static getInc() {\n        return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);\n    }\n    static generate(time) {\n        if ('number' !== typeof time) {\n            time = Math.floor(Date.now() / 1000);\n        }\n        const inc = ObjectId.getInc();\n        const buffer = ByteUtils.allocateUnsafe(12);\n        NumberUtils.setInt32BE(buffer, 0, time);\n        if (PROCESS_UNIQUE === null) {\n            PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n        }\n        buffer[4] = PROCESS_UNIQUE[0];\n        buffer[5] = PROCESS_UNIQUE[1];\n        buffer[6] = PROCESS_UNIQUE[2];\n        buffer[7] = PROCESS_UNIQUE[3];\n        buffer[8] = PROCESS_UNIQUE[4];\n        buffer[11] = inc & 0xff;\n        buffer[10] = (inc >> 8) & 0xff;\n        buffer[9] = (inc >> 16) & 0xff;\n        return buffer;\n    }\n    toString(encoding) {\n        if (encoding === 'base64')\n            return ByteUtils.toBase64(this.id);\n        if (encoding === 'hex')\n            return this.toHexString();\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    static is(variable) {\n        return (variable != null &&\n            typeof variable === 'object' &&\n            '_bsontype' in variable &&\n            variable._bsontype === 'ObjectId');\n    }\n    equals(otherId) {\n        if (otherId === undefined || otherId === null) {\n            return false;\n        }\n        if (ObjectId.is(otherId)) {\n            return (this.buffer[11] === otherId.buffer[11] && ByteUtils.equals(this.buffer, otherId.buffer));\n        }\n        if (typeof otherId === 'string') {\n            return otherId.toLowerCase() === this.toHexString();\n        }\n        if (typeof otherId === 'object' && typeof otherId.toHexString === 'function') {\n            const otherIdString = otherId.toHexString();\n            const thisIdString = this.toHexString();\n            return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;\n        }\n        return false;\n    }\n    getTimestamp() {\n        const timestamp = new Date();\n        const time = NumberUtils.getUint32BE(this.buffer, 0);\n        timestamp.setTime(Math.floor(time) * 1000);\n        return timestamp;\n    }\n    static createPk() {\n        return new ObjectId();\n    }\n    serializeInto(uint8array, index) {\n        uint8array[index] = this.buffer[0];\n        uint8array[index + 1] = this.buffer[1];\n        uint8array[index + 2] = this.buffer[2];\n        uint8array[index + 3] = this.buffer[3];\n        uint8array[index + 4] = this.buffer[4];\n        uint8array[index + 5] = this.buffer[5];\n        uint8array[index + 6] = this.buffer[6];\n        uint8array[index + 7] = this.buffer[7];\n        uint8array[index + 8] = this.buffer[8];\n        uint8array[index + 9] = this.buffer[9];\n        uint8array[index + 10] = this.buffer[10];\n        uint8array[index + 11] = this.buffer[11];\n        return 12;\n    }\n    static createFromTime(time) {\n        const buffer = ByteUtils.allocate(12);\n        for (let i = 11; i >= 4; i--)\n            buffer[i] = 0;\n        NumberUtils.setInt32BE(buffer, 0, time);\n        return new ObjectId(buffer);\n    }\n    static createFromHexString(hexString) {\n        if (hexString?.length !== 24) {\n            throw new BSONError('hex string must be 24 characters');\n        }\n        return new ObjectId(ByteUtils.fromHex(hexString));\n    }\n    static createFromBase64(base64) {\n        if (base64?.length !== 16) {\n            throw new BSONError('base64 string must be 16 characters');\n        }\n        return new ObjectId(ByteUtils.fromBase64(base64));\n    }\n    static isValid(id) {\n        if (id == null)\n            return false;\n        if (typeof id === 'string')\n            return ObjectId.validateHexString(id);\n        try {\n            new ObjectId(id);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    toExtendedJSON() {\n        if (this.toHexString)\n            return { $oid: this.toHexString() };\n        return { $oid: this.toString('hex') };\n    }\n    static fromExtendedJSON(doc) {\n        return new ObjectId(doc.$oid);\n    }\n    isCached() {\n        return ObjectId.cacheHexString && __idCache.has(this);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new ObjectId(${inspect(this.toHexString(), options)})`;\n    }\n}\nObjectId.index = Math.floor(Math.random() * 0xffffff);\n\nfunction internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n    let totalLength = 4 + 1;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n        }\n        for (const key of Object.keys(object)) {\n            totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n        }\n    }\n    return totalLength;\n}\nfunction calculateElement(name, value, serializeFunctions = false, isArray = false, ignoreUndefined = false) {\n    if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n    }\n    switch (typeof value) {\n        case 'string':\n            return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n        case 'number':\n            if (Math.floor(value) === value &&\n                value >= JS_INT_MIN &&\n                value <= JS_INT_MAX) {\n                if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n                }\n                else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n                }\n            }\n            else {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n        case 'undefined':\n            if (isArray || !ignoreUndefined)\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            return 0;\n        case 'boolean':\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n        case 'object':\n            if (value != null &&\n                typeof value._bsontype === 'string' &&\n                value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            }\n            else if (value == null || value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            }\n            else if (value._bsontype === 'ObjectId') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n            }\n            else if (value instanceof Date || isDate(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (ArrayBuffer.isView(value) ||\n                value instanceof ArrayBuffer ||\n                isAnyArrayBuffer(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength);\n            }\n            else if (value._bsontype === 'Long' ||\n                value._bsontype === 'Double' ||\n                value._bsontype === 'Timestamp') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n            else if (value._bsontype === 'Decimal128') {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n            }\n            else if (value._bsontype === 'Code') {\n                if (value.scope != null && Object.keys(value.scope).length > 0) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1 +\n                        internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        1 +\n                        4 +\n                        ByteUtils.utf8ByteLength(value.code.toString()) +\n                        1);\n                }\n            }\n            else if (value._bsontype === 'Binary') {\n                const binary = value;\n                if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                        (binary.position + 1 + 4 + 1 + 4));\n                }\n                else {\n                    return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1));\n                }\n            }\n            else if (value._bsontype === 'Symbol') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    ByteUtils.utf8ByteLength(value.value) +\n                    4 +\n                    1 +\n                    1);\n            }\n            else if (value._bsontype === 'DBRef') {\n                const ordered_values = Object.assign({\n                    $ref: value.collection,\n                    $id: value.oid\n                }, value.fields);\n                if (value.db != null) {\n                    ordered_values['$db'] = value.db;\n                }\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined));\n            }\n            else if (value instanceof RegExp || isRegExp(value)) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.source) +\n                    1 +\n                    (value.global ? 1 : 0) +\n                    (value.ignoreCase ? 1 : 0) +\n                    (value.multiline ? 1 : 0) +\n                    1);\n            }\n            else if (value._bsontype === 'BSONRegExp') {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.pattern) +\n                    1 +\n                    ByteUtils.utf8ByteLength(value.options) +\n                    1);\n            }\n            else {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n                    1);\n            }\n        case 'function':\n            if (serializeFunctions) {\n                return ((name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n                    1 +\n                    4 +\n                    ByteUtils.utf8ByteLength(value.toString()) +\n                    1);\n            }\n            return 0;\n        case 'bigint':\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n        case 'symbol':\n            return 0;\n        default:\n            throw new BSONError(`Unrecognized JS type: ${typeof value}`);\n    }\n}\n\nfunction alphabetize(str) {\n    return str.split('').sort().join('');\n}\nclass BSONRegExp extends BSONValue {\n    get _bsontype() {\n        return 'BSONRegExp';\n    }\n    constructor(pattern, options) {\n        super();\n        this.pattern = pattern;\n        this.options = alphabetize(options ?? '');\n        if (this.pattern.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);\n        }\n        if (this.options.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);\n        }\n        for (let i = 0; i < this.options.length; i++) {\n            if (!(this.options[i] === 'i' ||\n                this.options[i] === 'm' ||\n                this.options[i] === 'x' ||\n                this.options[i] === 'l' ||\n                this.options[i] === 's' ||\n                this.options[i] === 'u')) {\n                throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n            }\n        }\n    }\n    static parseOptions(options) {\n        return options ? options.split('').sort().join('') : '';\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (options.legacy) {\n            return { $regex: this.pattern, $options: this.options };\n        }\n        return { $regularExpression: { pattern: this.pattern, options: this.options } };\n    }\n    static fromExtendedJSON(doc) {\n        if ('$regex' in doc) {\n            if (typeof doc.$regex !== 'string') {\n                if (doc.$regex._bsontype === 'BSONRegExp') {\n                    return doc;\n                }\n            }\n            else {\n                return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n            }\n        }\n        if ('$regularExpression' in doc) {\n            return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));\n        }\n        throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n    }\n    inspect(depth, options, inspect) {\n        const stylize = getStylizeFunction(options) ?? (v => v);\n        inspect ??= defaultInspect;\n        const pattern = stylize(inspect(this.pattern), 'regexp');\n        const flags = stylize(inspect(this.options), 'regexp');\n        return `new BSONRegExp(${pattern}, ${flags})`;\n    }\n}\n\nclass BSONSymbol extends BSONValue {\n    get _bsontype() {\n        return 'BSONSymbol';\n    }\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON() {\n        return { $symbol: this.value };\n    }\n    static fromExtendedJSON(doc) {\n        return new BSONSymbol(doc.$symbol);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new BSONSymbol(${inspect(this.value, options)})`;\n    }\n}\n\nconst LongWithoutOverridesClass = Long;\nclass Timestamp extends LongWithoutOverridesClass {\n    get _bsontype() {\n        return 'Timestamp';\n    }\n    get i() {\n        return this.low >>> 0;\n    }\n    get t() {\n        return this.high >>> 0;\n    }\n    constructor(low) {\n        if (low == null) {\n            super(0, 0, true);\n        }\n        else if (typeof low === 'bigint') {\n            super(low, true);\n        }\n        else if (Long.isLong(low)) {\n            super(low.low, low.high, true);\n        }\n        else if (typeof low === 'object' && 't' in low && 'i' in low) {\n            if (typeof low.t !== 'number' && (typeof low.t !== 'object' || low.t._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t as a number');\n            }\n            if (typeof low.i !== 'number' && (typeof low.i !== 'object' || low.i._bsontype !== 'Int32')) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i as a number');\n            }\n            const t = Number(low.t);\n            const i = Number(low.i);\n            if (t < 0 || Number.isNaN(t)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive t');\n            }\n            if (i < 0 || Number.isNaN(i)) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide a positive i');\n            }\n            if (t > 0xffff_ffff) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide t equal or less than uint32 max');\n            }\n            if (i > 0xffff_ffff) {\n                throw new BSONError('Timestamp constructed from { t, i } must provide i equal or less than uint32 max');\n            }\n            super(i, t, true);\n        }\n        else {\n            throw new BSONError('A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }');\n        }\n    }\n    toJSON() {\n        return {\n            $timestamp: this.toString()\n        };\n    }\n    static fromInt(value) {\n        return new Timestamp(Long.fromInt(value, true));\n    }\n    static fromNumber(value) {\n        return new Timestamp(Long.fromNumber(value, true));\n    }\n    static fromBits(lowBits, highBits) {\n        return new Timestamp({ i: lowBits, t: highBits });\n    }\n    static fromString(str, optRadix) {\n        return new Timestamp(Long.fromString(str, true, optRadix));\n    }\n    toExtendedJSON() {\n        return { $timestamp: { t: this.t, i: this.i } };\n    }\n    static fromExtendedJSON(doc) {\n        const i = Long.isLong(doc.$timestamp.i)\n            ? doc.$timestamp.i.getLowBitsUnsigned()\n            : doc.$timestamp.i;\n        const t = Long.isLong(doc.$timestamp.t)\n            ? doc.$timestamp.t.getLowBitsUnsigned()\n            : doc.$timestamp.t;\n        return new Timestamp({ t, i });\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const t = inspect(this.t, options);\n        const i = inspect(this.i, options);\n        return `new Timestamp({ t: ${t}, i: ${i} })`;\n    }\n}\nTimestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\n\nconst JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);\nfunction internalDeserialize(buffer, options, isArray) {\n    options = options == null ? {} : options;\n    const index = options && options.index ? options.index : 0;\n    const size = NumberUtils.getInt32LE(buffer, index);\n    if (size < 5) {\n        throw new BSONError(`bson size must be >= 5, is ${size}`);\n    }\n    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n        throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n    }\n    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n        throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n    }\n    if (size + index > buffer.byteLength) {\n        throw new BSONError(`(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`);\n    }\n    if (buffer[index + size - 1] !== 0) {\n        throw new BSONError(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n    }\n    return deserializeObject(buffer, index, options, isArray);\n}\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\nfunction deserializeObject(buffer, index, options, isArray = false) {\n    const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n    const raw = options['raw'] == null ? false : options['raw'];\n    const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n    const promoteBuffers = options.promoteBuffers ?? false;\n    const promoteLongs = options.promoteLongs ?? true;\n    const promoteValues = options.promoteValues ?? true;\n    const useBigInt64 = options.useBigInt64 ?? false;\n    if (useBigInt64 && !promoteValues) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    if (useBigInt64 && !promoteLongs) {\n        throw new BSONError('Must either request bigint or Long for int64 deserialization');\n    }\n    const validation = options.validation == null ? { utf8: true } : options.validation;\n    let globalUTFValidation = true;\n    let validationSetting;\n    let utf8KeysSet;\n    const utf8ValidatedKeys = validation.utf8;\n    if (typeof utf8ValidatedKeys === 'boolean') {\n        validationSetting = utf8ValidatedKeys;\n    }\n    else {\n        globalUTFValidation = false;\n        const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {\n            return utf8ValidatedKeys[key];\n        });\n        if (utf8ValidationValues.length === 0) {\n            throw new BSONError('UTF-8 validation setting cannot be empty');\n        }\n        if (typeof utf8ValidationValues[0] !== 'boolean') {\n            throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');\n        }\n        validationSetting = utf8ValidationValues[0];\n        if (!utf8ValidationValues.every(item => item === validationSetting)) {\n            throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');\n        }\n    }\n    if (!globalUTFValidation) {\n        utf8KeysSet = new Set();\n        for (const key of Object.keys(utf8ValidatedKeys)) {\n            utf8KeysSet.add(key);\n        }\n    }\n    const startIndex = index;\n    if (buffer.length < 5)\n        throw new BSONError('corrupt bson message < 5 bytes long');\n    const size = NumberUtils.getInt32LE(buffer, index);\n    index += 4;\n    if (size < 5 || size > buffer.length)\n        throw new BSONError('corrupt bson message');\n    const object = isArray ? [] : {};\n    let arrayIndex = 0;\n    let isPossibleDBRef = isArray ? false : null;\n    while (true) {\n        const elementType = buffer[index++];\n        if (elementType === 0)\n            break;\n        let i = index;\n        while (buffer[i] !== 0x00 && i < buffer.length) {\n            i++;\n        }\n        if (i >= buffer.byteLength)\n            throw new BSONError('Bad BSON Document: illegal CString');\n        const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i, false);\n        let shouldValidateKey = true;\n        if (globalUTFValidation || utf8KeysSet?.has(name)) {\n            shouldValidateKey = validationSetting;\n        }\n        else {\n            shouldValidateKey = !validationSetting;\n        }\n        if (isPossibleDBRef !== false && name[0] === '$') {\n            isPossibleDBRef = allowedDBRefKeys.test(name);\n        }\n        let value;\n        index = i + 1;\n        if (elementType === BSON_DATA_STRING) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            value = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_OID) {\n            const oid = ByteUtils.allocateUnsafe(12);\n            for (let i = 0; i < 12; i++)\n                oid[i] = buffer[index + i];\n            value = new ObjectId(oid);\n            index = index + 12;\n        }\n        else if (elementType === BSON_DATA_INT && promoteValues === false) {\n            value = new Int32(NumberUtils.getInt32LE(buffer, index));\n            index += 4;\n        }\n        else if (elementType === BSON_DATA_INT) {\n            value = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n        }\n        else if (elementType === BSON_DATA_NUMBER) {\n            value = NumberUtils.getFloat64LE(buffer, index);\n            index += 8;\n            if (promoteValues === false)\n                value = new Double(value);\n        }\n        else if (elementType === BSON_DATA_DATE) {\n            const lowBits = NumberUtils.getInt32LE(buffer, index);\n            const highBits = NumberUtils.getInt32LE(buffer, index + 4);\n            index += 8;\n            value = new Date(new Long(lowBits, highBits).toNumber());\n        }\n        else if (elementType === BSON_DATA_BOOLEAN) {\n            if (buffer[index] !== 0 && buffer[index] !== 1)\n                throw new BSONError('illegal boolean type value');\n            value = buffer[index++] === 1;\n        }\n        else if (elementType === BSON_DATA_OBJECT) {\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            if (objectSize <= 0 || objectSize > buffer.length - index)\n                throw new BSONError('bad embedded document length in bson');\n            if (raw) {\n                value = buffer.subarray(index, index + objectSize);\n            }\n            else {\n                let objectOptions = options;\n                if (!globalUTFValidation) {\n                    objectOptions = { ...options, validation: { utf8: shouldValidateKey } };\n                }\n                value = deserializeObject(buffer, _index, objectOptions, false);\n            }\n            index = index + objectSize;\n        }\n        else if (elementType === BSON_DATA_ARRAY) {\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            let arrayOptions = options;\n            const stopIndex = index + objectSize;\n            if (fieldsAsRaw && fieldsAsRaw[name]) {\n                arrayOptions = { ...options, raw: true };\n            }\n            if (!globalUTFValidation) {\n                arrayOptions = { ...arrayOptions, validation: { utf8: shouldValidateKey } };\n            }\n            value = deserializeObject(buffer, _index, arrayOptions, true);\n            index = index + objectSize;\n            if (buffer[index - 1] !== 0)\n                throw new BSONError('invalid array terminator byte');\n            if (index !== stopIndex)\n                throw new BSONError('corrupted array bson');\n        }\n        else if (elementType === BSON_DATA_UNDEFINED) {\n            value = undefined;\n        }\n        else if (elementType === BSON_DATA_NULL) {\n            value = null;\n        }\n        else if (elementType === BSON_DATA_LONG) {\n            if (useBigInt64) {\n                value = NumberUtils.getBigInt64LE(buffer, index);\n                index += 8;\n            }\n            else {\n                const lowBits = NumberUtils.getInt32LE(buffer, index);\n                const highBits = NumberUtils.getInt32LE(buffer, index + 4);\n                index += 8;\n                const long = new Long(lowBits, highBits);\n                if (promoteLongs && promoteValues === true) {\n                    value =\n                        long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n                            ? long.toNumber()\n                            : long;\n                }\n                else {\n                    value = long;\n                }\n            }\n        }\n        else if (elementType === BSON_DATA_DECIMAL128) {\n            const bytes = ByteUtils.allocateUnsafe(16);\n            for (let i = 0; i < 16; i++)\n                bytes[i] = buffer[index + i];\n            index = index + 16;\n            value = new Decimal128(bytes);\n        }\n        else if (elementType === BSON_DATA_BINARY) {\n            let binarySize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            const totalBinarySize = binarySize;\n            const subType = buffer[index++];\n            if (binarySize < 0)\n                throw new BSONError('Negative binary type element size found');\n            if (binarySize > buffer.byteLength)\n                throw new BSONError('Binary type size larger than document size');\n            if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                binarySize = NumberUtils.getInt32LE(buffer, index);\n                index += 4;\n                if (binarySize < 0)\n                    throw new BSONError('Negative binary type element size found for subtype 0x02');\n                if (binarySize > totalBinarySize - 4)\n                    throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n                if (binarySize < totalBinarySize - 4)\n                    throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n            }\n            if (promoteBuffers && promoteValues) {\n                value = ByteUtils.toLocalBufferType(buffer.subarray(index, index + binarySize));\n            }\n            else {\n                value = new Binary(buffer.subarray(index, index + binarySize), subType);\n                if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                    value = value.toUUID();\n                }\n            }\n            index = index + binarySize;\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            const optionsArray = new Array(regExpOptions.length);\n            for (i = 0; i < regExpOptions.length; i++) {\n                switch (regExpOptions[i]) {\n                    case 'm':\n                        optionsArray[i] = 'm';\n                        break;\n                    case 's':\n                        optionsArray[i] = 'g';\n                        break;\n                    case 'i':\n                        optionsArray[i] = 'i';\n                        break;\n                }\n            }\n            value = new RegExp(source, optionsArray.join(''));\n        }\n        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const source = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            i = index;\n            while (buffer[i] !== 0x00 && i < buffer.length) {\n                i++;\n            }\n            if (i >= buffer.length)\n                throw new BSONError('Bad BSON Document: illegal CString');\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i, false);\n            index = i + 1;\n            value = new BSONRegExp(source, regExpOptions);\n        }\n        else if (elementType === BSON_DATA_SYMBOL) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const symbol = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = promoteValues ? symbol : new BSONSymbol(symbol);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_TIMESTAMP) {\n            value = new Timestamp({\n                i: NumberUtils.getUint32LE(buffer, index),\n                t: NumberUtils.getUint32LE(buffer, index + 4)\n            });\n            index += 8;\n        }\n        else if (elementType === BSON_DATA_MIN_KEY) {\n            value = new MinKey();\n        }\n        else if (elementType === BSON_DATA_MAX_KEY) {\n            value = new MaxKey();\n        }\n        else if (elementType === BSON_DATA_CODE) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = new Code(functionString);\n            index = index + stringSize;\n        }\n        else if (elementType === BSON_DATA_CODE_W_SCOPE) {\n            const totalSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (totalSize < 4 + 4 + 4 + 1) {\n                throw new BSONError('code_w_scope total size shorter minimum expected length');\n            }\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError('bad string length in bson');\n            }\n            const functionString = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const _index = index;\n            const objectSize = NumberUtils.getInt32LE(buffer, index);\n            const scopeObject = deserializeObject(buffer, _index, options, false);\n            index = index + objectSize;\n            if (totalSize < 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too short, truncating scope');\n            }\n            if (totalSize > 4 + 4 + objectSize + stringSize) {\n                throw new BSONError('code_w_scope total size is too long, clips outer document');\n            }\n            value = new Code(functionString, scopeObject);\n        }\n        else if (elementType === BSON_DATA_DBPOINTER) {\n            const stringSize = NumberUtils.getInt32LE(buffer, index);\n            index += 4;\n            if (stringSize <= 0 ||\n                stringSize > buffer.length - index ||\n                buffer[index + stringSize - 1] !== 0)\n                throw new BSONError('bad string length in bson');\n            const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const oidBuffer = ByteUtils.allocateUnsafe(12);\n            for (let i = 0; i < 12; i++)\n                oidBuffer[i] = buffer[index + i];\n            const oid = new ObjectId(oidBuffer);\n            index = index + 12;\n            value = new DBRef(namespace, oid);\n        }\n        else {\n            throw new BSONError(`Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`);\n        }\n        if (name === '__proto__') {\n            Object.defineProperty(object, name, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        }\n        else {\n            object[name] = value;\n        }\n    }\n    if (size !== index - startIndex) {\n        if (isArray)\n            throw new BSONError('corrupt array bson');\n        throw new BSONError('corrupt object bson');\n    }\n    if (!isPossibleDBRef)\n        return object;\n    if (isDBRefLike(object)) {\n        const copy = Object.assign({}, object);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(object.$ref, object.$id, object.$db, copy);\n    }\n    return object;\n}\n\nconst regexp = /\\x00/;\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\nfunction serializeString(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_STRING;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes + 1;\n    buffer[index - 1] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n    NumberUtils.setInt32LE(buffer, index, size + 1);\n    index = index + 4 + size;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeNumber(buffer, key, value, index) {\n    const isNegativeZero = Object.is(value, -0);\n    const type = !isNegativeZero &&\n        Number.isSafeInteger(value) &&\n        value <= BSON_INT32_MAX &&\n        value >= BSON_INT32_MIN\n        ? BSON_DATA_INT\n        : BSON_DATA_NUMBER;\n    buffer[index++] = type;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0x00;\n    if (type === BSON_DATA_INT) {\n        index += NumberUtils.setInt32LE(buffer, index, value);\n    }\n    else {\n        index += NumberUtils.setFloat64LE(buffer, index, value);\n    }\n    return index;\n}\nfunction serializeBigInt(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_LONG;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index += numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setBigInt64LE(buffer, index, value);\n    return index;\n}\nfunction serializeNull(buffer, key, _, index) {\n    buffer[index++] = BSON_DATA_NULL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeBoolean(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BOOLEAN;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value ? 1 : 0;\n    return index;\n}\nfunction serializeDate(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DATE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const dateInMilis = Long.fromNumber(value.getTime());\n    const lowBits = dateInMilis.getLowBits();\n    const highBits = dateInMilis.getHighBits();\n    index += NumberUtils.setInt32LE(buffer, index, lowBits);\n    index += NumberUtils.setInt32LE(buffer, index, highBits);\n    return index;\n}\nfunction serializeRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.source && value.source.match(regexp) != null) {\n        throw new BSONError('value ' + value.source + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n    buffer[index++] = 0x00;\n    if (value.ignoreCase)\n        buffer[index++] = 0x69;\n    if (value.global)\n        buffer[index++] = 0x73;\n    if (value.multiline)\n        buffer[index++] = 0x6d;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeBSONRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.pattern.match(regexp) != null) {\n        throw new BSONError('pattern ' + value.pattern + ' must not contain null bytes');\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n    buffer[index++] = 0x00;\n    const sortedOptions = value.options.split('').sort().join('');\n    index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeMinMax(buffer, key, value, index) {\n    if (value === null) {\n        buffer[index++] = BSON_DATA_NULL;\n    }\n    else if (value._bsontype === 'MinKey') {\n        buffer[index++] = BSON_DATA_MIN_KEY;\n    }\n    else {\n        buffer[index++] = BSON_DATA_MAX_KEY;\n    }\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeObjectId(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_OID;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += value.serializeInto(buffer, index);\n    return index;\n}\nfunction serializeBuffer(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = value.length;\n    index += NumberUtils.setInt32LE(buffer, index, size);\n    buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;\n    if (size <= 16) {\n        for (let i = 0; i < size; i++)\n            buffer[index + i] = value[i];\n    }\n    else {\n        buffer.set(value, index);\n    }\n    index = index + size;\n    return index;\n}\nfunction serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path.has(value)) {\n        throw new BSONError('Cannot convert circular structure to BSON');\n    }\n    path.add(value);\n    buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n    path.delete(value);\n    return endIndex;\n}\nfunction serializeDecimal128(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DECIMAL128;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    for (let i = 0; i < 16; i++)\n        buffer[index + i] = value.bytes[i];\n    return index + 16;\n}\nfunction serializeLong(buffer, key, value, index) {\n    buffer[index++] =\n        value._bsontype === 'Long' ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const lowBits = value.getLowBits();\n    const highBits = value.getHighBits();\n    index += NumberUtils.setInt32LE(buffer, index, lowBits);\n    index += NumberUtils.setInt32LE(buffer, index, highBits);\n    return index;\n}\nfunction serializeInt32(buffer, key, value, index) {\n    value = value.valueOf();\n    buffer[index++] = BSON_DATA_INT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setInt32LE(buffer, index, value);\n    return index;\n}\nfunction serializeDouble(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_NUMBER;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    index += NumberUtils.setFloat64LE(buffer, index, value.value);\n    return index;\n}\nfunction serializeFunction(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_CODE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const functionString = value.toString();\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    NumberUtils.setInt32LE(buffer, index, size);\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeCode(buffer, key, value, index, checkKeys = false, depth = 0, serializeFunctions = false, ignoreUndefined = true, path) {\n    if (value.scope && typeof value.scope === 'object') {\n        buffer[index++] = BSON_DATA_CODE_W_SCOPE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        let startIndex = index;\n        const functionString = value.code;\n        index = index + 4;\n        const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        NumberUtils.setInt32LE(buffer, index, codeSize);\n        buffer[index + 4 + codeSize - 1] = 0;\n        index = index + codeSize + 4;\n        const endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n        index = endIndex - 1;\n        const totalSize = endIndex - startIndex;\n        startIndex += NumberUtils.setInt32LE(buffer, startIndex, totalSize);\n        buffer[index++] = 0;\n    }\n    else {\n        buffer[index++] = BSON_DATA_CODE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        const functionString = value.code.toString();\n        const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        NumberUtils.setInt32LE(buffer, index, size);\n        index = index + 4 + size - 1;\n        buffer[index++] = 0;\n    }\n    return index;\n}\nfunction serializeBinary(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const data = value.buffer;\n    let size = value.position;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY)\n        size = size + 4;\n    index += NumberUtils.setInt32LE(buffer, index, size);\n    buffer[index++] = value.sub_type;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n        size = size - 4;\n        index += NumberUtils.setInt32LE(buffer, index, size);\n    }\n    if (value.sub_type === Binary.SUBTYPE_VECTOR) {\n        validateBinaryVector(value);\n    }\n    if (size <= 16) {\n        for (let i = 0; i < size; i++)\n            buffer[index + i] = data[i];\n    }\n    else {\n        buffer.set(data, index);\n    }\n    index = index + value.position;\n    return index;\n}\nfunction serializeSymbol(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_SYMBOL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n    NumberUtils.setInt32LE(buffer, index, size);\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path) {\n    buffer[index++] = BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    let startIndex = index;\n    let output = {\n        $ref: value.collection || value.namespace,\n        $id: value.oid\n    };\n    if (value.db != null) {\n        output.$db = value.db;\n    }\n    output = Object.assign(output, value.fields);\n    const endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions, true, path);\n    const size = endIndex - startIndex;\n    startIndex += NumberUtils.setInt32LE(buffer, index, size);\n    return endIndex;\n}\nfunction serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path == null) {\n        if (object == null) {\n            buffer[0] = 0x05;\n            buffer[1] = 0x00;\n            buffer[2] = 0x00;\n            buffer[3] = 0x00;\n            buffer[4] = 0x00;\n            return 5;\n        }\n        if (Array.isArray(object)) {\n            throw new BSONError('serialize does not support an array as the root input');\n        }\n        if (typeof object !== 'object') {\n            throw new BSONError('serialize does not support non-object as the root input');\n        }\n        else if ('_bsontype' in object && typeof object._bsontype === 'string') {\n            throw new BSONError(`BSON types cannot be serialized as a document`);\n        }\n        else if (isDate(object) ||\n            isRegExp(object) ||\n            isUint8Array(object) ||\n            isAnyArrayBuffer(object)) {\n            throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n        }\n        path = new Set();\n    }\n    path.add(object);\n    let index = startingIndex + 4;\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            const key = `${i}`;\n            let value = object[i];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (value === undefined) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    else if (object instanceof Map || isMap(object)) {\n        const iterator = object.entries();\n        let done = false;\n        while (!done) {\n            const entry = iterator.next();\n            done = !!entry.done;\n            if (done)\n                continue;\n            const key = entry.value ? entry.value[0] : undefined;\n            let value = entry.value ? entry.value[1] : undefined;\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (key.includes('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (value === undefined) {\n                if (ignoreUndefined === false)\n                    index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    else {\n        if (typeof object?.toBSON === 'function') {\n            object = object.toBSON();\n            if (object != null && typeof object !== 'object') {\n                throw new BSONError('toBSON function did not return an object');\n            }\n        }\n        for (const key of Object.keys(object)) {\n            let value = object[key];\n            if (typeof value?.toBSON === 'function') {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === 'string' && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError('key ' + key + ' must not contain null bytes');\n                }\n                if (checkKeys) {\n                    if ('$' === key[0]) {\n                        throw new BSONError('key ' + key + \" must not start with '$'\");\n                    }\n                    else if (key.includes('.')) {\n                        throw new BSONError('key ' + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (value === undefined) {\n                if (ignoreUndefined === false)\n                    index = serializeNull(buffer, key, value, index);\n            }\n            else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            }\n            else if (type === 'string') {\n                index = serializeString(buffer, key, value, index);\n            }\n            else if (type === 'number') {\n                index = serializeNumber(buffer, key, value, index);\n            }\n            else if (type === 'bigint') {\n                index = serializeBigInt(buffer, key, value, index);\n            }\n            else if (type === 'boolean') {\n                index = serializeBoolean(buffer, key, value, index);\n            }\n            else if (type === 'object' && value._bsontype == null) {\n                if (value instanceof Date || isDate(value)) {\n                    index = serializeDate(buffer, key, value, index);\n                }\n                else if (value instanceof Uint8Array || isUint8Array(value)) {\n                    index = serializeBuffer(buffer, key, value, index);\n                }\n                else if (value instanceof RegExp || isRegExp(value)) {\n                    index = serializeRegExp(buffer, key, value, index);\n                }\n                else {\n                    index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n            }\n            else if (type === 'object') {\n                if (value[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n                    throw new BSONVersionError();\n                }\n                else if (value._bsontype === 'ObjectId') {\n                    index = serializeObjectId(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Decimal128') {\n                    index = serializeDecimal128(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n                    index = serializeLong(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Double') {\n                    index = serializeDouble(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Code') {\n                    index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n                }\n                else if (value._bsontype === 'Binary') {\n                    index = serializeBinary(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'BSONSymbol') {\n                    index = serializeSymbol(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'DBRef') {\n                    index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n                }\n                else if (value._bsontype === 'BSONRegExp') {\n                    index = serializeBSONRegExp(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'Int32') {\n                    index = serializeInt32(buffer, key, value, index);\n                }\n                else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n                    index = serializeMinMax(buffer, key, value, index);\n                }\n                else if (typeof value._bsontype !== 'undefined') {\n                    throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n                }\n            }\n            else if (type === 'function' && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            }\n        }\n    }\n    path.delete(object);\n    buffer[index++] = 0x00;\n    const size = index - startingIndex;\n    startingIndex += NumberUtils.setInt32LE(buffer, startingIndex, size);\n    return index;\n}\n\nfunction isBSONType(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        '_bsontype' in value &&\n        typeof value._bsontype === 'string');\n}\nconst keysToCodecs = {\n    $oid: ObjectId,\n    $binary: Binary,\n    $uuid: Binary,\n    $symbol: BSONSymbol,\n    $numberInt: Int32,\n    $numberDecimal: Decimal128,\n    $numberDouble: Double,\n    $numberLong: Long,\n    $minKey: MinKey,\n    $maxKey: MaxKey,\n    $regex: BSONRegExp,\n    $regularExpression: BSONRegExp,\n    $timestamp: Timestamp\n};\nfunction deserializeValue(value, options = {}) {\n    if (typeof value === 'number') {\n        const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n        const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n        if (options.relaxed || options.legacy) {\n            return value;\n        }\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (in32BitRange) {\n                return new Int32(value);\n            }\n            if (in64BitRange) {\n                if (options.useBigInt64) {\n                    return BigInt(value);\n                }\n                return Long.fromNumber(value);\n            }\n        }\n        return new Double(value);\n    }\n    if (value == null || typeof value !== 'object')\n        return value;\n    if (value.$undefined)\n        return null;\n    const keys = Object.keys(value).filter(k => k.startsWith('$') && value[k] != null);\n    for (let i = 0; i < keys.length; i++) {\n        const c = keysToCodecs[keys[i]];\n        if (c)\n            return c.fromExtendedJSON(value, options);\n    }\n    if (value.$date != null) {\n        const d = value.$date;\n        const date = new Date();\n        if (options.legacy) {\n            if (typeof d === 'number')\n                date.setTime(d);\n            else if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        else {\n            if (typeof d === 'string')\n                date.setTime(Date.parse(d));\n            else if (Long.isLong(d))\n                date.setTime(d.toNumber());\n            else if (typeof d === 'number' && options.relaxed)\n                date.setTime(d);\n            else if (typeof d === 'bigint')\n                date.setTime(Number(d));\n            else\n                throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        return date;\n    }\n    if (value.$code != null) {\n        const copy = Object.assign({}, value);\n        if (value.$scope) {\n            copy.$scope = deserializeValue(value.$scope);\n        }\n        return Code.fromExtendedJSON(value);\n    }\n    if (isDBRefLike(value) || value.$dbPointer) {\n        const v = value.$ref ? value : value.$dbPointer;\n        if (v instanceof DBRef)\n            return v;\n        const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n        let valid = true;\n        dollarKeys.forEach(k => {\n            if (['$ref', '$id', '$db'].indexOf(k) === -1)\n                valid = false;\n        });\n        if (valid)\n            return DBRef.fromExtendedJSON(v);\n    }\n    return value;\n}\nfunction serializeArray(array, options) {\n    return array.map((v, index) => {\n        options.seenObjects.push({ propertyName: `index ${index}`, obj: null });\n        try {\n            return serializeValue(v, options);\n        }\n        finally {\n            options.seenObjects.pop();\n        }\n    });\n}\nfunction getISOString(date) {\n    const isoStr = date.toISOString();\n    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\nfunction serializeValue(value, options) {\n    if (value instanceof Map || isMap(value)) {\n        const obj = Object.create(null);\n        for (const [k, v] of value) {\n            if (typeof k !== 'string') {\n                throw new BSONError('Can only serialize maps with string keys');\n            }\n            obj[k] = v;\n        }\n        return serializeValue(obj, options);\n    }\n    if ((typeof value === 'object' || typeof value === 'function') && value !== null) {\n        const index = options.seenObjects.findIndex(entry => entry.obj === value);\n        if (index !== -1) {\n            const props = options.seenObjects.map(entry => entry.propertyName);\n            const leadingPart = props\n                .slice(0, index)\n                .map(prop => `${prop} -> `)\n                .join('');\n            const alreadySeen = props[index];\n            const circularPart = ' -> ' +\n                props\n                    .slice(index + 1, props.length - 1)\n                    .map(prop => `${prop} -> `)\n                    .join('');\n            const current = props[props.length - 1];\n            const leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);\n            const dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);\n            throw new BSONError('Converting circular structure to EJSON:\\n' +\n                `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` +\n                `    ${leadingSpace}\\\\${dashes}/`);\n        }\n        options.seenObjects[options.seenObjects.length - 1].obj = value;\n    }\n    if (Array.isArray(value))\n        return serializeArray(value, options);\n    if (value === undefined)\n        return null;\n    if (value instanceof Date || isDate(value)) {\n        const dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 253402318800000;\n        if (options.legacy) {\n            return options.relaxed && inRange\n                ? { $date: value.getTime() }\n                : { $date: getISOString(value) };\n        }\n        return options.relaxed && inRange\n            ? { $date: getISOString(value) }\n            : { $date: { $numberLong: value.getTime().toString() } };\n    }\n    if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                return { $numberInt: value.toString() };\n            }\n            if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n                return { $numberLong: value.toString() };\n            }\n        }\n        return { $numberDouble: Object.is(value, -0) ? '-0.0' : value.toString() };\n    }\n    if (typeof value === 'bigint') {\n        if (!options.relaxed) {\n            return { $numberLong: BigInt.asIntN(64, value).toString() };\n        }\n        return Number(BigInt.asIntN(64, value));\n    }\n    if (value instanceof RegExp || isRegExp(value)) {\n        let flags = value.flags;\n        if (flags === undefined) {\n            const match = value.toString().match(/[gimuy]*$/);\n            if (match) {\n                flags = match[0];\n            }\n        }\n        const rx = new BSONRegExp(value.source, flags);\n        return rx.toExtendedJSON(options);\n    }\n    if (value != null && typeof value === 'object')\n        return serializeDocument(value, options);\n    return value;\n}\nconst BSON_TYPE_MAPPINGS = {\n    Binary: (o) => new Binary(o.value(), o.sub_type),\n    Code: (o) => new Code(o.code, o.scope),\n    DBRef: (o) => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields),\n    Decimal128: (o) => new Decimal128(o.bytes),\n    Double: (o) => new Double(o.value),\n    Int32: (o) => new Int32(o.value),\n    Long: (o) => Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_),\n    MaxKey: () => new MaxKey(),\n    MinKey: () => new MinKey(),\n    ObjectId: (o) => new ObjectId(o),\n    BSONRegExp: (o) => new BSONRegExp(o.pattern, o.options),\n    BSONSymbol: (o) => new BSONSymbol(o.value),\n    Timestamp: (o) => Timestamp.fromBits(o.low, o.high)\n};\nfunction serializeDocument(doc, options) {\n    if (doc == null || typeof doc !== 'object')\n        throw new BSONError('not an object instance');\n    const bsontype = doc._bsontype;\n    if (typeof bsontype === 'undefined') {\n        const _doc = {};\n        for (const name of Object.keys(doc)) {\n            options.seenObjects.push({ propertyName: name, obj: null });\n            try {\n                const value = serializeValue(doc[name], options);\n                if (name === '__proto__') {\n                    Object.defineProperty(_doc, name, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                }\n                else {\n                    _doc[name] = value;\n                }\n            }\n            finally {\n                options.seenObjects.pop();\n            }\n        }\n        return _doc;\n    }\n    else if (doc != null &&\n        typeof doc === 'object' &&\n        typeof doc._bsontype === 'string' &&\n        doc[BSON_VERSION_SYMBOL] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n    }\n    else if (isBSONType(doc)) {\n        let outDoc = doc;\n        if (typeof outDoc.toExtendedJSON !== 'function') {\n            const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n            if (!mapper) {\n                throw new BSONError('Unrecognized or invalid _bsontype: ' + doc._bsontype);\n            }\n            outDoc = mapper(outDoc);\n        }\n        if (bsontype === 'Code' && outDoc.scope) {\n            outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n        }\n        else if (bsontype === 'DBRef' && outDoc.oid) {\n            outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));\n        }\n        return outDoc.toExtendedJSON(options);\n    }\n    else {\n        throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);\n    }\n}\nfunction parse(text, options) {\n    const ejsonOptions = {\n        useBigInt64: options?.useBigInt64 ?? false,\n        relaxed: options?.relaxed ?? true,\n        legacy: options?.legacy ?? false\n    };\n    return JSON.parse(text, (key, value) => {\n        if (key.indexOf('\\x00') !== -1) {\n            throw new BSONError(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`);\n        }\n        return deserializeValue(value, ejsonOptions);\n    });\n}\nfunction stringify(value, replacer, space, options) {\n    if (space != null && typeof space === 'object') {\n        options = space;\n        space = 0;\n    }\n    if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n        options = replacer;\n        replacer = undefined;\n        space = 0;\n    }\n    const serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {\n        seenObjects: [{ propertyName: '(root)', obj: null }]\n    });\n    const doc = serializeValue(value, serializeOptions);\n    return JSON.stringify(doc, replacer, space);\n}\nfunction EJSONserialize(value, options) {\n    options = options || {};\n    return JSON.parse(stringify(value, options));\n}\nfunction EJSONdeserialize(ejson, options) {\n    options = options || {};\n    return parse(JSON.stringify(ejson), options);\n}\nconst EJSON = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\n\nfunction getSize(source, offset) {\n    try {\n        return NumberUtils.getNonnegativeInt32LE(source, offset);\n    }\n    catch (cause) {\n        throw new BSONOffsetError('BSON size cannot be negative', offset, { cause });\n    }\n}\nfunction findNull(bytes, offset) {\n    let nullTerminatorOffset = offset;\n    for (; bytes[nullTerminatorOffset] !== 0x00; nullTerminatorOffset++)\n        ;\n    if (nullTerminatorOffset === bytes.length - 1) {\n        throw new BSONOffsetError('Null terminator not found', offset);\n    }\n    return nullTerminatorOffset;\n}\nfunction parseToElements(bytes, startOffset = 0) {\n    startOffset ??= 0;\n    if (bytes.length < 5) {\n        throw new BSONOffsetError(`Input must be at least 5 bytes, got ${bytes.length} bytes`, startOffset);\n    }\n    const documentSize = getSize(bytes, startOffset);\n    if (documentSize > bytes.length - startOffset) {\n        throw new BSONOffsetError(`Parsed documentSize (${documentSize} bytes) does not match input length (${bytes.length} bytes)`, startOffset);\n    }\n    if (bytes[startOffset + documentSize - 1] !== 0x00) {\n        throw new BSONOffsetError('BSON documents must end in 0x00', startOffset + documentSize);\n    }\n    const elements = [];\n    let offset = startOffset + 4;\n    while (offset <= documentSize + startOffset) {\n        const type = bytes[offset];\n        offset += 1;\n        if (type === 0) {\n            if (offset - startOffset !== documentSize) {\n                throw new BSONOffsetError(`Invalid 0x00 type byte`, offset);\n            }\n            break;\n        }\n        const nameOffset = offset;\n        const nameLength = findNull(bytes, offset) - nameOffset;\n        offset += nameLength + 1;\n        let length;\n        if (type === 1 ||\n            type === 18 ||\n            type === 9 ||\n            type === 17) {\n            length = 8;\n        }\n        else if (type === 16) {\n            length = 4;\n        }\n        else if (type === 7) {\n            length = 12;\n        }\n        else if (type === 19) {\n            length = 16;\n        }\n        else if (type === 8) {\n            length = 1;\n        }\n        else if (type === 10 ||\n            type === 6 ||\n            type === 127 ||\n            type === 255) {\n            length = 0;\n        }\n        else if (type === 11) {\n            length = findNull(bytes, findNull(bytes, offset) + 1) + 1 - offset;\n        }\n        else if (type === 3 ||\n            type === 4 ||\n            type === 15) {\n            length = getSize(bytes, offset);\n        }\n        else if (type === 2 ||\n            type === 5 ||\n            type === 12 ||\n            type === 13 ||\n            type === 14) {\n            length = getSize(bytes, offset) + 4;\n            if (type === 5) {\n                length += 1;\n            }\n            if (type === 12) {\n                length += 12;\n            }\n        }\n        else {\n            throw new BSONOffsetError(`Invalid 0x${type.toString(16).padStart(2, '0')} type byte`, offset);\n        }\n        if (length > documentSize) {\n            throw new BSONOffsetError('value reports length larger than document', offset);\n        }\n        elements.push([type, nameOffset, nameLength, offset, length]);\n        offset += length;\n    }\n    return elements;\n}\n\nconst onDemand = Object.create(null);\nonDemand.parseToElements = parseToElements;\nonDemand.ByteUtils = ByteUtils;\nonDemand.NumberUtils = NumberUtils;\nObject.freeze(onDemand);\n\nconst MAXSIZE = 1024 * 1024 * 17;\nlet buffer = ByteUtils.allocate(MAXSIZE);\nfunction setInternalBufferSize(size) {\n    if (buffer.length < size) {\n        buffer = ByteUtils.allocate(size);\n    }\n}\nfunction serialize(object, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n    if (buffer.length < minInternalBufferSize) {\n        buffer = ByteUtils.allocate(minInternalBufferSize);\n    }\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    const finishedBuffer = ByteUtils.allocateUnsafe(serializationIndex);\n    finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n    return finishedBuffer;\n}\nfunction serializeWithBufferAndIndex(object, finalBuffer, options = {}) {\n    const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    const startIndex = typeof options.index === 'number' ? options.index : 0;\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n    return startIndex + serializationIndex - 1;\n}\nfunction deserialize(buffer, options = {}) {\n    return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\nfunction calculateObjectSize(object, options = {}) {\n    options = options || {};\n    const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n    return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n    const internalOptions = Object.assign({ allowObjectSmallerThanBufferSize: true, index: 0 }, options);\n    const bufferData = ByteUtils.toLocalBufferType(data);\n    let index = startIndex;\n    for (let i = 0; i < numberOfDocuments; i++) {\n        const size = NumberUtils.getInt32LE(bufferData, index);\n        internalOptions.index = index;\n        documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n        index = index + size;\n    }\n    return index;\n}\n\nvar bson = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BSONError: BSONError,\n    BSONOffsetError: BSONOffsetError,\n    BSONRegExp: BSONRegExp,\n    BSONRuntimeError: BSONRuntimeError,\n    BSONSymbol: BSONSymbol,\n    BSONType: BSONType,\n    BSONValue: BSONValue,\n    BSONVersionError: BSONVersionError,\n    Binary: Binary,\n    Code: Code,\n    DBRef: DBRef,\n    Decimal128: Decimal128,\n    Double: Double,\n    EJSON: EJSON,\n    Int32: Int32,\n    Long: Long,\n    MaxKey: MaxKey,\n    MinKey: MinKey,\n    ObjectId: ObjectId,\n    Timestamp: Timestamp,\n    UUID: UUID,\n    calculateObjectSize: calculateObjectSize,\n    deserialize: deserialize,\n    deserializeStream: deserializeStream,\n    onDemand: onDemand,\n    serialize: serialize,\n    serializeWithBufferAndIndex: serializeWithBufferAndIndex,\n    setInternalBufferSize: setInternalBufferSize\n});\n\nexport { bson as BSON, BSONError, BSONOffsetError, BSONRegExp, BSONRuntimeError, BSONSymbol, BSONType, BSONValue, BSONVersionError, Binary, Code, DBRef, Decimal128, Double, EJSON, Int32, Long, MaxKey, MinKey, ObjectId, Timestamp, UUID, calculateObjectSize, deserialize, deserializeStream, onDemand, serialize, serializeWithBufferAndIndex, setInternalBufferSize };\n//# sourceMappingURL=bson.mjs.map\n"],"file":"assets/bson-BUw40l2C.js"}